/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`gw_api_v1_accounts_account_id_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsAccountIdDetailsGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_account_id_kyc_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsAccountIdKycGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_account_id_login_messages_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsAccountIdLoginMessagesGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_account_id_status_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsAccountIdStatusGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_account_id_tasks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsAccountIdTasksGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_close_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsClosePostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_documents_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsDocumentsPostError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_login_messages_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsLoginMessagesGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsPatchError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsPostError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_accounts_status_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1AccountsStatusGetError {
    Status500(models::ProblemDetailResponse),
    Status403(models::ProblemDetailResponse),
    Status415(std::collections::HashMap<String, serde_json::Value>),
    Status400(models::ProblemDetailResponse),
    Status401(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}


/// <br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_account_id_details_get(configuration: &configuration::Configuration, account_id: &str) -> Result<models::AccountDetailsResponse, Error<GwApiV1AccountsAccountIdDetailsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;

    let uri_str = format!("{}/gw/api/v1/accounts/{accountId}/details", configuration.base_path, accountId=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountDetailsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountDetailsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsAccountIdDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generate URL address to complete real-time KYC verification using Au10Tix<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_account_id_kyc_get(configuration: &configuration::Configuration, account_id: &str) -> Result<models::Au10TixDetailResponse, Error<GwApiV1AccountsAccountIdKycGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;

    let uri_str = format!("{}/gw/api/v1/accounts/{accountId}/kyc", configuration.base_path, accountId=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Au10TixDetailResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Au10TixDetailResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsAccountIdKycGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query login messages assigned by accountId<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_account_id_login_messages_get(configuration: &configuration::Configuration, account_id: &str, r#type: Option<&str>) -> Result<models::LoginMessageResponse, Error<GwApiV1AccountsAccountIdLoginMessagesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_type = r#type;

    let uri_str = format!("{}/gw/api/v1/accounts/{accountId}/login-messages", configuration.base_path, accountId=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::LoginMessageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::LoginMessageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsAccountIdLoginMessagesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query status of account by accountId<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_account_id_status_get(configuration: &configuration::Configuration, account_id: &str) -> Result<models::AccountStatusResponse, Error<GwApiV1AccountsAccountIdStatusGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;

    let uri_str = format!("{}/gw/api/v1/accounts/{accountId}/status", configuration.base_path, accountId=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountStatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountStatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsAccountIdStatusGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query registration tasks assigned to account and pending tasks that are required for account approval<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_account_id_tasks_get(configuration: &configuration::Configuration, account_id: &str, r#type: Option<&str>) -> Result<models::GwApiV1AccountsAccountIdTasksGet200Response, Error<GwApiV1AccountsAccountIdTasksGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_type = r#type;

    let uri_str = format!("{}/gw/api/v1/accounts/{accountId}/tasks", configuration.base_path, accountId=crate::apis::urlencode(p_account_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1AccountsAccountIdTasksGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1AccountsAccountIdTasksGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsAccountIdTasksGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Submit request to close account that is opened.<br><br>**Scope**: `accounts.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_accounts_close_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_accounts_close_post_request: models::GwApiV1AccountsClosePostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1AccountsClosePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_accounts_close_post_request = gw_api_v1_accounts_close_post_request;

    let uri_str = format!("{}/gw/api/v1/accounts/close", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_accounts_close_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsClosePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Provides mechanism to submit Agreements and Disclosures to IBKR once a day instead of with each application. We store these documents on the servers and will use them for new application requests submitted that day.<ul><li>Documents will need to be submitted once a day (before the Applications are submitted). PDFs will be displayed and submitted as is- no changes/edits will be made to the actual PDF files.</li><li>This end-point will not process any Tax Form Documents. Tax Form document should be submitted with every application</li><li>If submitted in the morning, you only need to include the Tax Form attachment for each applicant. Otherwise, you will need to include PDFs with each application (Create Account).</li></ul><br><br>**Scope**: `accounts.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_accounts_documents_post(configuration: &configuration::Configuration, process_documents_payload: models::ProcessDocumentsPayload) -> Result<models::StatusResponse, Error<GwApiV1AccountsDocumentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_process_documents_payload = process_documents_payload;

    let uri_str = format!("{}/gw/api/v1/accounts/documents", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_process_documents_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsDocumentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve the application request and IBKR response data based on IBKR accountId or externalId. Only available for accounts that originate via API<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_get(configuration: &configuration::Configuration, account_id: Option<&str>, external_id: Option<&str>) -> Result<models::GwApiV1AccountsGet200Response, Error<GwApiV1AccountsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_id = account_id;
    let p_external_id = external_id;

    let uri_str = format!("{}/gw/api/v1/accounts", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_account_id {
        req_builder = req_builder.query(&[("accountId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_external_id {
        req_builder = req_builder.query(&[("externalId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1AccountsGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1AccountsGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query all accounts associated with ‘Client ID’ that have incomplete login message<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_login_messages_get(configuration: &configuration::Configuration, login_message_request: models::LoginMessageRequest) -> Result<models::LoginMessageResponse, Error<GwApiV1AccountsLoginMessagesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_login_message_request = login_message_request;

    let uri_str = format!("{}/gw/api/v1/accounts/login-messages", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("loginMessageRequest", &p_login_message_request.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::LoginMessageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::LoginMessageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsLoginMessagesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update information for an existing accountId<br><br>**Scope**: `accounts.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_accounts_patch(configuration: &configuration::Configuration, account_management_requests_payload: models::AccountManagementRequestsPayload) -> Result<models::StatusResponse, Error<GwApiV1AccountsPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_management_requests_payload = account_management_requests_payload;

    let uri_str = format!("{}/gw/api/v1/accounts", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_account_management_requests_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Submit account application. This will create brokerage account for the end user.<br><br>**Scope**: `accounts.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_accounts_post(configuration: &configuration::Configuration, application_payload: models::ApplicationPayload) -> Result<models::StatusResponse, Error<GwApiV1AccountsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_application_payload = application_payload;

    let uri_str = format!("{}/gw/api/v1/accounts", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_application_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query status of all accounts associated with ‘Client ID'<br><br>**Scope**: `accounts.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_accounts_status_get(configuration: &configuration::Configuration, account_status_request: models::AccountStatusRequest) -> Result<models::AccountStatusBulkResponse, Error<GwApiV1AccountsStatusGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_status_request = account_status_request;

    let uri_str = format!("{}/gw/api/v1/accounts/status", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("accountStatusRequest", &p_account_status_request.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AccountStatusBulkResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AccountStatusBulkResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1AccountsStatusGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
