/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`ws_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WsGetError {
    UnknownValue(serde_json::Value),
}


/// Open websocket.
pub async fn ws_get(configuration: &configuration::Configuration, connection: &str, upgrade: &str, api: &str, oauth_token: &str) -> Result<(), Error<WsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_connection = connection;
    let p_upgrade = upgrade;
    let p_api = api;
    let p_oauth_token = oauth_token;

    let uri_str = format!("{}/ws", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("oauth_token", &p_oauth_token.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Connection", p_connection.to_string());
    req_builder = req_builder.header("Upgrade", p_upgrade.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<WsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
