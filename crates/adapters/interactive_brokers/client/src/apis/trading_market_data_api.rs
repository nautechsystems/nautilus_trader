/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`hmds_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HmdsHistoryGetError {
    Status400(models::ErrorResponse),
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`iserver_marketdata_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IserverMarketdataHistoryGetError {
    Status400(models::ErrorResponse),
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`iserver_marketdata_snapshot_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IserverMarketdataSnapshotGetError {
    Status400(models::ErrorResponse),
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`iserver_marketdata_unsubscribe_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IserverMarketdataUnsubscribePostError {
    Status400(models::ErrorResponse),
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`iserver_marketdata_unsubscribeall_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IserverMarketdataUnsubscribeallGetError {
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`md_regsnapshot_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdRegsnapshotGetError {
    Status400(models::ErrorResponse),
    Status401(String),
    Status500(models::ErrorOnlyResponse),
    Status503(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Request historical data for an instrument in the form of OHLC bars.
pub async fn hmds_history_get(
    configuration: &configuration::Configuration,
    conid: &str,
    period: &str,
    bar: &str,
    bar_type: Option<&str>,
    start_time: Option<&str>,
    direction: Option<&str>,
    outside_rth: Option<bool>,
) -> Result<models::HmdsHistoryResponse, Error<HmdsHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_conid = conid;
    let p_period = period;
    let p_bar = bar;
    let p_bar_type = bar_type;
    let p_start_time = start_time;
    let p_direction = direction;
    let p_outside_rth = outside_rth;

    let uri_str = format!("{}/hmds/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("conid", &p_conid.to_string())]);
    if let Some(ref param_value) = p_bar_type {
        req_builder = req_builder.query(&[("barType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("period", &p_period.to_string())]);
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("bar", &p_bar.to_string())]);
    if let Some(ref param_value) = p_outside_rth {
        req_builder = req_builder.query(&[("outsideRth", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::HmdsHistoryResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::HmdsHistoryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HmdsHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Request historical data for an instrument in the form of OHLC bars.
pub async fn iserver_marketdata_history_get(
    configuration: &configuration::Configuration,
    conid: &str,
    period: &str,
    bar: &str,
    exchange: Option<&str>,
    start_time: Option<&str>,
    outside_rth: Option<bool>,
) -> Result<models::IserverHistoryResponse, Error<IserverMarketdataHistoryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_conid = conid;
    let p_period = period;
    let p_bar = bar;
    let p_exchange = exchange;
    let p_start_time = start_time;
    let p_outside_rth = outside_rth;

    let uri_str = format!("{}/iserver/marketdata/history", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("conid", &p_conid.to_string())]);
    if let Some(ref param_value) = p_exchange {
        req_builder = req_builder.query(&[("exchange", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("period", &p_period.to_string())]);
    req_builder = req_builder.query(&[("bar", &p_bar.to_string())]);
    if let Some(ref param_value) = p_start_time {
        req_builder = req_builder.query(&[("startTime", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_outside_rth {
        req_builder = req_builder.query(&[("outsideRth", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IserverHistoryResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IserverHistoryResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IserverMarketdataHistoryGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get Market Data for the given conid(s). A pre-flight request must be made prior to ever receiving data. For some fields, it may take more than a few moments to receive information. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot. For derivative contracts the endpoint /iserver/secdef/search must be called first.
pub async fn iserver_marketdata_snapshot_get(
    configuration: &configuration::Configuration,
    conids: &str,
    fields: Option<models::MdFields>,
) -> Result<models::FyiVt, Error<IserverMarketdataSnapshotGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_conids = conids;
    let p_fields = fields;

    let uri_str = format!("{}/iserver/marketdata/snapshot", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("conids", &p_conids.to_string())]);
    if let Some(ref param_value) = p_fields {
        req_builder = req_builder.query(&[("fields", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FyiVt`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FyiVt`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IserverMarketdataSnapshotGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Instruct IServer to close its backend stream for the instrument when real-time snapshots are no longer needed.
pub async fn iserver_marketdata_unsubscribe_post(
    configuration: &configuration::Configuration,
    iserver_marketdata_unsubscribe_post_request: models::IserverMarketdataUnsubscribePostRequest,
) -> Result<
    models::IserverMarketdataUnsubscribePost200Response,
    Error<IserverMarketdataUnsubscribePostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_iserver_marketdata_unsubscribe_post_request = iserver_marketdata_unsubscribe_post_request;

    let uri_str = format!("{}/iserver/marketdata/unsubscribe", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_iserver_marketdata_unsubscribe_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IserverMarketdataUnsubscribePost200Response`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IserverMarketdataUnsubscribePost200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IserverMarketdataUnsubscribePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Instruct IServer to close all of its open backend data streams for all instruments.
pub async fn iserver_marketdata_unsubscribeall_get(
    configuration: &configuration::Configuration,
) -> Result<
    models::IserverMarketdataUnsubscribeallGet200Response,
    Error<IserverMarketdataUnsubscribeallGetError>,
> {
    let uri_str = format!(
        "{}/iserver/marketdata/unsubscribeall",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IserverMarketdataUnsubscribeallGet200Response`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IserverMarketdataUnsubscribeallGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IserverMarketdataUnsubscribeallGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Request a regulatory snapshot for an instrument.
pub async fn md_regsnapshot_get(
    configuration: &configuration::Configuration,
    conid: &str,
) -> Result<models::RegsnapshotData, Error<MdRegsnapshotGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_conid = conid;

    let uri_str = format!("{}/md/regsnapshot", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("conid", &p_conid.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegsnapshotData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegsnapshotData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdRegsnapshotGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
