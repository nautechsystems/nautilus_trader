/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`gw_api_v1_statements_available_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1StatementsAvailableGetError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status402(models::UnauthorizedAccessResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_statements_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1StatementsPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status402(models::UnauthorizedAccessResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_tax_documents_available_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1TaxDocumentsAvailableGetError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status402(models::UnauthorizedAccessResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_tax_documents_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1TaxDocumentsPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status402(models::UnauthorizedAccessResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}


/// <br>**Scope**: `statements.read` OR `reports.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_statements_available_get(configuration: &configuration::Configuration, authorization: &str, account_id: &str) -> Result<models::GetAvailableStmtDatesResponse, Error<GwApiV1StatementsAvailableGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_account_id = account_id;

    let uri_str = format!("{}/gw/api/v1/statements/available", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("accountId", &p_account_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAvailableStmtDatesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAvailableStmtDatesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1StatementsAvailableGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// <br>**Scope**: `statements.read` OR `statements.write` OR `reports.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_statements_post(configuration: &configuration::Configuration, authorization: &str, stmt_request: models::StmtRequest) -> Result<models::GetStatementsResponse, Error<GwApiV1StatementsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_stmt_request = stmt_request;

    let uri_str = format!("{}/gw/api/v1/statements", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_stmt_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetStatementsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetStatementsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1StatementsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// <br>**Scope**: `statements.read` OR `reports.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_tax_documents_available_get(configuration: &configuration::Configuration, authorization: &str, account_id: &str, year: i32) -> Result<models::GetAvailableTaxFormsResponse, Error<GwApiV1TaxDocumentsAvailableGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_account_id = account_id;
    let p_year = year;

    let uri_str = format!("{}/gw/api/v1/tax-documents/available", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("accountId", &p_account_id.to_string())]);
    req_builder = req_builder.query(&[("year", &p_year.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAvailableTaxFormsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAvailableTaxFormsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1TaxDocumentsAvailableGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// <br>**Scope**: `statements.write` OR `reports.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_tax_documents_post(configuration: &configuration::Configuration, authorization: &str, tax_form_request: models::TaxFormRequest) -> Result<models::TaxFormResponse, Error<GwApiV1TaxDocumentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_tax_form_request = tax_form_request;

    let uri_str = format!("{}/gw/api/v1/tax-documents", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_tax_form_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TaxFormResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TaxFormResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1TaxDocumentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
