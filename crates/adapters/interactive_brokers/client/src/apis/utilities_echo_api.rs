/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`gw_api_v1_echo_https_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1EchoHttpsGetError {
    Status401(models::InvalidAccessTokenResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_echo_signed_jwt_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1EchoSignedJwtPostError {
    Status401(models::InvalidAccessTokenResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// <br>**Scope**: `echo.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_echo_https_get(
    configuration: &configuration::Configuration,
) -> Result<models::EchoResponse, Error<GwApiV1EchoHttpsGetError>> {
    let uri_str = format!("{}/gw/api/v1/echo/https", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::EchoResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::EchoResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1EchoHttpsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// <br>**Scope**: `echo.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_echo_signed_jwt_post(
    configuration: &configuration::Configuration,
    signed_jwt_echo_request: models::SignedJwtEchoRequest,
) -> Result<models::EchoResponse, Error<GwApiV1EchoSignedJwtPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_signed_jwt_echo_request = signed_jwt_echo_request;

    let uri_str = format!("{}/gw/api/v1/echo/signed-jwt", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_signed_jwt_echo_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::EchoResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::EchoResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1EchoSignedJwtPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
