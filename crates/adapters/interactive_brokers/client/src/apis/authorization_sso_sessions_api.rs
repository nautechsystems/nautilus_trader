/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`gw_api_v1_sso_browser_sessions_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1SsoBrowserSessionsPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_sso_sessions_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1SsoSessionsPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status401(models::InvalidAccessTokenResponse),
    Status403(models::InsufficientScopeResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}


/// <br>**Scope**: `sso-browser-sessions.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_sso_browser_sessions_post(configuration: &configuration::Configuration, authorization: &str, create_browser_session_request: models::CreateBrowserSessionRequest) -> Result<models::CreateBrowserSessionResponse, Error<GwApiV1SsoBrowserSessionsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_create_browser_session_request = create_browser_session_request;

    let uri_str = format!("{}/gw/api/v1/sso-browser-sessions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_create_browser_session_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateBrowserSessionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateBrowserSessionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1SsoBrowserSessionsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// <br>**Scope**: `sso-sessions.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_sso_sessions_post(configuration: &configuration::Configuration, authorization: &str, create_session_request: models::CreateSessionRequest) -> Result<models::CreateSessionResponse, Error<GwApiV1SsoSessionsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_authorization = authorization;
    let p_create_session_request = create_session_request;

    let uri_str = format!("{}/gw/api/v1/sso-sessions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("authorization", p_authorization.to_string());
    req_builder = req_builder.json(&p_create_session_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSessionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSessionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1SsoSessionsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
