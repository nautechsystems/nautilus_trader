/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`gw_api_v1_bank_instructions_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1BankInstructionsPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_bank_instructions_query_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1BankInstructionsQueryPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_client_instructions_client_instruction_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1ClientInstructionsClientInstructionIdGetError {
    Status404(models::NoSuchInstructionResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_external_asset_transfers_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1ExternalAssetTransfersPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_external_cash_transfers_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1ExternalCashTransfersPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_external_cash_transfers_query_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1ExternalCashTransfersQueryPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_instruction_sets_instruction_set_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InstructionSetsInstructionSetIdGetError {
    Status404(models::NoSuchInstructionSetResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_instructions_cancel_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InstructionsCancelPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_instructions_instruction_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InstructionsInstructionIdGetError {
    Status404(models::NoSuchInstructionResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_instructions_query_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InstructionsQueryPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_internal_asset_transfers_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InternalAssetTransfersPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gw_api_v1_internal_cash_transfers_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GwApiV1InternalCashTransfersPostError {
    Status400(models::MissingRequiredParameterResponse),
    Status403(models::ForbiddenInstructionResponse),
    Status422(models::BusinessRejectResponse),
    Status500(models::InternalServerErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Create or delete bank instructions by accountId. Only ACH and EDDA are supported for 'Create'.<br><br>**Scope**: `bank-instructions.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_bank_instructions_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_bank_instructions_post_request: models::GwApiV1BankInstructionsPostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1BankInstructionsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_bank_instructions_post_request = gw_api_v1_bank_instructions_post_request;

    let uri_str = format!("{}/gw/api/v1/bank-instructions", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_bank_instructions_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1BankInstructionsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// View active bank instructions for an accountId.<br><br>**Scope**: `bank-instructions.read`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_bank_instructions_query_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_bank_instructions_query_post_request: models::GwApiV1BankInstructionsQueryPostRequest) -> Result<models::GwApiV1BankInstructionsQueryPost201Response, Error<GwApiV1BankInstructionsQueryPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_bank_instructions_query_post_request = gw_api_v1_bank_instructions_query_post_request;

    let uri_str = format!("{}/gw/api/v1/bank-instructions/query", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_bank_instructions_query_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1BankInstructionsQueryPost201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1BankInstructionsQueryPost201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1BankInstructionsQueryPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve status of request by clientInstructionId.<br><br>**Scope**: `instructions.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_client_instructions_client_instruction_id_get(configuration: &configuration::Configuration, client_id: &str, client_instruction_id: i32) -> Result<models::GwApiV1ClientInstructionsClientInstructionIdGet200Response, Error<GwApiV1ClientInstructionsClientInstructionIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_client_instruction_id = client_instruction_id;

    let uri_str = format!("{}/gw/api/v1/client-instructions/{clientInstructionId}", configuration.base_path, client_id=crate::apis::urlencode(p_client_id), clientInstructionId=p_client_instruction_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1ClientInstructionsClientInstructionIdGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1ClientInstructionsClientInstructionIdGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1ClientInstructionsClientInstructionIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Initiate request to submit external position transfer. Methods- ACATS, ATON, Basic FOP, FOP, DWAC. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers/<br><br>**Scope**: `transfers.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_external_asset_transfers_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_external_asset_transfers_post_request: models::GwApiV1ExternalAssetTransfersPostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1ExternalAssetTransfersPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_external_asset_transfers_post_request = gw_api_v1_external_asset_transfers_post_request;

    let uri_str = format!("{}/gw/api/v1/external-asset-transfers", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_external_asset_transfers_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1ExternalAssetTransfersPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Initiate request to deposit or withdrawal between IBKR account and bank account. More information on transfer methods can be found here - https://www.interactivebrokers.com/campus/trading-lessons/cash-and-position-transfers<br><br>**Scope**: `transfers.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_external_cash_transfers_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_external_cash_transfers_post_request: models::GwApiV1ExternalCashTransfersPostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1ExternalCashTransfersPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_external_cash_transfers_post_request = gw_api_v1_external_cash_transfers_post_request;

    let uri_str = format!("{}/gw/api/v1/external-cash-transfers", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_external_cash_transfers_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1ExternalCashTransfersPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// View available cash for withdrawal with and without margin loan by accountId<br><br>**Scope**: `transfers.read`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_external_cash_transfers_query_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_external_cash_transfers_query_post_request: models::GwApiV1ExternalCashTransfersQueryPostRequest) -> Result<models::GwApiV1ExternalCashTransfersQueryPost201Response, Error<GwApiV1ExternalCashTransfersQueryPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_external_cash_transfers_query_post_request = gw_api_v1_external_cash_transfers_query_post_request;

    let uri_str = format!("{}/gw/api/v1/external-cash-transfers/query", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_external_cash_transfers_query_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1ExternalCashTransfersQueryPost201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1ExternalCashTransfersQueryPost201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1ExternalCashTransfersQueryPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve status of all requests associated with instructionSetId.<br><br>**Scope**: `instructions.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_instruction_sets_instruction_set_id_get(configuration: &configuration::Configuration, client_id: &str, instruction_set_id: i32) -> Result<models::BulkMultiStatusResponse, Error<GwApiV1InstructionSetsInstructionSetIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_instruction_set_id = instruction_set_id;

    let uri_str = format!("{}/gw/api/v1/instruction-sets/{instructionSetId}", configuration.base_path, client_id=crate::apis::urlencode(p_client_id), instructionSetId=p_instruction_set_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BulkMultiStatusResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BulkMultiStatusResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InstructionSetsInstructionSetIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Cancel request by instructionId.<br><br>**Scope**: `instructions.read`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_instructions_cancel_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_instructions_cancel_post_request: models::GwApiV1InstructionsCancelPostRequest) -> Result<models::SynchronousInstructionResponse, Error<GwApiV1InstructionsCancelPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_instructions_cancel_post_request = gw_api_v1_instructions_cancel_post_request;

    let uri_str = format!("{}/gw/api/v1/instructions/cancel", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_instructions_cancel_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InstructionsCancelPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve status of request by instructionId<br><br>**Scope**: `instructions.read`<br>**Security Policy**: `HTTPS`
pub async fn gw_api_v1_instructions_instruction_id_get(configuration: &configuration::Configuration, client_id: &str, instruction_id: i32) -> Result<models::GwApiV1ClientInstructionsClientInstructionIdGet200Response, Error<GwApiV1InstructionsInstructionIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_instruction_id = instruction_id;

    let uri_str = format!("{}/gw/api/v1/instructions/{instructionId}", configuration.base_path, client_id=crate::apis::urlencode(p_client_id), instructionId=p_instruction_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GwApiV1ClientInstructionsClientInstructionIdGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GwApiV1ClientInstructionsClientInstructionIdGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InstructionsInstructionIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Query list of recent transactions (up to 30 days) based on accountId.<br><br>**Scope**: `instructions.read`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_instructions_query_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_instructions_query_post_request: models::GwApiV1InstructionsQueryPostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1InstructionsQueryPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_instructions_query_post_request = gw_api_v1_instructions_query_post_request;

    let uri_str = format!("{}/gw/api/v1/instructions/query", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_instructions_query_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InstructionsQueryPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Transfer positions internally between two accounts with Interactive Brokers<br><br>**Scope**: `transfers.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_internal_asset_transfers_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_internal_asset_transfers_post_request: models::GwApiV1InternalAssetTransfersPostRequest) -> Result<models::AsynchronousInstructionResponse, Error<GwApiV1InternalAssetTransfersPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_internal_asset_transfers_post_request = gw_api_v1_internal_asset_transfers_post_request;

    let uri_str = format!("{}/gw/api/v1/internal-asset-transfers", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_internal_asset_transfers_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AsynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AsynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InternalAssetTransfersPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Transfer cash internally between two accounts with Interactive Brokers.<br><br>**Scope**: `transfers.write`<br>**Security Policy**: `Signed JWT`
pub async fn gw_api_v1_internal_cash_transfers_post(configuration: &configuration::Configuration, client_id: &str, gw_api_v1_internal_cash_transfers_post_request: models::GwApiV1InternalCashTransfersPostRequest) -> Result<models::SynchronousInstructionResponse, Error<GwApiV1InternalCashTransfersPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_client_id = client_id;
    let p_gw_api_v1_internal_cash_transfers_post_request = gw_api_v1_internal_cash_transfers_post_request;

    let uri_str = format!("{}/gw/api/v1/internal-cash-transfers", configuration.base_path, client_id=crate::apis::urlencode(p_client_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_gw_api_v1_internal_cash_transfers_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SynchronousInstructionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SynchronousInstructionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GwApiV1InternalCashTransfersPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
