/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`generate_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GenerateTokenError {
    Status400(models::ProblemDetailResponse),
    Status500(models::ProblemDetailResponse),
    UnknownValue(serde_json::Value),
}


/// Generate OAuth 2.0 access tokens based on request parameters.
pub async fn generate_token(configuration: &configuration::Configuration, grant_type: &str, client_assertion: &str, client_assertion_type: &str, scope: &str) -> Result<models::TokenResponse, Error<GenerateTokenError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_grant_type = grant_type;
    let p_client_assertion = client_assertion;
    let p_client_assertion_type = client_assertion_type;
    let p_scope = scope;

    let uri_str = format!("{}/oauth2/api/v1/token", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("grant_type", p_grant_type.to_string());
    multipart_form_params.insert("client_assertion", p_client_assertion.to_string());
    multipart_form_params.insert("client_assertion_type", p_client_assertion_type.to_string());
    multipart_form_params.insert("scope", p_scope.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TokenResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TokenResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GenerateTokenError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}
