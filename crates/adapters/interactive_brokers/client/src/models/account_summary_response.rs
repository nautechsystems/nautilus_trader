/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// AccountSummaryResponse : Successful return contianing an array of at-a-glance account details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountSummaryResponse {
    /// Describes the unique account type. For standard individual accounts, an empty string is returned.
    #[serde(rename = "accountType", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<String>,
    /// If the account is currently non-tradeable, a status message will be dispalyed.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Returns the total account balance.
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<i32>,
    /// Simple Moving Average of the account.
    #[serde(rename = "SMA", skip_serializing_if = "Option::is_none")]
    pub sma: Option<i32>,
    /// Total buying power available for the account.
    #[serde(rename = "buyingPower", skip_serializing_if = "Option::is_none")]
    pub buying_power: Option<i32>,
    /// The amount of equity you have available for trading. For both the Securities and Commodities segments, this is calculated as: Equity with Loan Value â€“ Initial Margin.
    #[serde(rename = "availableFunds", skip_serializing_if = "Option::is_none")]
    pub available_funds: Option<i32>,
    /// The amount of cash in excess of the usual requirement in your account.
    #[serde(rename = "excessLiquidity", skip_serializing_if = "Option::is_none")]
    pub excess_liquidity: Option<i32>,
    /// The basis for determining the price of the assets in your account.
    #[serde(
        rename = "netLiquidationValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub net_liquidation_value: Option<i32>,
    /// The basis for determining whether you have the necessary assets to either initiate or maintain security assets.
    #[serde(
        rename = "equityWithLoanValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub equity_with_loan_value: Option<i32>,
    /// The Federal Reserve Board regulation governing the amount of credit that broker dealers may extend to clients who borrow money to buy securities on margin.
    #[serde(rename = "regTLoan", skip_serializing_if = "Option::is_none")]
    pub reg_t_loan: Option<i32>,
    /// Absolute value of the Long Stock Value + Short Stock Value + Long Option Value + Short Option Value + Fund Value.
    #[serde(rename = "securitiesGVP", skip_serializing_if = "Option::is_none")]
    pub securities_gvp: Option<i32>,
    /// Cash recognized at the time of trade + futures P&L. This value reflects real-time currency positions, including:  *  Trades executed directly through the FX market.  *  Trades executed as a result of automatic IB conversions, which occur when you trade a product in a non-base currency.  *  Trades deliberately executed to close non-base currency positions using the FXCONV destination.
    #[serde(rename = "totalCashValue", skip_serializing_if = "Option::is_none")]
    pub total_cash_value: Option<i32>,
    /// Accrued interest is the interest accruing on a security since the previous coupon date. If a security is sold between two payment dates, the buyer usually compensates the seller for the interest accrued, either within the price or as a separate payment.
    #[serde(rename = "accruedInterest", skip_serializing_if = "Option::is_none")]
    pub accrued_interest: Option<i32>,
    /// The initial margin requirements calculated under US Regulation T rules for both the securities and commodities segment of your account.
    #[serde(rename = "regTMargin", skip_serializing_if = "Option::is_none")]
    pub reg_t_margin: Option<i32>,
    /// The available initial margin for the account.
    #[serde(rename = "initialMargin", skip_serializing_if = "Option::is_none")]
    pub initial_margin: Option<i32>,
    /// The available maintenance margin for the account.
    #[serde(rename = "maintenanceMargin", skip_serializing_if = "Option::is_none")]
    pub maintenance_margin: Option<i32>,
    /// An array containing balance information for all currencies held by the account.
    #[serde(rename = "cashBalances", skip_serializing_if = "Option::is_none")]
    pub cash_balances: Option<Vec<models::AccountSummaryResponseCashBalancesInner>>,
}

impl AccountSummaryResponse {
    /// Successful return contianing an array of at-a-glance account details.
    pub fn new() -> AccountSummaryResponse {
        AccountSummaryResponse {
            account_type: None,
            status: None,
            balance: None,
            sma: None,
            buying_power: None,
            available_funds: None,
            excess_liquidity: None,
            net_liquidation_value: None,
            equity_with_loan_value: None,
            reg_t_loan: None,
            securities_gvp: None,
            total_cash_value: None,
            accrued_interest: None,
            reg_t_margin: None,
            initial_margin: None,
            maintenance_margin: None,
            cash_balances: None,
        }
    }
}
