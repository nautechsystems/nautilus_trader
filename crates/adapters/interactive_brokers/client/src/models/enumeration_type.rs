/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EnumerationType : <ul><li>exchange-bundles - query most up to date list of exchange-bundles for tradingPermissions</li><li>business-and-occupation - list of occupation and employerBusiness for employmentDetails</li><li>employee-track - query most up to date companyId for account. For affiliation details, if company has an existing IBKR Employee Track account</li><li>fin-info-ranges - query most up to date range IDs by currency for annualNetIncome, netWorth, liquidNetWorth</li><li>acats - query most up to date values for brokerId and brokerName. Used if funding via US ACATS extPositionsTransfers</li><li>aton - query most up to date values for brokerId and brokerName. Used if funding via US ACATS extPositionsTransfers</li><li>market-data - query most up to date values for brokerId and brokerName. Used if funding via ATON Canada extPositionsTransfers</li><li>edd-avt - query questions associated with EDD (Enhanced Due Diligence) or AVT (Additional Verification) tasks assigned to an account</li><li>prohibited-country - view list of prohibited countries. Applicants that reside in prohibited country are restricted from opening an account with IBKR. Error will be thrown IF legalResidenceCountry, OR country (included within Residence, mailingAddress and employerAddress, taxResidency node) is a prohibited country</li><li>employee-plans - view EPA that are linked to master account (applicable IF offering SEP IRA accounts)</li><li>questionnaires - obtain list of questionnaires</li><li>security-questions - obtain list of questions supported for IBKR security questions</li><li>quiz-questions - obtain list of questions associated with IBKR knowledge assessment</li><li>wire-instructions - obtain list of wire instructions</li><li>product-country-bundles - obtain list of product country bundles</li></ul>
/// <ul><li>exchange-bundles - query most up to date list of exchange-bundles for tradingPermissions</li><li>business-and-occupation - list of occupation and employerBusiness for employmentDetails</li><li>employee-track - query most up to date companyId for account. For affiliation details, if company has an existing IBKR Employee Track account</li><li>fin-info-ranges - query most up to date range IDs by currency for annualNetIncome, netWorth, liquidNetWorth</li><li>acats - query most up to date values for brokerId and brokerName. Used if funding via US ACATS extPositionsTransfers</li><li>aton - query most up to date values for brokerId and brokerName. Used if funding via US ACATS extPositionsTransfers</li><li>market-data - query most up to date values for brokerId and brokerName. Used if funding via ATON Canada extPositionsTransfers</li><li>edd-avt - query questions associated with EDD (Enhanced Due Diligence) or AVT (Additional Verification) tasks assigned to an account</li><li>prohibited-country - view list of prohibited countries. Applicants that reside in prohibited country are restricted from opening an account with IBKR. Error will be thrown IF legalResidenceCountry, OR country (included within Residence, mailingAddress and employerAddress, taxResidency node) is a prohibited country</li><li>employee-plans - view EPA that are linked to master account (applicable IF offering SEP IRA accounts)</li><li>questionnaires - obtain list of questionnaires</li><li>security-questions - obtain list of questions supported for IBKR security questions</li><li>quiz-questions - obtain list of questions associated with IBKR knowledge assessment</li><li>wire-instructions - obtain list of wire instructions</li><li>product-country-bundles - obtain list of product country bundles</li></ul>
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EnumerationType {
    #[serde(rename = "exchange-bundles")]
    ExchangeBundles,
    #[serde(rename = "business-and-occupation")]
    BusinessAndOccupation,
    #[serde(rename = "employee-track")]
    EmployeeTrack,
    #[serde(rename = "fin-info-ranges")]
    FinInfoRanges,
    #[serde(rename = "acats")]
    Acats,
    #[serde(rename = "aton")]
    Aton,
    #[serde(rename = "market-data")]
    MarketData,
    #[serde(rename = "edd-avt")]
    EddAvt,
    #[serde(rename = "prohibited-country")]
    ProhibitedCountry,
    #[serde(rename = "employee-plans")]
    EmployeePlans,
    #[serde(rename = "questionnaires")]
    Questionnaires,
    #[serde(rename = "security-questions")]
    SecurityQuestions,
    #[serde(rename = "quiz-questions")]
    QuizQuestions,
    #[serde(rename = "wire-instructions")]
    WireInstructions,
    #[serde(rename = "product-country-bundles")]
    ProductCountryBundles,

}

impl std::fmt::Display for EnumerationType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ExchangeBundles => write!(f, "exchange-bundles"),
            Self::BusinessAndOccupation => write!(f, "business-and-occupation"),
            Self::EmployeeTrack => write!(f, "employee-track"),
            Self::FinInfoRanges => write!(f, "fin-info-ranges"),
            Self::Acats => write!(f, "acats"),
            Self::Aton => write!(f, "aton"),
            Self::MarketData => write!(f, "market-data"),
            Self::EddAvt => write!(f, "edd-avt"),
            Self::ProhibitedCountry => write!(f, "prohibited-country"),
            Self::EmployeePlans => write!(f, "employee-plans"),
            Self::Questionnaires => write!(f, "questionnaires"),
            Self::SecurityQuestions => write!(f, "security-questions"),
            Self::QuizQuestions => write!(f, "quiz-questions"),
            Self::WireInstructions => write!(f, "wire-instructions"),
            Self::ProductCountryBundles => write!(f, "product-country-bundles"),
        }
    }
}

impl Default for EnumerationType {
    fn default() -> EnumerationType {
        Self::ExchangeBundles
    }
}
