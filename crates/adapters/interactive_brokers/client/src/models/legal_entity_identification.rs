/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegalEntityIdentification {
    #[serde(
        rename = "placeOfBusinessAddress",
        skip_serializing_if = "Option::is_none"
    )]
    pub place_of_business_address: Option<Box<models::Address>>,
    #[serde(rename = "mailingAddress", skip_serializing_if = "Option::is_none")]
    pub mailing_address: Option<Box<models::Address>>,
    #[serde(rename = "identification", skip_serializing_if = "Option::is_none")]
    pub identification: Option<String>,
    #[serde(
        rename = "identificationCountry",
        skip_serializing_if = "Option::is_none"
    )]
    pub identification_country: Option<String>,
    #[serde(rename = "formationCountry", skip_serializing_if = "Option::is_none")]
    pub formation_country: Option<String>,
    #[serde(rename = "formationType", skip_serializing_if = "Option::is_none")]
    pub formation_type: Option<FormationType>,
    #[serde(rename = "exchangeCode", skip_serializing_if = "Option::is_none")]
    pub exchange_code: Option<String>,
    #[serde(rename = "exchangeSymbol", skip_serializing_if = "Option::is_none")]
    pub exchange_symbol: Option<String>,
    #[serde(rename = "sameMailAddress", skip_serializing_if = "Option::is_none")]
    pub same_mail_address: Option<bool>,
}

impl LegalEntityIdentification {
    pub fn new() -> LegalEntityIdentification {
        LegalEntityIdentification {
            place_of_business_address: None,
            mailing_address: None,
            identification: None,
            identification_country: None,
            formation_country: None,
            formation_type: None,
            exchange_code: None,
            exchange_symbol: None,
            same_mail_address: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FormationType {
    #[serde(rename = "PUBLIC")]
    Public,
    #[serde(rename = "PRIVATE")]
    Private,
    #[serde(rename = "OTHER")]
    Other,
}

impl Default for FormationType {
    fn default() -> FormationType {
        Self::Public
    }
}
