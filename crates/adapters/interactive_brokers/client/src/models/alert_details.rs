/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AlertDetails : details of the specified alert
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlertDetails {
    /// Requestor’s account ID
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// Alert’s tracking ID. Can be used for modifying or deleting alerts.
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<i32>,
    /// Human readable name of the alert.
    #[serde(rename = "alertName", skip_serializing_if = "Option::is_none")]
    pub alert_name: Option<String>,
    /// Time in Force effective for the Alert
    #[serde(rename = "tif", skip_serializing_if = "Option::is_none")]
    pub tif: Option<String>,
    /// Returns the UTC formatted date used in GTD orders.
    #[serde(rename = "expire_time", skip_serializing_if = "Option::is_none")]
    pub expire_time: Option<String>,
    /// Returns if the alert is active [1] or disabled [0].
    #[serde(rename = "alert_active", skip_serializing_if = "Option::is_none")]
    pub alert_active: Option<i32>,
    /// Returns if the alert can be sent more than once.
    #[serde(rename = "alert_repeatable", skip_serializing_if = "Option::is_none")]
    pub alert_repeatable: Option<i32>,
    /// Returns the designated email address for sendMessage functionality.
    #[serde(rename = "alert_email", skip_serializing_if = "Option::is_none")]
    pub alert_email: Option<String>,
    /// Returns whether or not the alert will send an email.
    #[serde(rename = "alert_send_message", skip_serializing_if = "Option::is_none")]
    pub alert_send_message: Option<i32>,
    /// Returns the body content of what your alert will report once triggered
    #[serde(rename = "alert_message", skip_serializing_if = "Option::is_none")]
    pub alert_message: Option<String>,
    /// Returns whether or not the alert will trigger TWS Pop-up messages
    #[serde(rename = "alert_show_popup", skip_serializing_if = "Option::is_none")]
    pub alert_show_popup: Option<i32>,
    /// Returns whether or not the alert will play audio
    #[serde(rename = "alert_play_audio", skip_serializing_if = "Option::is_none")]
    pub alert_play_audio: Option<i32>,
    /// represent order statusAlways returns “Presubmitted”.
    #[serde(rename = "order_status", skip_serializing_if = "Option::is_none")]
    pub order_status: Option<OrderStatus>,
    /// Returns whether or not the alert was triggered yet.
    #[serde(rename = "alert_triggered", skip_serializing_if = "Option::is_none")]
    pub alert_triggered: Option<i32>,
    /// Foreground color. Not applicable to API.
    #[serde(rename = "fg_color", skip_serializing_if = "Option::is_none")]
    pub fg_color: Option<String>,
    /// Background color. Not applicable to API.
    #[serde(rename = "bg_color", skip_serializing_if = "Option::is_none")]
    pub bg_color: Option<String>,
    /// Returns if the order can be edited.
    #[serde(rename = "order_not_editable", skip_serializing_if = "Option::is_none")]
    pub order_not_editable: Option<bool>,
    /// Returns whether or not the alert will trigger mobile notifications.
    #[serde(rename = "itws_orders_only", skip_serializing_if = "Option::is_none")]
    pub itws_orders_only: Option<i32>,
    /// Returns currency set for MTA alerts. Only valid for alert type 8 & 9.
    #[serde(rename = "alert_mta_currency", skip_serializing_if = "Option::is_none")]
    pub alert_mta_currency: Option<String>,
    /// Returns current MTA default values.
    #[serde(rename = "alert_mta_defaults", skip_serializing_if = "Option::is_none")]
    pub alert_mta_defaults: Option<String>,
    /// Tracking ID for MTA alerts only. Returns ‘null’ for standard alerts.
    #[serde(rename = "tool_id", skip_serializing_if = "Option::is_none")]
    pub tool_id: Option<i32>,
    /// Returned for time-specific conditions.
    #[serde(rename = "time_zone", skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
    /// Returns default type set for alerts. Configured in Client Portal.
    #[serde(rename = "alert_default_type", skip_serializing_if = "Option::is_none")]
    pub alert_default_type: Option<i32>,
    /// Returns the total number of conditions in the alert.
    #[serde(rename = "condition_size", skip_serializing_if = "Option::is_none")]
    pub condition_size: Option<i32>,
    /// Returns whether or not the alert will trigger outside of regular trading hours.
    #[serde(rename = "condition_outside_rth", skip_serializing_if = "Option::is_none")]
    pub condition_outside_rth: Option<i32>,
    /// Returns all conditions
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<models::AlertCondition>>,
}

impl AlertDetails {
    /// details of the specified alert
    pub fn new() -> AlertDetails {
        AlertDetails {
            account: None,
            order_id: None,
            alert_name: None,
            tif: None,
            expire_time: None,
            alert_active: None,
            alert_repeatable: None,
            alert_email: None,
            alert_send_message: None,
            alert_message: None,
            alert_show_popup: None,
            alert_play_audio: None,
            order_status: None,
            alert_triggered: None,
            fg_color: None,
            bg_color: None,
            order_not_editable: None,
            itws_orders_only: None,
            alert_mta_currency: None,
            alert_mta_defaults: None,
            tool_id: None,
            time_zone: None,
            alert_default_type: None,
            condition_size: None,
            condition_outside_rth: None,
            conditions: None,
        }
    }
}
/// represent order statusAlways returns “Presubmitted”.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderStatus {
    #[serde(rename = "Presubmitted")]
    Presubmitted,
    #[serde(rename = "Submitted")]
    Submitted,
}

impl Default for OrderStatus {
    fn default() -> OrderStatus {
        Self::Presubmitted
    }
}
