/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetStatementsResponseData {
    /// the data type of the value after decoding
    #[serde(rename = "dataType", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    /// encoding used for the value
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Base 64 encoded String of byte[]. Byte[] represents compressed data when gzip is true
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// mimeType of document after decoding and serializing the value
    #[serde(rename = "mimeType", skip_serializing_if = "Option::is_none")]
    pub mime_type: Option<String>,
    /// content encoding flag. Represents whether the response is compressed
    #[serde(rename = "gzip", skip_serializing_if = "Option::is_none")]
    pub gzip: Option<bool>,
    /// specify response media types that are acceptable
    #[serde(rename = "accept", skip_serializing_if = "Option::is_none")]
    pub accept: Option<String>,
}

impl GetStatementsResponseData {
    pub fn new() -> GetStatementsResponseData {
        GetStatementsResponseData {
            data_type: None,
            encoding: None,
            value: None,
            mime_type: None,
            gzip: None,
            accept: None,
        }
    }
}
