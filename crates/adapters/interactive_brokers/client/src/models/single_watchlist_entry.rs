/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// SingleWatchlistEntry : Object containing watchlist entry for a single instrument.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleWatchlistEntry {
    /// All-capital, shorthand security type identifier of the instrument.
    #[serde(rename = "ST", skip_serializing_if = "Option::is_none")]
    pub st: Option<St>,
    /// Instrument conid as a string.
    #[serde(rename = "C", skip_serializing_if = "Option::is_none")]
    pub c: Option<String>,
    /// IB contract ID of the instrument.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<i32>,
    /// Complete display name of the instrument.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Full display presentation of the instrument symbol.
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// All-capital, shorthand security type identifier of the instrument.
    #[serde(rename = "assetClass", skip_serializing_if = "Option::is_none")]
    pub asset_class: Option<AssetClass>,
    /// Symbol of the instrument.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Rendering of the instrument name in Chinese.
    #[serde(rename = "chineseName", skip_serializing_if = "Option::is_none")]
    pub chinese_name: Option<String>,
}

impl SingleWatchlistEntry {
    /// Object containing watchlist entry for a single instrument.
    pub fn new() -> SingleWatchlistEntry {
        SingleWatchlistEntry {
            st: None,
            c: None,
            conid: None,
            name: None,
            full_name: None,
            asset_class: None,
            ticker: None,
            chinese_name: None,
        }
    }
}
/// All-capital, shorthand security type identifier of the instrument.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum St {
    #[serde(rename = "STK")]
    Stk,
    #[serde(rename = "OPT")]
    Opt,
    #[serde(rename = "FUT")]
    Fut,
    #[serde(rename = "BOND")]
    Bond,
    #[serde(rename = "FUND")]
    Fund,
    #[serde(rename = "WAR")]
    War,
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "CRYPTO")]
    Crypto,
}

impl Default for St {
    fn default() -> St {
        Self::Stk
    }
}
/// All-capital, shorthand security type identifier of the instrument.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AssetClass {
    #[serde(rename = "STK")]
    Stk,
    #[serde(rename = "OPT")]
    Opt,
    #[serde(rename = "FUT")]
    Fut,
    #[serde(rename = "BOND")]
    Bond,
    #[serde(rename = "FUND")]
    Fund,
    #[serde(rename = "WAR")]
    War,
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "CRYPTO")]
    Crypto,
}

impl Default for AssetClass {
    fn default() -> AssetClass {
        Self::Stk
    }
}
