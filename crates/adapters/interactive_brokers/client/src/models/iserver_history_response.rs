/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// IserverHistoryResponse : Object containing the requested historical data and related metadata.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IserverHistoryResponse {
    /// Internal use. Identifier of the request.
    #[serde(rename = "serverId", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<String>,
    /// Symbol of the request instrument.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Description or company name of the instrument.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Internal use. Used to scale Client Portal chart Y-axis.
    #[serde(rename = "priceFactor", skip_serializing_if = "Option::is_none")]
    pub price_factor: Option<i32>,
    /// UTC date and time of the start (chronologically earlier) of the complete period in format YYYYMMDD-hh:mm:ss.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Internal use. Delivers highest price value in total interval. Used for chart scaling. A string constructed as 'highestPrice*priceFactor/totalVolume*volumeFactor/minutesFromStartTime'.
    #[serde(rename = "high", skip_serializing_if = "Option::is_none")]
    pub high: Option<String>,
    /// Internal use. Delivers lowest price value in total interval. Used for chart scaling. A string constructed as 'lowestPrice*priceFactor/totalVolume*volumeFactor/minutesFromStartTime'.
    #[serde(rename = "low", skip_serializing_if = "Option::is_none")]
    pub low: Option<String>,
    /// The client-specified period value.
    #[serde(rename = "timePeriod", skip_serializing_if = "Option::is_none")]
    pub time_period: Option<String>,
    /// The client-specified bar width, represented in seconds.
    #[serde(rename = "barLength", skip_serializing_if = "Option::is_none")]
    pub bar_length: Option<i32>,
    /// A three-character string reflecting the nature of available data. R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. P = Snapshot, p = Consolidated. B = Top of book.
    #[serde(rename = "mdAvailability", skip_serializing_if = "Option::is_none")]
    pub md_availability: Option<String>,
    /// Indicates whether data from outside regular trading hours is included in the response.
    #[serde(rename = "outsideRth", skip_serializing_if = "Option::is_none")]
    pub outside_rth: Option<bool>,
    /// Length of instrument's trading day in seconds.
    #[serde(rename = "tradingDayDuration", skip_serializing_if = "Option::is_none")]
    pub trading_day_duration: Option<i32>,
    /// Internal use. Used to scale volume histograms.
    #[serde(rename = "volumeFactor", skip_serializing_if = "Option::is_none")]
    pub volume_factor: Option<i32>,
    /// Internal use. Governs application of pricing display rule.
    #[serde(rename = "priceDisplayRule", skip_serializing_if = "Option::is_none")]
    pub price_display_rule: Option<i32>,
    /// Internal use. Governs rendering of displayed pricing.
    #[serde(rename = "priceDisplayValue", skip_serializing_if = "Option::is_none")]
    pub price_display_value: Option<String>,
    /// Internal use. UTC datetime string used to center Client Portal charts. Format YYYYMMDD-hh:mm:ss.
    #[serde(rename = "chartPanStartTime", skip_serializing_if = "Option::is_none")]
    pub chart_pan_start_time: Option<String>,
    /// Indicates how the period is applied in relation to the startTime. Value will always be -1, indicating that the period extends from the startTime forward into the future.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<i32>,
    /// Indicates whether instrument is capable of negative pricing.
    #[serde(rename = "negativeCapable", skip_serializing_if = "Option::is_none")]
    pub negative_capable: Option<bool>,
    /// Internal use. Reflects the version of the response schema used.
    #[serde(rename = "messageVersion", skip_serializing_if = "Option::is_none")]
    pub message_version: Option<i32>,
    /// Internal time in flight to serve the request.
    #[serde(rename = "travelTime", skip_serializing_if = "Option::is_none")]
    pub travel_time: Option<i32>,
    /// Array containing OHLC bars for the requested period.
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<models::SingleHistoricalBar>>,
    /// Count of the number of bars returned in the data array.
    #[serde(rename = "points", skip_serializing_if = "Option::is_none")]
    pub points: Option<i32>,
    /// Number of milliseconds taken to satisfy this historical data request.
    #[serde(rename = "mktDataDelay", skip_serializing_if = "Option::is_none")]
    pub mkt_data_delay: Option<i32>,
}

impl IserverHistoryResponse {
    /// Object containing the requested historical data and related metadata.
    pub fn new() -> IserverHistoryResponse {
        IserverHistoryResponse {
            server_id: None,
            symbol: None,
            text: None,
            price_factor: None,
            start_time: None,
            high: None,
            low: None,
            time_period: None,
            bar_length: None,
            md_availability: None,
            outside_rth: None,
            trading_day_duration: None,
            volume_factor: None,
            price_display_rule: None,
            price_display_value: None,
            chart_pan_start_time: None,
            direction: None,
            negative_capable: None,
            message_version: None,
            travel_time: None,
            data: None,
            points: None,
            mkt_data_delay: None,
        }
    }
}
