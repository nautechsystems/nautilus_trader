/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// Typecodes : Many FYI endpoints reference a “typecode” value. The table below lists the available codes and what they correspond to.   * `BA` - Borrow Availability   * `CA` - Comparable Algo   * `DA` - Dividends Advisory   * `EA` - Upcoming Earnings   * `MF` - Mutual Fund Advisory   * `OE` - Option Expiration   * `PR` - Portfolio Builder Rebalance   * `SE` - Suspend Order on Economic Event   * `SG` - Short Term Gain turning Long Term   * `SM` - System Messages   * `T2` - Assignment Realizing Long-Term Gains   * `TO` - Takeover   * `UA` - User Alert   * `M8` - M871 Trades   * `PS` - Platform Use Suggestions   * `DL` - Unexercised Option Loss Prevention Reminder   * `PT` - Position Transfer   * `CB` - Missing Cost Basis   * `MS` - Milestones   * `TD` - MiFID || 10% Deprecation Notice   * `ST` - Save Taxes   * `TI` - Trade Idea   * `CT` - Cash Transfer
/// Many FYI endpoints reference a “typecode” value. The table below lists the available codes and what they correspond to.   * `BA` - Borrow Availability   * `CA` - Comparable Algo   * `DA` - Dividends Advisory   * `EA` - Upcoming Earnings   * `MF` - Mutual Fund Advisory   * `OE` - Option Expiration   * `PR` - Portfolio Builder Rebalance   * `SE` - Suspend Order on Economic Event   * `SG` - Short Term Gain turning Long Term   * `SM` - System Messages   * `T2` - Assignment Realizing Long-Term Gains   * `TO` - Takeover   * `UA` - User Alert   * `M8` - M871 Trades   * `PS` - Platform Use Suggestions   * `DL` - Unexercised Option Loss Prevention Reminder   * `PT` - Position Transfer   * `CB` - Missing Cost Basis   * `MS` - Milestones   * `TD` - MiFID || 10% Deprecation Notice   * `ST` - Save Taxes   * `TI` - Trade Idea   * `CT` - Cash Transfer
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Typecodes {
    #[serde(rename = "BA")]
    Ba,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "DA")]
    Da,
    #[serde(rename = "EA")]
    Ea,
    #[serde(rename = "MF")]
    Mf,
    #[serde(rename = "OE")]
    Oe,
    #[serde(rename = "PR")]
    Pr,
    #[serde(rename = "SE")]
    Se,
    #[serde(rename = "SG")]
    Sg,
    #[serde(rename = "SM")]
    Sm,
    #[serde(rename = "T2")]
    T2,
    #[serde(rename = "TO")]
    To,
    #[serde(rename = "UA")]
    Ua,
    #[serde(rename = "M8")]
    M8,
    #[serde(rename = "PS")]
    Ps,
    #[serde(rename = "DL")]
    Dl,
    #[serde(rename = "PT")]
    Pt,
    #[serde(rename = "CB")]
    Cb,
    #[serde(rename = "MS")]
    Ms,
    #[serde(rename = "TD")]
    Td,
    #[serde(rename = "ST")]
    St,
    #[serde(rename = "TI")]
    Ti,
    #[serde(rename = "CT")]
    Ct,
}

impl std::fmt::Display for Typecodes {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ba => write!(f, "BA"),
            Self::Ca => write!(f, "CA"),
            Self::Da => write!(f, "DA"),
            Self::Ea => write!(f, "EA"),
            Self::Mf => write!(f, "MF"),
            Self::Oe => write!(f, "OE"),
            Self::Pr => write!(f, "PR"),
            Self::Se => write!(f, "SE"),
            Self::Sg => write!(f, "SG"),
            Self::Sm => write!(f, "SM"),
            Self::T2 => write!(f, "T2"),
            Self::To => write!(f, "TO"),
            Self::Ua => write!(f, "UA"),
            Self::M8 => write!(f, "M8"),
            Self::Ps => write!(f, "PS"),
            Self::Dl => write!(f, "DL"),
            Self::Pt => write!(f, "PT"),
            Self::Cb => write!(f, "CB"),
            Self::Ms => write!(f, "MS"),
            Self::Td => write!(f, "TD"),
            Self::St => write!(f, "ST"),
            Self::Ti => write!(f, "TI"),
            Self::Ct => write!(f, "CT"),
        }
    }
}

impl Default for Typecodes {
    fn default() -> Typecodes {
        Self::Ba
    }
}
