/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecurringTransaction {
    #[serde(rename = "achInstruction", skip_serializing_if = "Option::is_none")]
    pub ach_instruction: Option<Box<models::AchInstruction>>,
    #[serde(
        rename = "iraWithdrawalDetails",
        skip_serializing_if = "Option::is_none"
    )]
    pub ira_withdrawal_details: Option<Box<models::IraWithdrawalDetails>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<Method>,
    #[serde(rename = "instruction", skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Frequency>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Currency>,
    #[serde(rename = "ibAccount", skip_serializing_if = "Option::is_none")]
    pub ib_account: Option<String>,
}

impl RecurringTransaction {
    pub fn new() -> RecurringTransaction {
        RecurringTransaction {
            ach_instruction: None,
            ira_withdrawal_details: None,
            r#type: None,
            method: None,
            instruction: None,
            frequency: None,
            start_date: None,
            end_date: None,
            name: None,
            amount: None,
            currency: None,
            ib_account: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DEPOSIT")]
    Deposit,
    #[serde(rename = "WITHDRAWAL")]
    Withdrawal,
}

impl Default for Type {
    fn default() -> Type {
        Self::Deposit
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "CHECK")]
    Check,
    #[serde(rename = "WIRE")]
    Wire,
    #[serde(rename = "ACH")]
    Ach,
    #[serde(rename = "SKIP_DEPOSIT")]
    SkipDeposit,
}

impl Default for Method {
    fn default() -> Method {
        Self::Check
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Frequency {
    #[serde(rename = "MONTHLY")]
    Monthly,
    #[serde(rename = "QUARTERLY")]
    Quarterly,
    #[serde(rename = "YEARLY")]
    Yearly,
}

impl Default for Frequency {
    fn default() -> Frequency {
        Self::Monthly
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "USD")]
    Usd,
    #[serde(rename = "EUR")]
    Eur,
    #[serde(rename = "GBP")]
    Gbp,
    #[serde(rename = "CAD")]
    Cad,
    #[serde(rename = "JPY")]
    Jpy,
    #[serde(rename = "HKD")]
    Hkd,
    #[serde(rename = "AUD")]
    Aud,
    #[serde(rename = "CHF")]
    Chf,
    #[serde(rename = "MXN")]
    Mxn,
    #[serde(rename = "SEK")]
    Sek,
    #[serde(rename = "NZD")]
    Nzd,
    #[serde(rename = "HUF")]
    Huf,
    #[serde(rename = "CZK")]
    Czk,
    #[serde(rename = "CNH")]
    Cnh,
    #[serde(rename = "DKK")]
    Dkk,
    #[serde(rename = "RUB")]
    Rub,
    #[serde(rename = "ILS")]
    Ils,
    #[serde(rename = "NOK")]
    Nok,
    #[serde(rename = "SGD")]
    Sgd,
    #[serde(rename = "PLN")]
    Pln,
    #[serde(rename = "ZAR")]
    Zar,
    #[serde(rename = "AED")]
    Aed,
    #[serde(rename = "KRW")]
    Krw,
    #[serde(rename = "SAR")]
    Sar,
    #[serde(rename = "TRY")]
    Try,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Usd
    }
}
