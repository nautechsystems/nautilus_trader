/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Presets {
    /// Determines if allocation groups should prioritize closing positions over equal distribution.
    #[serde(rename = "group_auto_close_positions", skip_serializing_if = "Option::is_none")]
    pub group_auto_close_positions: Option<bool>,
    /// Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * `A` - Available Equity   * `E` - Equal   * `N` - Net Liquidation Value  User-specified allocation methods:   * `C` - Cash Quantity   * `P` - Percentage   * `R` - Ratios   * `S` - Shares
    #[serde(rename = "default_method_for_all", skip_serializing_if = "Option::is_none")]
    pub default_method_for_all: Option<DefaultMethodForAll>,
    /// Determines if allocation profiles should prioritize closing positions over equal distribution.
    #[serde(rename = "profiles_auto_close_positions", skip_serializing_if = "Option::is_none")]
    pub profiles_auto_close_positions: Option<bool>,
    /// Determines if the system should always check user credit before beginning the order process every time, or only at the time of order placement and execution.
    #[serde(rename = "strict_credit_check", skip_serializing_if = "Option::is_none")]
    pub strict_credit_check: Option<bool>,
    /// Determines if the system should keep allocation groups proportional for scaling.
    #[serde(rename = "group_proportional_allocation", skip_serializing_if = "Option::is_none")]
    pub group_proportional_allocation: Option<bool>,
}

impl Presets {
    pub fn new() -> Presets {
        Presets {
            group_auto_close_positions: None,
            default_method_for_all: None,
            profiles_auto_close_positions: None,
            strict_credit_check: None,
            group_proportional_allocation: None,
        }
    }
}
/// Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * `A` - Available Equity   * `E` - Equal   * `N` - Net Liquidation Value  User-specified allocation methods:   * `C` - Cash Quantity   * `P` - Percentage   * `R` - Ratios   * `S` - Shares
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultMethodForAll {
    #[serde(rename = "AvailableEquity")]
    AvailableEquity,
    #[serde(rename = "E")]
    E,
    #[serde(rename = "N")]
    N,
    #[serde(rename = "C")]
    C,
    #[serde(rename = "P")]
    P,
    #[serde(rename = "R")]
    R,
    #[serde(rename = "S")]
    S,
}

impl Default for DefaultMethodForAll {
    fn default() -> DefaultMethodForAll {
        Self::AvailableEquity
    }
}
