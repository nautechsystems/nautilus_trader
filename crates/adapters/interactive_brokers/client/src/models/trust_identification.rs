/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrustIdentification {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<models::Address>>,
    #[serde(rename = "mailingAddress", skip_serializing_if = "Option::is_none")]
    pub mailing_address: Option<Box<models::Address>>,
    #[serde(rename = "phones", skip_serializing_if = "Option::is_none")]
    pub phones: Option<Vec<models::PhoneInfo>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "typeOfTrust", skip_serializing_if = "Option::is_none")]
    pub type_of_trust: Option<TypeOfTrust>,
    #[serde(rename = "purposeOfTrust", skip_serializing_if = "Option::is_none")]
    pub purpose_of_trust: Option<String>,
    #[serde(rename = "dateFormed", skip_serializing_if = "Option::is_none")]
    pub date_formed: Option<String>,
    #[serde(rename = "formationCountry", skip_serializing_if = "Option::is_none")]
    pub formation_country: Option<String>,
    #[serde(rename = "formationState", skip_serializing_if = "Option::is_none")]
    pub formation_state: Option<String>,
    #[serde(rename = "registrationNumber", skip_serializing_if = "Option::is_none")]
    pub registration_number: Option<String>,
    #[serde(rename = "registrationType", skip_serializing_if = "Option::is_none")]
    pub registration_type: Option<RegistrationType>,
    #[serde(rename = "registrationCountry", skip_serializing_if = "Option::is_none")]
    pub registration_country: Option<String>,
    #[serde(rename = "sameMailAddress", skip_serializing_if = "Option::is_none")]
    pub same_mail_address: Option<bool>,
    #[serde(rename = "translated", skip_serializing_if = "Option::is_none")]
    pub translated: Option<bool>,
}

impl TrustIdentification {
    pub fn new() -> TrustIdentification {
        TrustIdentification {
            address: None,
            mailing_address: None,
            phones: None,
            name: None,
            description: None,
            type_of_trust: None,
            purpose_of_trust: None,
            date_formed: None,
            formation_country: None,
            formation_state: None,
            registration_number: None,
            registration_type: None,
            registration_country: None,
            same_mail_address: None,
            translated: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeOfTrust {
    #[serde(rename = "IRREVOC")]
    Irrevoc,
    #[serde(rename = "SMSF")]
    Smsf,
    #[serde(rename = "REVOCABLE")]
    Revocable,
    #[serde(rename = "TESTAMENTARY")]
    Testamentary,
    #[serde(rename = "RETIREMENT")]
    Retirement,
    #[serde(rename = "ERISA")]
    Erisa,
    #[serde(rename = "OTHER")]
    Other,
}

impl Default for TypeOfTrust {
    fn default() -> TypeOfTrust {
        Self::Irrevoc
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RegistrationType {
    #[serde(rename = "SSN")]
    Ssn,
    #[serde(rename = "EIN")]
    Ein,
    #[serde(rename = "NonUS_NationalId")]
    NonUsNationalId,
}

impl Default for RegistrationType {
    fn default() -> RegistrationType {
        Self::Ssn
    }
}
