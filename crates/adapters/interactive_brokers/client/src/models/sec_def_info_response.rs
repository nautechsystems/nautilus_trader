/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecDefInfoResponse {
    /// Contract Identifier of the given contract.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<i32>,
    /// Ticker symbol for the given contract
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Security type for the given contract.
    #[serde(rename = "secType", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    /// Primary listing exchange for the given contract.
    #[serde(rename = "listingExchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// Exchange requesting data for.
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Name of the company for the given contract.
    #[serde(rename = "companyName", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// Traded currency allowed for the given contract.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    /// Series of all valid exchanges the contract can be traded on in a single comma-separated string.
    #[serde(rename = "validExchanges", skip_serializing_if = "Option::is_none")]
    pub valid_exchanges: Option<String>,
    #[serde(rename = "priceRendering", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price_rendering: Option<Option<serde_json::Value>>,
    /// Date of expiration for the given contract.
    #[serde(rename = "maturityDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maturity_date: Option<Option<String>>,
    /// Set the right for the given contract. * `C` - for Call options. * `P` - for Put options.
    #[serde(rename = "right", skip_serializing_if = "Option::is_none")]
    pub right: Option<Right>,
    /// Returns the given strike value for the given contract.
    #[serde(rename = "strike", skip_serializing_if = "Option::is_none")]
    pub strike: Option<f64>,
}

impl SecDefInfoResponse {
    pub fn new() -> SecDefInfoResponse {
        SecDefInfoResponse {
            conid: None,
            ticker: None,
            sec_type: None,
            listing_exchange: None,
            exchange: None,
            company_name: None,
            currency: None,
            valid_exchanges: None,
            price_rendering: None,
            maturity_date: None,
            right: None,
            strike: None,
        }
    }
}
/// Set the right for the given contract. * `C` - for Call options. * `P` - for Put options.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Right {
    #[serde(rename = "P")]
    P,
    #[serde(rename = "C")]
    C,
}

impl Default for Right {
    fn default() -> Right {
        Self::P
    }
}
