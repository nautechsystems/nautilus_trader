/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JointApplicant {
    #[serde(rename = "firstHolderDetails", skip_serializing_if = "Option::is_none")]
    pub first_holder_details: Option<Vec<models::AssociatedIndividual>>,
    #[serde(
        rename = "secondHolderDetails",
        skip_serializing_if = "Option::is_none"
    )]
    pub second_holder_details: Option<Vec<models::AssociatedIndividual>>,
    #[serde(
        rename = "financialInformation",
        skip_serializing_if = "Option::is_none"
    )]
    pub financial_information: Option<Vec<models::FinancialInformation>>,
    #[serde(
        rename = "regulatoryInformation",
        skip_serializing_if = "Option::is_none"
    )]
    pub regulatory_information: Option<Vec<models::RegulatoryInformation>>,
    #[serde(
        rename = "regulatedMemberships",
        skip_serializing_if = "Option::is_none"
    )]
    pub regulated_memberships: Option<Vec<models::RegulatedMembership>>,
    #[serde(
        rename = "accreditedInvestorInformation",
        skip_serializing_if = "Option::is_none"
    )]
    pub accredited_investor_information: Option<Box<models::AccreditedInvestorInformation>>,
    #[serde(rename = "taxInformation", skip_serializing_if = "Option::is_none")]
    pub tax_information: Option<Box<models::IndividualTaxInformation>>,
    #[serde(
        rename = "withholdingStatement",
        skip_serializing_if = "Option::is_none"
    )]
    pub withholding_statement: Option<Box<models::WithholdingStatementType>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl JointApplicant {
    pub fn new() -> JointApplicant {
        JointApplicant {
            first_holder_details: None,
            second_holder_details: None,
            financial_information: None,
            regulatory_information: None,
            regulated_memberships: None,
            accredited_investor_information: None,
            tax_information: None,
            withholding_statement: None,
            r#type: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "community")]
    Community,
    #[serde(rename = "joint_tenants")]
    JointTenants,
    #[serde(rename = "tenants_common")]
    TenantsCommon,
    #[serde(rename = "tbe")]
    Tbe,
    #[serde(rename = "au_joint_account")]
    AuJointAccount,
}

impl Default for Type {
    fn default() -> Type {
        Self::Community
    }
}
