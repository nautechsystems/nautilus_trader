/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutomatedWrapFeeDetailsType {
    #[serde(rename = "perTradeMarkups", skip_serializing_if = "Option::is_none")]
    pub per_trade_markups: Option<Box<models::CommissionScheduleType>>,
    #[serde(
        rename = "annualBlendedPercentages",
        skip_serializing_if = "Option::is_none"
    )]
    pub annual_blended_percentages: Option<Vec<models::AnnualBlendedPercentage>>,
    #[serde(rename = "navRanges", skip_serializing_if = "Option::is_none")]
    pub nav_ranges: Option<Vec<models::NavRangeType>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "maxFee", skip_serializing_if = "Option::is_none")]
    pub max_fee: Option<f64>,
    #[serde(rename = "numContracts", skip_serializing_if = "Option::is_none")]
    pub num_contracts: Option<i32>,
    #[serde(rename = "postFrequency", skip_serializing_if = "Option::is_none")]
    pub post_frequency: Option<String>,
    #[serde(rename = "percentOfNLVCap", skip_serializing_if = "Option::is_none")]
    pub percent_of_nlv_cap: Option<String>,
    #[serde(rename = "percentOfNLVCapQ", skip_serializing_if = "Option::is_none")]
    pub percent_of_nlv_cap_q: Option<String>,
}

impl AutomatedWrapFeeDetailsType {
    pub fn new() -> AutomatedWrapFeeDetailsType {
        AutomatedWrapFeeDetailsType {
            per_trade_markups: None,
            annual_blended_percentages: None,
            nav_ranges: None,
            r#type: None,
            max_fee: None,
            num_contracts: None,
            post_frequency: None,
            percent_of_nlv_cap: None,
            percent_of_nlv_cap_q: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ANNUALFLATFEE")]
    Annualflatfee,
    #[serde(rename = "ANNUALFLATFEE_MONTHLY")]
    AnnualflatfeeMonthly,
    #[serde(rename = "ANNUALFLATFEE_QUATERLY")]
    AnnualflatfeeQuaterly,
    #[serde(rename = "PERCENTOFEQUITY")]
    Percentofequity,
    #[serde(rename = "PERCENTOFEQUITY_MONTHLY")]
    PercentofequityMonthly,
    #[serde(rename = "PERCENTOFEQUITY_QUATERLY")]
    PercentofequityQuaterly,
    #[serde(rename = "PERCENTOFEQUITY_QUARTERLY")]
    PercentofequityQuarterly,
    #[serde(rename = "BLENDEDPERCENTOFEQUITY")]
    Blendedpercentofequity,
    #[serde(rename = "BLENDEDPERCENTOFEQUITY_MONTHLY")]
    BlendedpercentofequityMonthly,
    #[serde(rename = "BLENDEDPERCENTOFEQUITY_QUARTERLY")]
    BlendedpercentofequityQuarterly,
    #[serde(rename = "PERCENTOFPROFIT")]
    Percentofprofit,
    #[serde(rename = "PERCENTOFPROFIT_QUARTER")]
    PercentofprofitQuarter,
    #[serde(rename = "INVOICE_LIMIT")]
    InvoiceLimit,
    #[serde(rename = "INVOICE_LIMIT_Q")]
    InvoiceLimitQ,
    #[serde(rename = "PERTRADE")]
    Pertrade,
}

impl Default for Type {
    fn default() -> Type {
        Self::Annualflatfee
    }
}
