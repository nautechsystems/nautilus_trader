/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PendingTask {
    #[serde(rename = "taskNumber", skip_serializing_if = "Option::is_none")]
    pub task_number: Option<i32>,
    #[serde(rename = "formNumber", skip_serializing_if = "Option::is_none")]
    pub form_number: Option<i32>,
    #[serde(rename = "formName", skip_serializing_if = "Option::is_none")]
    pub form_name: Option<String>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(rename = "externalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "documentRejectReason",
        skip_serializing_if = "Option::is_none"
    )]
    pub document_reject_reason: Option<Vec<String>>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "au10tixCreatedDate", skip_serializing_if = "Option::is_none")]
    pub au10tix_created_date: Option<String>,
    #[serde(rename = "au10tixExpiryDate", skip_serializing_if = "Option::is_none")]
    pub au10tix_expiry_date: Option<String>,
    #[serde(rename = "entityId", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<i32>,
    #[serde(rename = "onlineTask", skip_serializing_if = "Option::is_none")]
    pub online_task: Option<bool>,
    #[serde(
        rename = "requiredForApproval",
        skip_serializing_if = "Option::is_none"
    )]
    pub required_for_approval: Option<bool>,
    #[serde(rename = "requiredForTrading", skip_serializing_if = "Option::is_none")]
    pub required_for_trading: Option<bool>,
    #[serde(rename = "questionIds", skip_serializing_if = "Option::is_none")]
    pub question_ids: Option<Vec<i32>>,
}

impl PendingTask {
    pub fn new() -> PendingTask {
        PendingTask {
            task_number: None,
            form_number: None,
            form_name: None,
            action: None,
            external_id: None,
            state: None,
            document_reject_reason: None,
            url: None,
            start_date: None,
            au10tix_created_date: None,
            au10tix_expiry_date: None,
            entity_id: None,
            online_task: None,
            required_for_approval: None,
            required_for_trading: None,
            question_ids: None,
        }
    }
}
