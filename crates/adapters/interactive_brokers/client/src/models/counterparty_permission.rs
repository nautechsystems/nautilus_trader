/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterpartyPermission {
    #[serde(rename = "permission_name")]
    pub permission_name: String,
    #[serde(rename = "instruction_type_name", skip_serializing_if = "Option::is_none")]
    pub instruction_type_name: Option<String>,
    #[serde(rename = "permission_status", skip_serializing_if = "Option::is_none")]
    pub permission_status: Option<PermissionStatus>,
}

impl CounterpartyPermission {
    pub fn new(permission_name: String) -> CounterpartyPermission {
        CounterpartyPermission {
            permission_name,
            instruction_type_name: None,
            permission_status: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PermissionStatus {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "INACTIVE")]
    Inactive,
    #[serde(rename = "DISABLED")]
    Disabled,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for PermissionStatus {
    fn default() -> PermissionStatus {
        Self::Active
    }
}
