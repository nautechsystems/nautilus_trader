/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IraPrimaryBeneficiaryEntity {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<models::Address>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "externalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(rename = "ownershipPercentage", skip_serializing_if = "Option::is_none")]
    pub ownership_percentage: Option<f64>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<Box<models::Title>>,
    #[serde(rename = "relationship", skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Relationship>,
    #[serde(rename = "executor", skip_serializing_if = "Option::is_none")]
    pub executor: Option<Box<models::Individual>>,
    #[serde(rename = "executionDate", skip_serializing_if = "Option::is_none")]
    pub execution_date: Option<String>,
    #[serde(rename = "articleOfWill", skip_serializing_if = "Option::is_none")]
    pub article_of_will: Option<String>,
    #[serde(rename = "entityType", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<EntityType>,
    #[serde(rename = "charityNumber", skip_serializing_if = "Option::is_none")]
    pub charity_number: Option<String>,
}

impl IraPrimaryBeneficiaryEntity {
    pub fn new() -> IraPrimaryBeneficiaryEntity {
        IraPrimaryBeneficiaryEntity {
            name: None,
            address: None,
            id: None,
            external_id: None,
            ownership_percentage: None,
            title: None,
            relationship: None,
            executor: None,
            execution_date: None,
            article_of_will: None,
            entity_type: None,
            charity_number: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relationship {
    #[serde(rename = "Brother")]
    Brother,
    #[serde(rename = "Daughter")]
    Daughter,
    #[serde(rename = "Estate")]
    Estate,
    #[serde(rename = "Father")]
    Father,
    #[serde(rename = "Husband")]
    Husband,
    #[serde(rename = "Mother")]
    Mother,
    #[serde(rename = "Other")]
    Other,
    #[serde(rename = "Sister")]
    Sister,
    #[serde(rename = "Son")]
    Son,
    #[serde(rename = "Wife")]
    Wife,
    #[serde(rename = "Charity")]
    Charity,
    #[serde(rename = "Trust")]
    Trust,
    #[serde(rename = "Spouse")]
    Spouse,
    #[serde(rename = "Child")]
    Child,
    #[serde(rename = "Sibling")]
    Sibling,
    #[serde(rename = "Parent")]
    Parent,
    #[serde(rename = "Grandchild")]
    Grandchild,
    #[serde(rename = "Common Law Partner")]
    CommonLawPartner,
}

impl Default for Relationship {
    fn default() -> Relationship {
        Self::Brother
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityType {
    #[serde(rename = "Trust")]
    Trust,
    #[serde(rename = "Estate")]
    Estate,
    #[serde(rename = "Charity")]
    Charity,
}

impl Default for EntityType {
    fn default() -> EntityType {
        Self::Trust
    }
}
