/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AllocationMethod : Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * `A` - Available Equity   * `E` - Equal   * `N` - Net Liquidation Value  User-specified allocation methods:   * `C` - Cash Quantity   * `P` - Percentage   * `R` - Ratios   * `S` - Shares
/// Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified. IB-computed allocation methods:   * `A` - Available Equity   * `E` - Equal   * `N` - Net Liquidation Value  User-specified allocation methods:   * `C` - Cash Quantity   * `P` - Percentage   * `R` - Ratios   * `S` - Shares
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AllocationMethod {
    #[serde(rename = "A")]
    A,
    #[serde(rename = "E")]
    E,
    #[serde(rename = "N")]
    N,
    #[serde(rename = "C")]
    C,
    #[serde(rename = "P")]
    P,
    #[serde(rename = "R")]
    R,
    #[serde(rename = "S")]
    S,

}

impl std::fmt::Display for AllocationMethod {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::A => write!(f, "A"),
            Self::E => write!(f, "E"),
            Self::N => write!(f, "N"),
            Self::C => write!(f, "C"),
            Self::P => write!(f, "P"),
            Self::R => write!(f, "R"),
            Self::S => write!(f, "S"),
        }
    }
}

impl Default for AllocationMethod {
    fn default() -> AllocationMethod {
        Self::A
    }
}
