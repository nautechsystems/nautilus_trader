/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartialWarrantPosition {
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "numberOfShares", skip_serializing_if = "Option::is_none")]
    pub number_of_shares: Option<i64>,
    #[serde(rename = "all", skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Position>,
    #[serde(rename = "optionType", skip_serializing_if = "Option::is_none")]
    pub option_type: Option<OptionType>,
    #[serde(rename = "strikePrice", skip_serializing_if = "Option::is_none")]
    pub strike_price: Option<i64>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
}

impl PartialWarrantPosition {
    pub fn new() -> PartialWarrantPosition {
        PartialWarrantPosition {
            symbol: None,
            number_of_shares: None,
            all: None,
            position: None,
            option_type: None,
            strike_price: None,
            expiration_date: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Position {
    #[serde(rename = "LONG")]
    Long,
    #[serde(rename = "SHORT")]
    Short,
}

impl Default for Position {
    fn default() -> Position {
        Self::Long
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OptionType {
    #[serde(rename = "CALL")]
    Call,
    #[serde(rename = "PUT")]
    Put,
}

impl Default for OptionType {
    fn default() -> OptionType {
        Self::Call
    }
}
