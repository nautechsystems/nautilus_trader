/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IraBeneficiariesType {
    #[serde(
        rename = "primaryBeneficiaries",
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_beneficiaries: Option<Vec<models::IraPrimaryBeneficiary>>,
    #[serde(
        rename = "primaryBeneficiaryEntities",
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_beneficiary_entities: Option<Vec<models::IraPrimaryBeneficiaryEntity>>,
    #[serde(
        rename = "contingentBeneficiaries",
        skip_serializing_if = "Option::is_none"
    )]
    pub contingent_beneficiaries: Option<Vec<models::IraContingentBeneficiary>>,
    #[serde(
        rename = "contingentBeneficiaryEntities",
        skip_serializing_if = "Option::is_none"
    )]
    pub contingent_beneficiary_entities: Option<Vec<models::IraContingentBeneficiaryEntity>>,
    #[serde(
        rename = "spousePrimaryBeneficary",
        skip_serializing_if = "Option::is_none"
    )]
    pub spouse_primary_beneficary: Option<bool>,
    #[serde(rename = "successor", skip_serializing_if = "Option::is_none")]
    pub successor: Option<bool>,
}

impl IraBeneficiariesType {
    pub fn new() -> IraBeneficiariesType {
        IraBeneficiariesType {
            primary_beneficiaries: None,
            primary_beneficiary_entities: None,
            contingent_beneficiaries: None,
            contingent_beneficiary_entities: None,
            spouse_primary_beneficary: None,
            successor: None,
        }
    }
}
