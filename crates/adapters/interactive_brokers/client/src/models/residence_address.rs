/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ResidenceAddress : Provide the residential address where the applicant physically resides. <br><ul><li>If the mailing address is different from the address provided in Residence element, THEN you will also include MailingAddress element.</li><li>Post Office Box is not accepted for Residential Address.</li><li>Our system validates street_1 and street_2 included within Residence attribute to ensure Post Office Box address is not provided.</li><li>An error will be thrown if the below combinations are included within street_1 OR street_2:</li><ul><li>PB</li><li>PO Box</li><li>Post Office Box</li><li>P.O. Box</li><li>In care of</li><li>General Delivery</li><li>Regular Expression to validate street_1 and street_2:</li></ul></ul>English: (?:P(?:ost(?:al)?)?[\\.\\-\\s]*(?:(?:O(?:ffice)?[\\.\\s]*)?B(?:ox|in|\\b|\\d)|o(?:ffice|\\b)(?:[-\\s]*\\d)|code)|box[-\\s]*\\d)<br>Chinese Simplified: PO Box    (?i)\\b((邮政信箱) [0-9]*)\\bChinese Traditional: PO Box   (?i)\\b((郵政信箱) [0-9]*)\\b
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResidenceAddress {
    /// Street which applicant resides
    #[serde(rename = "street1", skip_serializing_if = "Option::is_none")]
    pub street1: Option<String>,
    /// Street which applicant resides
    #[serde(rename = "street2", skip_serializing_if = "Option::is_none")]
    pub street2: Option<String>,
    /// City which the applicant resides.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// State/Province which the applicant resides.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Country which the applicant resides.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Postal / Zip code.For countries that do not provide postal code, please enter 00000
    #[serde(rename = "postalCode", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<String>,
}

impl ResidenceAddress {
    /// Provide the residential address where the applicant physically resides. <br><ul><li>If the mailing address is different from the address provided in Residence element, THEN you will also include MailingAddress element.</li><li>Post Office Box is not accepted for Residential Address.</li><li>Our system validates street_1 and street_2 included within Residence attribute to ensure Post Office Box address is not provided.</li><li>An error will be thrown if the below combinations are included within street_1 OR street_2:</li><ul><li>PB</li><li>PO Box</li><li>Post Office Box</li><li>P.O. Box</li><li>In care of</li><li>General Delivery</li><li>Regular Expression to validate street_1 and street_2:</li></ul></ul>English: (?:P(?:ost(?:al)?)?[\\.\\-\\s]*(?:(?:O(?:ffice)?[\\.\\s]*)?B(?:ox|in|\\b|\\d)|o(?:ffice|\\b)(?:[-\\s]*\\d)|code)|box[-\\s]*\\d)<br>Chinese Simplified: PO Box    (?i)\\b((邮政信箱) [0-9]*)\\bChinese Traditional: PO Box   (?i)\\b((郵政信箱) [0-9]*)\\b
    pub fn new() -> ResidenceAddress {
        ResidenceAddress {
            street1: None,
            street2: None,
            city: None,
            state: None,
            country: None,
            postal_code: None,
        }
    }
}
