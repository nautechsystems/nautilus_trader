/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// TradesResponseInner : Object containing details of a single execution.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradesResponseInner {
    /// IB-assigned execution identifier.
    #[serde(rename = "execution_id", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// Symbol of the instrument involved in the execution.
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Indicates whether the order is supported by IB's Tax Optimization tool.
    #[serde(rename = "supports_tax_opt", skip_serializing_if = "Option::is_none")]
    pub supports_tax_opt: Option<SupportsTaxOpt>,
    /// Side of the execution.
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Human-readable description of the outcome of the execution.
    #[serde(rename = "order_description", skip_serializing_if = "Option::is_none")]
    pub order_description: Option<String>,
    /// UTC date and time of the execution in format YYYYMMDD-hh:mm:ss.
    #[serde(rename = "trade_time", skip_serializing_if = "Option::is_none")]
    pub trade_time: Option<String>,
    /// Unix timestamp of the execution time in milliseconds.
    #[serde(rename = "trade_time_r", skip_serializing_if = "Option::is_none")]
    pub trade_time_r: Option<i32>,
    /// The size of the execution in units of the instrument.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The price at which the execution occurred.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The client-provided customer order identifier. Specified via cOID during order submission in the Web API.
    #[serde(rename = "order_ref", skip_serializing_if = "Option::is_none")]
    pub order_ref: Option<String>,
    /// The IB username that originated the order ticket against which the execution occurred.
    #[serde(rename = "submitter", skip_serializing_if = "Option::is_none")]
    pub submitter: Option<String>,
    /// The exchange or other venue on which the execution occurred.
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Commissions incurred by the execution. May also include
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    /// net_amount
    #[serde(rename = "net_amount", skip_serializing_if = "Option::is_none")]
    pub net_amount: Option<f64>,
    /// The IB account ID of the account that received the execution.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
    /// The IB account ID of the account that received the execution.
    #[serde(rename = "accountCode", skip_serializing_if = "Option::is_none")]
    pub account_code: Option<String>,
    /// The IB account ID of the account that received the execution.
    #[serde(
        rename = "account_allocation_name",
        skip_serializing_if = "Option::is_none"
    )]
    pub account_allocation_name: Option<String>,
    /// Name of business associated with instrument, or otherwise description of instrument.
    #[serde(rename = "company_name", skip_serializing_if = "Option::is_none")]
    pub company_name: Option<String>,
    /// Human-readable description of the order's instrument.
    #[serde(
        rename = "contract_description_1",
        skip_serializing_if = "Option::is_none"
    )]
    pub contract_description_1: Option<String>,
    /// IB asset class identifier.
    #[serde(rename = "sec_type", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<SecType>,
    /// The primary exchange on which the instrument is listed.
    #[serde(rename = "listing_exchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// Contract ID of the order's instrument.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<String>,
    /// Contract ID and routing destination in format 123456@EXCHANGE.
    #[serde(rename = "conidEx", skip_serializing_if = "Option::is_none")]
    pub conid_ex: Option<String>,
    /// Identifier of the firm clearing the trade. Value is \"IB\" if account is cleared by Interactive Brokers.
    #[serde(rename = "clearing_id", skip_serializing_if = "Option::is_none")]
    pub clearing_id: Option<String>,
    /// Name of the firm clearing the trade. Value is \"IB\" if account is cleared by Interactive Brokers.
    #[serde(rename = "clearing_name", skip_serializing_if = "Option::is_none")]
    pub clearing_name: Option<String>,
    /// Indicates whether the trade is the result of a liquidiation by IB.
    #[serde(rename = "liquidation_trade", skip_serializing_if = "Option::is_none")]
    pub liquidation_trade: Option<LiquidationTrade>,
    /// Indicates whether the order ticket is an Event Trading order.
    #[serde(rename = "is_event_trading", skip_serializing_if = "Option::is_none")]
    pub is_event_trading: Option<IsEventTrading>,
}

impl TradesResponseInner {
    /// Object containing details of a single execution.
    pub fn new() -> TradesResponseInner {
        TradesResponseInner {
            execution_id: None,
            symbol: None,
            supports_tax_opt: None,
            side: None,
            order_description: None,
            trade_time: None,
            trade_time_r: None,
            size: None,
            price: None,
            order_ref: None,
            submitter: None,
            exchange: None,
            commission: None,
            net_amount: None,
            account: None,
            account_code: None,
            account_allocation_name: None,
            company_name: None,
            contract_description_1: None,
            sec_type: None,
            listing_exchange: None,
            conid: None,
            conid_ex: None,
            clearing_id: None,
            clearing_name: None,
            liquidation_trade: None,
            is_event_trading: None,
        }
    }
}
/// Indicates whether the order is supported by IB's Tax Optimization tool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SupportsTaxOpt {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for SupportsTaxOpt {
    fn default() -> SupportsTaxOpt {
        Self::Variant0
    }
}
/// Side of the execution.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "B")]
    B,
    #[serde(rename = "S")]
    S,
}

impl Default for Side {
    fn default() -> Side {
        Self::B
    }
}
/// IB asset class identifier.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecType {
    #[serde(rename = "STK")]
    Stk,
    #[serde(rename = "OPT")]
    Opt,
    #[serde(rename = "FUT")]
    Fut,
    #[serde(rename = "FOP")]
    Fop,
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "CRYPTO")]
    Crypto,
    #[serde(rename = "BOND")]
    Bond,
    #[serde(rename = "WAR")]
    War,
    #[serde(rename = "FUND")]
    Fund,
}

impl Default for SecType {
    fn default() -> SecType {
        Self::Stk
    }
}
/// Indicates whether the trade is the result of a liquidiation by IB.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LiquidationTrade {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for LiquidationTrade {
    fn default() -> LiquidationTrade {
        Self::Variant0
    }
}
/// Indicates whether the order ticket is an Event Trading order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsEventTrading {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for IsEventTrading {
    fn default() -> IsEventTrading {
        Self::Variant0
    }
}
