/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountData {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "masterAccountId", skip_serializing_if = "Option::is_none")]
    pub master_account_id: Option<String>,
    #[serde(rename = "mainAccount", skip_serializing_if = "Option::is_none")]
    pub main_account: Option<String>,
    #[serde(rename = "sourceAccountId", skip_serializing_if = "Option::is_none")]
    pub source_account_id: Option<String>,
    #[serde(rename = "primaryUser", skip_serializing_if = "Option::is_none")]
    pub primary_user: Option<String>,
    #[serde(rename = "clearingStatus", skip_serializing_if = "Option::is_none")]
    pub clearing_status: Option<String>,
    #[serde(rename = "clearingStatusDescription", skip_serializing_if = "Option::is_none")]
    pub clearing_status_description: Option<String>,
    #[serde(rename = "stateCode", skip_serializing_if = "Option::is_none")]
    pub state_code: Option<String>,
    #[serde(rename = "baseCurrency", skip_serializing_if = "Option::is_none")]
    pub base_currency: Option<String>,
    #[serde(rename = "dateBegun", skip_serializing_if = "Option::is_none")]
    pub date_begun: Option<String>,
    #[serde(rename = "dateApproved", skip_serializing_if = "Option::is_none")]
    pub date_approved: Option<String>,
    #[serde(rename = "dateOpened", skip_serializing_if = "Option::is_none")]
    pub date_opened: Option<String>,
    #[serde(rename = "dateFunded", skip_serializing_if = "Option::is_none")]
    pub date_funded: Option<String>,
    #[serde(rename = "dateClosed", skip_serializing_if = "Option::is_none")]
    pub date_closed: Option<String>,
    #[serde(rename = "dateLinked", skip_serializing_if = "Option::is_none")]
    pub date_linked: Option<String>,
    #[serde(rename = "dateDelinked", skip_serializing_if = "Option::is_none")]
    pub date_delinked: Option<String>,
    #[serde(rename = "accountTitle", skip_serializing_if = "Option::is_none")]
    pub account_title: Option<String>,
    #[serde(rename = "officialTitle", skip_serializing_if = "Option::is_none")]
    pub official_title: Option<String>,
    #[serde(rename = "accountAlias", skip_serializing_if = "Option::is_none")]
    pub account_alias: Option<String>,
    #[serde(rename = "emailAddress", skip_serializing_if = "Option::is_none")]
    pub email_address: Option<String>,
    #[serde(rename = "margin", skip_serializing_if = "Option::is_none")]
    pub margin: Option<String>,
    #[serde(rename = "applicantType", skip_serializing_if = "Option::is_none")]
    pub applicant_type: Option<String>,
    #[serde(rename = "subType", skip_serializing_if = "Option::is_none")]
    pub sub_type: Option<String>,
    #[serde(rename = "stockYieldProgram", skip_serializing_if = "Option::is_none")]
    pub stock_yield_program: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "feeTemplate", skip_serializing_if = "Option::is_none")]
    pub fee_template: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "capabilities", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<std::collections::HashMap<String, Vec<String>>>,
    #[serde(rename = "limitedOptionTrading", skip_serializing_if = "Option::is_none")]
    pub limited_option_trading: Option<String>,
    #[serde(rename = "investmentObjectives", skip_serializing_if = "Option::is_none")]
    pub investment_objectives: Option<Vec<String>>,
    #[serde(rename = "externalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(rename = "mifidCategory", skip_serializing_if = "Option::is_none")]
    pub mifid_category: Option<String>,
    #[serde(rename = "mifirStatus", skip_serializing_if = "Option::is_none")]
    pub mifir_status: Option<String>,
    #[serde(rename = "equity", skip_serializing_if = "Option::is_none")]
    pub equity: Option<f64>,
    #[serde(rename = "household", skip_serializing_if = "Option::is_none")]
    pub household: Option<String>,
    #[serde(rename = "propertyProfile", skip_serializing_if = "Option::is_none")]
    pub property_profile: Option<String>,
    #[serde(rename = "processType", skip_serializing_if = "Option::is_none")]
    pub process_type: Option<String>,
    #[serde(rename = "riskScore", skip_serializing_if = "Option::is_none")]
    pub risk_score: Option<i32>,
    #[serde(rename = "class_action_program", skip_serializing_if = "Option::is_none")]
    pub class_action_program: Option<String>,
    #[serde(rename = "trustType", skip_serializing_if = "Option::is_none")]
    pub trust_type: Option<String>,
    #[serde(rename = "orgType", skip_serializing_if = "Option::is_none")]
    pub org_type: Option<String>,
    #[serde(rename = "businessDescription", skip_serializing_if = "Option::is_none")]
    pub business_description: Option<String>,
    #[serde(rename = "usTaxPurposeType", skip_serializing_if = "Option::is_none")]
    pub us_tax_purpose_type: Option<String>,
    #[serde(rename = "tradeIntentionType", skip_serializing_if = "Option::is_none")]
    pub trade_intention_type: Option<String>,
    #[serde(rename = "registeredAddress", skip_serializing_if = "Option::is_none")]
    pub registered_address: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "mailing", skip_serializing_if = "Option::is_none")]
    pub mailing: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "countryOfCorporation", skip_serializing_if = "Option::is_none")]
    pub country_of_corporation: Option<String>,
    #[serde(rename = "taxIds", skip_serializing_if = "Option::is_none")]
    pub tax_ids: Option<Vec<std::collections::HashMap<String, String>>>,
    #[serde(rename = "taxTreatyDetails", skip_serializing_if = "Option::is_none")]
    pub tax_treaty_details: Option<Vec<std::collections::HashMap<String, String>>>,
}

impl AccountData {
    pub fn new() -> AccountData {
        AccountData {
            account_id: None,
            master_account_id: None,
            main_account: None,
            source_account_id: None,
            primary_user: None,
            clearing_status: None,
            clearing_status_description: None,
            state_code: None,
            base_currency: None,
            date_begun: None,
            date_approved: None,
            date_opened: None,
            date_funded: None,
            date_closed: None,
            date_linked: None,
            date_delinked: None,
            account_title: None,
            official_title: None,
            account_alias: None,
            email_address: None,
            margin: None,
            applicant_type: None,
            sub_type: None,
            stock_yield_program: None,
            fee_template: None,
            capabilities: None,
            limited_option_trading: None,
            investment_objectives: None,
            external_id: None,
            mifid_category: None,
            mifir_status: None,
            equity: None,
            household: None,
            property_profile: None,
            process_type: None,
            risk_score: None,
            class_action_program: None,
            trust_type: None,
            org_type: None,
            business_description: None,
            us_tax_purpose_type: None,
            trade_intention_type: None,
            registered_address: None,
            mailing: None,
            country_of_corporation: None,
            tax_ids: None,
            tax_treaty_details: None,
        }
    }
}
