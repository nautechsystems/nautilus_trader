/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionsResponseRpnlItems {
    /// Specifies the date for the transaction.
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Specifies the currency of the realized value.
    #[serde(rename = "cur", skip_serializing_if = "Option::is_none")]
    pub cur: Option<String>,
    /// Returns the foreign exchnage rate.
    #[serde(rename = "fxRate", skip_serializing_if = "Option::is_none")]
    pub fx_rate: Option<i32>,
    /// Determines if the day was a loss or gain * `L` - LOSS * `G` - GAIN
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// Returns the account ID the trade transacted on.
    #[serde(rename = "acctid", skip_serializing_if = "Option::is_none")]
    pub acctid: Option<String>,
    /// Returns the amount gained or lost on the day.
    #[serde(rename = "amt", skip_serializing_if = "Option::is_none")]
    pub amt: Option<String>,
    /// Returns the contract ID of the transaction.
    #[serde(rename = "conid", skip_serializing_if = "Option::is_none")]
    pub conid: Option<String>,
}

impl TransactionsResponseRpnlItems {
    pub fn new() -> TransactionsResponseRpnlItems {
        TransactionsResponseRpnlItems {
            date: None,
            cur: None,
            fx_rate: None,
            side: None,
            acctid: None,
            amt: None,
            conid: None,
        }
    }
}
/// Determines if the day was a loss or gain * `L` - LOSS * `G` - GAIN
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "L")]
    L,
    #[serde(rename = "G")]
    G,
}

impl Default for Side {
    fn default() -> Side {
        Self::L
    }
}
