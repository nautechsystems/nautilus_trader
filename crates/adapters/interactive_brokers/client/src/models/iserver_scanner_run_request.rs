/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IserverScannerRunRequest {
    /// Instrument type as the target of the market scanner request. Found in the “instrument_list” section of the /iserver/scanner/params response.
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// Scanner value the market scanner is sorted by. Based on the “scan_type_list” section of the /iserver/scanner/params response.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Location value the market scanner is searching through. Based on the “location_tree” section of the /iserver/scanner/params response.
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Contains any additional filters that should apply to response.
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<models::IserverScannerRunRequestFilterInner>>,
}

impl IserverScannerRunRequest {
    pub fn new() -> IserverScannerRunRequest {
        IserverScannerRunRequest {
            instrument: None,
            r#type: None,
            location: None,
            filter: None,
        }
    }
}
