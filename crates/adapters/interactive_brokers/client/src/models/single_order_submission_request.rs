/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SingleOrderSubmissionRequest : A single order ticket.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SingleOrderSubmissionRequest {
    /// Receiving account of the order ticket.
    #[serde(rename = "acctId", skip_serializing_if = "Option::is_none")]
    pub acct_id: Option<String>,
    /// IB contract ID of the instrument.
    #[serde(rename = "conid")]
    pub conid: i32,
    /// Contract ID and routing destination together in format 123456@EXCHANGE.
    #[serde(rename = "conidex", skip_serializing_if = "Option::is_none")]
    pub conidex: Option<String>,
    /// IB asset class identifier.
    #[serde(rename = "secType", skip_serializing_if = "Option::is_none")]
    pub sec_type: Option<String>,
    /// Client-configurable order identifier.
    #[serde(rename = "cOID", skip_serializing_if = "Option::is_none")]
    pub c_oid: Option<String>,
    /// If the order ticket is a child order in a bracket, the parentId field must be set equal to the cOID provided for the parent order.
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    /// The listing exchange of the instrument.
    #[serde(rename = "listingExchange", skip_serializing_if = "Option::is_none")]
    pub listing_exchange: Option<String>,
    /// Indicates that all orders in the containing array are to be treated as an OCA group.
    #[serde(rename = "isSingleGroup", skip_serializing_if = "Option::is_none")]
    pub is_single_group: Option<bool>,
    /// Instructs IB to permit the order to execute outside of regular trading hours.
    #[serde(rename = "outsideRTH", skip_serializing_if = "Option::is_none")]
    pub outside_rth: Option<bool>,
    /// Additional price value used in certain order types, such as stop orders.
    #[serde(rename = "auxPrice", skip_serializing_if = "Option::is_none")]
    pub aux_price: Option<f64>,
    /// Ticker symbol of the instrument.
    #[serde(rename = "ticker", skip_serializing_if = "Option::is_none")]
    pub ticker: Option<String>,
    /// Offset used with Trailing orders.
    #[serde(rename = "trailingAmt", skip_serializing_if = "Option::is_none")]
    pub trailing_amt: Option<f64>,
    /// Specifies the type of trailing used with a Trailing order.
    #[serde(rename = "trailingType", skip_serializing_if = "Option::is_none")]
    pub trailing_type: Option<TrailingType>,
    /// IB internal identifier for order entry UI element.
    #[serde(rename = "referrer", skip_serializing_if = "Option::is_none")]
    pub referrer: Option<String>,
    /// Quantity of currency used with cash quantity orders.
    #[serde(rename = "cashQty", skip_serializing_if = "Option::is_none")]
    pub cash_qty: Option<f64>,
    /// Instructs IB to apply the Price Management Algo.
    #[serde(rename = "useAdaptive", skip_serializing_if = "Option::is_none")]
    pub use_adaptive: Option<bool>,
    /// Indicates that a forex order is for currency conversion and should not entail a virtual forex position in the account, where applicable.
    #[serde(rename = "isCcyConv", skip_serializing_if = "Option::is_none")]
    pub is_ccy_conv: Option<bool>,
    /// IB order type identifier.
    #[serde(rename = "orderType")]
    pub order_type: String,
    /// Price of the order ticket, where applicable.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Side of the order ticket.
    #[serde(rename = "side")]
    pub side: Side,
    /// Time in force of the order ticket.
    #[serde(rename = "tif")]
    pub tif: Tif,
    /// Quantity of the order ticket in units of the instrument.
    #[serde(rename = "quantity")]
    pub quantity: f64,
    /// The name of an execution algorithm.
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<String>,
    #[serde(rename = "strategyParameters", skip_serializing_if = "Option::is_none")]
    pub strategy_parameters: Option<Box<models::SingleOrderSubmissionRequestStrategyParameters>>,
}

impl SingleOrderSubmissionRequest {
    /// A single order ticket.
    pub fn new(conid: i32, order_type: String, side: Side, tif: Tif, quantity: f64) -> SingleOrderSubmissionRequest {
        SingleOrderSubmissionRequest {
            acct_id: None,
            conid,
            conidex: None,
            sec_type: None,
            c_oid: None,
            parent_id: None,
            listing_exchange: None,
            is_single_group: None,
            outside_rth: None,
            aux_price: None,
            ticker: None,
            trailing_amt: None,
            trailing_type: None,
            referrer: None,
            cash_qty: None,
            use_adaptive: None,
            is_ccy_conv: None,
            order_type,
            price: None,
            side,
            tif,
            quantity,
            strategy: None,
            strategy_parameters: None,
        }
    }
}
/// Specifies the type of trailing used with a Trailing order.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrailingType {
    #[serde(rename = "amt")]
    Amt,
    #[serde(rename = "%")]
    Percent,
}

impl Default for TrailingType {
    fn default() -> TrailingType {
        Self::Amt
    }
}
/// Side of the order ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "BUY")]
    Buy,
    #[serde(rename = "SELL")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Time in force of the order ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tif {
    #[serde(rename = "DAY")]
    Day,
    #[serde(rename = "IOC")]
    Ioc,
    #[serde(rename = "GTC")]
    Gtc,
    #[serde(rename = "OPG")]
    Opg,
    #[serde(rename = "PAX")]
    Pax,
}

impl Default for Tif {
    fn default() -> Tif {
        Self::Day
    }
}
