/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Identification : Identification information of the associated person.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Identification {
    /// Citizenship of the applicant.<br>If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country', THEN ProhibitedCountryQuestionnaire is required.<br>List of Prohibited Countries an be obtained using /getEnumerations<br>Preferred id document by IssuingCountry
    #[serde(rename = "citizenship", skip_serializing_if = "Option::is_none")]
    pub citizenship: Option<String>,
    /// If the applicant has multiple citizenship, provide the additional citizenship of the applicant.<br>If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country', THEN ProhibitedCountryQuestionnaire is required.<br>List of Prohibited Countries an be obtained using /getEnumerations<br>Preferred id document by IssuingCountry
    #[serde(rename = "citizenship2", skip_serializing_if = "Option::is_none")]
    pub citizenship2: Option<String>,
    /// If the applicant has multiple citizenship, provide the additional citizenship of the applicant.<br>If citizenship, citizenship2, OR citizenship3 is classified as a ‘Prohibited Country', THEN ProhibitedCountryQuestionnaire is required.<br>List of Prohibited Countries an be obtained using /getEnumerations<br>Preferred id document by IssuingCountry
    #[serde(rename = "citizenship3", skip_serializing_if = "Option::is_none")]
    pub citizenship3: Option<String>,
    /// Social security number, required for US Residents and citizens.
    #[serde(rename = "ssn", skip_serializing_if = "Option::is_none")]
    pub ssn: Option<String>,
    /// Social insurance number, required for Canada Residents and citizens.
    #[serde(rename = "sin", skip_serializing_if = "Option::is_none")]
    pub sin: Option<String>,
    /// Drivers License<br>Pattern for AUS: ^.{0,64}$<br>Pattern for NZL: ^[A-Z]{2}\\d{6}$
    #[serde(rename = "driversLicense", skip_serializing_if = "Option::is_none")]
    pub drivers_license: Option<String>,
    /// Passport
    #[serde(rename = "passport", skip_serializing_if = "Option::is_none")]
    pub passport: Option<String>,
    /// Alien Card
    #[serde(rename = "alienCard", skip_serializing_if = "Option::is_none")]
    pub alien_card: Option<String>,
    /// HK and Macao Travel Permit
    #[serde(rename = "hkTravelPermit", skip_serializing_if = "Option::is_none")]
    pub hk_travel_permit: Option<String>,
    /// Only applicable for Australia residents.
    #[serde(rename = "medicareCard", skip_serializing_if = "Option::is_none")]
    pub medicare_card: Option<String>,
    /// Required if MedicareCard is provided.
    #[serde(rename = "cardColor", skip_serializing_if = "Option::is_none")]
    pub card_color: Option<CardColor>,
    /// Required if MedicareCard is provided.
    #[serde(rename = "medicareReference", skip_serializing_if = "Option::is_none")]
    pub medicare_reference: Option<String>,
    /// National Identification Card<br>Pattern by Country-<br> ARG: ^\\d{8}$<br>AUS: ^(\\d{8}|\\d{9})$<br>BRA: ^\\d{11}$<br>CHN: ^\\d{17}(\\d|X)$<br>DNK: ^\\d{10}$<br>ESP: ^\\d{8}[A-Z]$<br>FRA: ^\\d{15}$<br>FRA: ^\\d{4}([A-Z]|\\d){3}\\d{5}$<br>ITA: ^([A-Z]{2}\\d{7}|\\d{7}[A-Z]{2}|[A-Z]{2}\\d{5}[A-Z]{2})$<br>ITA: ^[A-Z]{6}\\d{2}[A-Z]\\d{2}[A-Z]\\d{3}[A-Z]$<br>MEX: ^[A-Z]{4}\\d{6}[A-Z]{6}\\d{2}$<br>MYZ: ^\\d{12}$<br>RUS: ^\\d{10}$<br>RUS: ^\\d{9}$<br>SGP: ^[A-Z]\\d{7}[A-Z]$<br>SWE: ^(\\d{10}|\\d{12})$<br>TUR: ^\\d{11}$<br>ZAF: ^\\d{13}$
    #[serde(rename = "nationalCard", skip_serializing_if = "Option::is_none")]
    pub national_card: Option<String>,
    /// Issuing country of the ID document.
    #[serde(rename = "issuingCountry", skip_serializing_if = "Option::is_none")]
    pub issuing_country: Option<String>,
    /// Issuing state of the ID document.
    #[serde(rename = "issuingState", skip_serializing_if = "Option::is_none")]
    pub issuing_state: Option<String>,
    /// Only applicable IF ID_Type=DriversLicense AND IssuingCountry=AUS
    #[serde(rename = "rta", skip_serializing_if = "Option::is_none")]
    pub rta: Option<String>,
    #[serde(rename = "legalResidenceCountry", skip_serializing_if = "Option::is_none")]
    pub legal_residence_country: Option<String>,
    #[serde(rename = "legalResidenceState", skip_serializing_if = "Option::is_none")]
    pub legal_residence_state: Option<String>,
    #[serde(rename = "educationalQualification", skip_serializing_if = "Option::is_none")]
    pub educational_qualification: Option<String>,
    #[serde(rename = "fathersName", skip_serializing_if = "Option::is_none")]
    pub fathers_name: Option<String>,
    #[serde(rename = "greenCard", skip_serializing_if = "Option::is_none")]
    pub green_card: Option<bool>,
    /// India PanCard, required for India Residents and citizens.
    #[serde(rename = "panNumber", skip_serializing_if = "Option::is_none")]
    pub pan_number: Option<String>,
    /// Tax ID TIN within <TaxResidencies>foreign_tax_id within <W8Ben>
    #[serde(rename = "taxId", skip_serializing_if = "Option::is_none")]
    pub tax_id: Option<String>,
    #[serde(rename = "proofOfAgeCard", skip_serializing_if = "Option::is_none")]
    pub proof_of_age_card: Option<String>,
    /// Indicate IF ID document has an ExpirationDate.
    #[serde(rename = "expire", skip_serializing_if = "Option::is_none")]
    pub expire: Option<bool>,
    /// Provide expiration date of the ID document. Cannot be past date.
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
}

impl Identification {
    /// Identification information of the associated person.
    pub fn new() -> Identification {
        Identification {
            citizenship: None,
            citizenship2: None,
            citizenship3: None,
            ssn: None,
            sin: None,
            drivers_license: None,
            passport: None,
            alien_card: None,
            hk_travel_permit: None,
            medicare_card: None,
            card_color: None,
            medicare_reference: None,
            national_card: None,
            issuing_country: None,
            issuing_state: None,
            rta: None,
            legal_residence_country: None,
            legal_residence_state: None,
            educational_qualification: None,
            fathers_name: None,
            green_card: None,
            pan_number: None,
            tax_id: None,
            proof_of_age_card: None,
            expire: None,
            expiration_date: None,
        }
    }
}
/// Required if MedicareCard is provided.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CardColor {
    #[serde(rename = "BLUE")]
    Blue,
    #[serde(rename = "GREEN")]
    Green,
    #[serde(rename = "YELLOW")]
    Yellow,
}

impl Default for CardColor {
    fn default() -> CardColor {
        Self::Blue
    }
}
