/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtPositionsTransferType {
    #[serde(
        rename = "partialStockPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_stock_positions: Option<Vec<models::PartialStockPosition>>,
    #[serde(
        rename = "partialBondPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_bond_positions: Option<Vec<models::PartialBondPosition>>,
    #[serde(
        rename = "partialOptionPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_option_positions: Option<Vec<models::PartialOptionPosition>>,
    #[serde(
        rename = "partialWarrantPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_warrant_positions: Option<Vec<models::PartialWarrantPosition>>,
    #[serde(
        rename = "partialFundPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_fund_positions: Option<Vec<models::PartialFundPosition>>,
    #[serde(
        rename = "partialCashPositions",
        skip_serializing_if = "Option::is_none"
    )]
    pub partial_cash_positions: Option<Vec<models::PartialCashPosition>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "subType", skip_serializing_if = "Option::is_none")]
    pub sub_type: Option<SubType>,
    #[serde(rename = "brokerId", skip_serializing_if = "Option::is_none")]
    pub broker_id: Option<String>,
    #[serde(rename = "brokerName", skip_serializing_if = "Option::is_none")]
    pub broker_name: Option<String>,
    #[serde(rename = "accountAtBroker", skip_serializing_if = "Option::is_none")]
    pub account_at_broker: Option<String>,
    #[serde(rename = "srcIRAType", skip_serializing_if = "Option::is_none")]
    pub src_ira_type: Option<SrcIraType>,
    #[serde(rename = "marginLoan", skip_serializing_if = "Option::is_none")]
    pub margin_loan: Option<bool>,
    #[serde(rename = "shortPos", skip_serializing_if = "Option::is_none")]
    pub short_pos: Option<bool>,
    #[serde(rename = "optionPos", skip_serializing_if = "Option::is_none")]
    pub option_pos: Option<bool>,
    #[serde(rename = "ibAccount", skip_serializing_if = "Option::is_none")]
    pub ib_account: Option<String>,
    #[serde(rename = "thirdPartyType", skip_serializing_if = "Option::is_none")]
    pub third_party_type: Option<String>,
    #[serde(
        rename = "approximateAccountValue",
        skip_serializing_if = "Option::is_none"
    )]
    pub approximate_account_value: Option<i32>,
    #[serde(rename = "ssn", skip_serializing_if = "Option::is_none")]
    pub ssn: Option<String>,
    #[serde(rename = "ein", skip_serializing_if = "Option::is_none")]
    pub ein: Option<String>,
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(
        rename = "authorizeToRemoveFund",
        skip_serializing_if = "Option::is_none"
    )]
    pub authorize_to_remove_fund: Option<bool>,
}

impl ExtPositionsTransferType {
    pub fn new() -> ExtPositionsTransferType {
        ExtPositionsTransferType {
            partial_stock_positions: None,
            partial_bond_positions: None,
            partial_option_positions: None,
            partial_warrant_positions: None,
            partial_fund_positions: None,
            partial_cash_positions: None,
            r#type: None,
            sub_type: None,
            broker_id: None,
            broker_name: None,
            account_at_broker: None,
            src_ira_type: None,
            margin_loan: None,
            short_pos: None,
            option_pos: None,
            ib_account: None,
            third_party_type: None,
            approximate_account_value: None,
            ssn: None,
            ein: None,
            signature: None,
            authorize_to_remove_fund: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "FULL")]
    Full,
    #[serde(rename = "PARTIAL")]
    Partial,
}

impl Default for Type {
    fn default() -> Type {
        Self::Full
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubType {
    #[serde(rename = "ACATS")]
    Acats,
    #[serde(rename = "ATON")]
    Aton,
}

impl Default for SubType {
    fn default() -> SubType {
        Self::Acats
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SrcIraType {
    #[serde(rename = "RI")]
    Ri,
    #[serde(rename = "RO")]
    Ro,
    #[serde(rename = "RT")]
    Rt,
    #[serde(rename = "SP")]
    Sp,
    #[serde(rename = "ED")]
    Ed,
    #[serde(rename = "TH")]
    Th,
    #[serde(rename = "RH")]
    Rh,
    #[serde(rename = "SH")]
    Sh,
    #[serde(rename = "RRSP")]
    Rrsp,
    #[serde(rename = "SRRSP")]
    Srrsp,
    #[serde(rename = "TFSA")]
    Tfsa,
    #[serde(rename = "SIMPLE")]
    Simple,
    #[serde(rename = "ISA")]
    Isa,
}

impl Default for SrcIraType {
    fn default() -> SrcIraType {
        Self::Ri
    }
}
