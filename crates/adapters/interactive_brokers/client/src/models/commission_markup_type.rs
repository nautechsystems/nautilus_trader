/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommissionMarkupType {
    #[serde(rename = "stairs", skip_serializing_if = "Option::is_none")]
    pub stairs: Option<Vec<models::MarkupStaircaseType>>,
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "minimum", skip_serializing_if = "Option::is_none")]
    pub minimum: Option<f64>,
    #[serde(rename = "maximum", skip_serializing_if = "Option::is_none")]
    pub maximum: Option<f64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    #[serde(rename = "plusCost", skip_serializing_if = "Option::is_none")]
    pub plus_cost: Option<bool>,
    #[serde(rename = "ticketCharge", skip_serializing_if = "Option::is_none")]
    pub ticket_charge: Option<f64>,
}

impl CommissionMarkupType {
    pub fn new() -> CommissionMarkupType {
        CommissionMarkupType {
            stairs: None,
            code: None,
            minimum: None,
            maximum: None,
            r#type: None,
            amount: None,
            plus_cost: None,
            ticket_charge: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "FA")]
    Fa,
    #[serde(rename = "FM")]
    Fm,
    #[serde(rename = "PM")]
    Pm,
}

impl Default for Type {
    fn default() -> Type {
        Self::Fa
    }
}
