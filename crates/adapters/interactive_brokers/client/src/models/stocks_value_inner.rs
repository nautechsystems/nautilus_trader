/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

/// StocksValueInner : Contains a series of objects for each symbol that matches the requested
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StocksValueInner {
    /// Full company name for the given contract.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Chinese name for the given company as unicode.
    #[serde(rename = "chineseName", skip_serializing_if = "Option::is_none")]
    pub chinese_name: Option<String>,
    /// Asset class for the given company.
    #[serde(rename = "assetClass", skip_serializing_if = "Option::is_none")]
    pub asset_class: Option<String>,
    /// A series of arrays pertaining to the same company listed by “name”. Typically differentiated based on currency of the primary exchange.
    #[serde(rename = "contracts", skip_serializing_if = "Option::is_none")]
    pub contracts: Option<Vec<models::StocksValueInnerContractsInner>>,
}

impl StocksValueInner {
    /// Contains a series of objects for each symbol that matches the requested
    pub fn new() -> StocksValueInner {
        StocksValueInner {
            name: None,
            chinese_name: None,
            asset_class: None,
            contracts: None,
        }
    }
}
