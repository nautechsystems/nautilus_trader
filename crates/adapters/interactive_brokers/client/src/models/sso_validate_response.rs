/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SsoValidateResponse {
    /// Internal user identifier.
    #[serde(rename = "USER_ID", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// current username logged in for the session.
    #[serde(rename = "USER_NAME", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// Confirms if validation was successful. True if session was validated; false if not.
    #[serde(rename = "RESULT", skip_serializing_if = "Option::is_none")]
    pub result: Option<bool>,
    /// Returns the time of authentication in epoch time.
    #[serde(rename = "AUTH_TIME", skip_serializing_if = "Option::is_none")]
    pub auth_time: Option<i32>,
    /// (Internal use only)
    #[serde(rename = "SF_ENABLED", skip_serializing_if = "Option::is_none")]
    pub sf_enabled: Option<bool>,
    /// Returns if the account is a trial account or a funded account.
    #[serde(rename = "IS_FREE_TRIAL", skip_serializing_if = "Option::is_none")]
    pub is_free_trial: Option<bool>,
    /// Returns the underlying username of the account.
    #[serde(rename = "CREDENTIAL", skip_serializing_if = "Option::is_none")]
    pub credential: Option<String>,
    /// Internal use only. Does not reflect the IP address of the user.
    #[serde(rename = "IP", skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// Returns the time until SSO session expiration in milliseconds.
    #[serde(rename = "EXPIRES", skip_serializing_if = "Option::is_none")]
    pub expires: Option<i32>,
    /// Returns if the customer requires two factor authentication.
    #[serde(rename = "QUALIFIED_FOR_MOBILE_AUTH", skip_serializing_if = "Option::is_none")]
    pub qualified_for_mobile_auth: Option<bool>,
    /// Used for Client Portal (Internal use only)
    #[serde(rename = "LANDING_APP", skip_serializing_if = "Option::is_none")]
    pub landing_app: Option<String>,
    /// Returns whether the account is a master account (true) or subaccount (false).
    #[serde(rename = "IS_MASTER", skip_serializing_if = "Option::is_none")]
    pub is_master: Option<bool>,
    /// Returns the last time the user was accessed in epoch time.
    #[serde(rename = "lastAccessed", skip_serializing_if = "Option::is_none")]
    pub last_accessed: Option<i32>,
    /// Returns the login type. 1 for Live, 2 for Paper
    #[serde(rename = "loginType", skip_serializing_if = "Option::is_none")]
    pub login_type: Option<i32>,
    /// Returns the paper username for the account.
    #[serde(rename = "PAPER_USER_NAME", skip_serializing_if = "Option::is_none")]
    pub paper_user_name: Option<String>,
    #[serde(rename = "features", skip_serializing_if = "Option::is_none")]
    pub features: Option<Box<models::SsoValidateResponseFeatures>>,
    /// Returns the region connected to internally.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

impl SsoValidateResponse {
    pub fn new() -> SsoValidateResponse {
        SsoValidateResponse {
            user_id: None,
            user_name: None,
            result: None,
            auth_time: None,
            sf_enabled: None,
            is_free_trial: None,
            credential: None,
            ip: None,
            expires: None,
            qualified_for_mobile_auth: None,
            landing_app: None,
            is_master: None,
            last_accessed: None,
            login_type: None,
            paper_user_name: None,
            features: None,
            region: None,
        }
    }
}
