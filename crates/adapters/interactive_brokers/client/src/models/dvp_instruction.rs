/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DvpInstruction {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "externalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(rename = "externalAccountID", skip_serializing_if = "Option::is_none")]
    pub external_account_id: Option<String>,
    #[serde(rename = "accountID", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    #[serde(rename = "agentID", skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<String>,
    #[serde(rename = "firmID", skip_serializing_if = "Option::is_none")]
    pub firm_id: Option<String>,
    #[serde(rename = "agentName", skip_serializing_if = "Option::is_none")]
    pub agent_name: Option<String>,
    #[serde(rename = "accountName", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    #[serde(rename = "dayDoID", skip_serializing_if = "Option::is_none")]
    pub day_do_id: Option<String>,
    #[serde(rename = "txGroupCode", skip_serializing_if = "Option::is_none")]
    pub tx_group_code: Option<TxGroupCode>,
    #[serde(rename = "brokerCode", skip_serializing_if = "Option::is_none")]
    pub broker_code: Option<String>,
    #[serde(rename = "assetClass", skip_serializing_if = "Option::is_none")]
    pub asset_class: Option<AssetClass>,
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<Exchange>,
    #[serde(rename = "prepayTax", skip_serializing_if = "Option::is_none")]
    pub prepay_tax: Option<bool>,
    #[serde(rename = "prepayCommission", skip_serializing_if = "Option::is_none")]
    pub prepay_commission: Option<bool>,
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
}

impl DvpInstruction {
    pub fn new() -> DvpInstruction {
        DvpInstruction {
            id: None,
            external_id: None,
            external_account_id: None,
            account_id: None,
            name: None,
            r#type: None,
            role: None,
            agent_id: None,
            firm_id: None,
            agent_name: None,
            account_name: None,
            day_do_id: None,
            tx_group_code: None,
            broker_code: None,
            asset_class: None,
            exchange: None,
            prepay_tax: None,
            prepay_commission: None,
            expiry: None,
            default: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DTCID")]
    Dtcid,
    #[serde(rename = "NSCC")]
    Nscc,
    #[serde(rename = "CMTA")]
    Cmta,
    #[serde(rename = "GUS")]
    Gus,
    #[serde(rename = "OCCSSF")]
    Occssf,
}

impl Default for Type {
    fn default() -> Type {
        Self::Dtcid
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "E")]
    E,
    #[serde(rename = "C")]
    C,
    #[serde(rename = "B")]
    B,
}

impl Default for Role {
    fn default() -> Role {
        Self::E
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TxGroupCode {
    #[serde(rename = "G")]
    G,
    #[serde(rename = "Z")]
    Z,
    #[serde(rename = "R")]
    R,
    #[serde(rename = "N")]
    N,
}

impl Default for TxGroupCode {
    fn default() -> TxGroupCode {
        Self::G
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AssetClass {
    #[serde(rename = "BILL")]
    Bill,
    #[serde(rename = "BOND")]
    Bond,
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "CFD")]
    Cfd,
    #[serde(rename = "COMB")]
    Comb,
    #[serde(rename = "FOP")]
    Fop,
    #[serde(rename = "FUND")]
    Fund,
    #[serde(rename = "FUT")]
    Fut,
    #[serde(rename = "OPT")]
    Opt,
    #[serde(rename = "SSF")]
    Ssf,
    #[serde(rename = "STK")]
    Stk,
    #[serde(rename = "WAR")]
    War,
    #[serde(rename = "MRGN")]
    Mrgn,
}

impl Default for AssetClass {
    fn default() -> AssetClass {
        Self::Bill
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Exchange {
    #[serde(rename = "NYSE")]
    Nyse,
    #[serde(rename = "AMEX")]
    Amex,
    #[serde(rename = "NASDAQ")]
    Nasdaq,
    #[serde(rename = "CBOE")]
    Cboe,
    #[serde(rename = "ISE")]
    Ise,
    #[serde(rename = "BOX")]
    Box,
    #[serde(rename = "PHLX")]
    Phlx,
    #[serde(rename = "PSE")]
    Pse,
}

impl Default for Exchange {
    fn default() -> Exchange {
        Self::Nyse
    }
}
