/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.15.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Document {
    #[serde(rename = "signedBy", skip_serializing_if = "Option::is_none")]
    pub signed_by: Option<Vec<String>>,
    #[serde(rename = "attachedFile", skip_serializing_if = "Option::is_none")]
    pub attached_file: Option<Box<models::AttachedFileType>>,
    #[serde(rename = "formNumber", skip_serializing_if = "Option::is_none")]
    pub form_number: Option<i32>,
    #[serde(rename = "validAddress", skip_serializing_if = "Option::is_none")]
    pub valid_address: Option<bool>,
    #[serde(rename = "execLoginTimestamp", skip_serializing_if = "Option::is_none")]
    pub exec_login_timestamp: Option<i32>,
    #[serde(rename = "execTimestamp", skip_serializing_if = "Option::is_none")]
    pub exec_timestamp: Option<i32>,
    #[serde(rename = "documentType", skip_serializing_if = "Option::is_none")]
    pub document_type: Option<DocumentType>,
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(rename = "externalAccountId", skip_serializing_if = "Option::is_none")]
    pub external_account_id: Option<String>,
    #[serde(rename = "externalIndividualId", skip_serializing_if = "Option::is_none")]
    pub external_individual_id: Option<String>,
    #[serde(rename = "proofOfIdentityType", skip_serializing_if = "Option::is_none")]
    pub proof_of_identity_type: Option<ProofOfIdentityType>,
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    #[serde(rename = "proofOfAddressType", skip_serializing_if = "Option::is_none")]
    pub proof_of_address_type: Option<ProofOfAddressType>,
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<Box<models::FilePayload>>,
}

impl Document {
    pub fn new() -> Document {
        Document {
            signed_by: None,
            attached_file: None,
            form_number: None,
            valid_address: None,
            exec_login_timestamp: None,
            exec_timestamp: None,
            document_type: None,
            signature: None,
            external_account_id: None,
            external_individual_id: None,
            proof_of_identity_type: None,
            expiration_date: None,
            proof_of_address_type: None,
            payload: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DocumentType {
    #[serde(rename = "Check")]
    Check,
    #[serde(rename = "Company Ownership")]
    CompanyOwnership,
    #[serde(rename = "Divorce Settlement")]
    DivorceSettlement,
    #[serde(rename = "Employer Confirmation")]
    EmployerConfirmation,
    #[serde(rename = "Entitlement to Payments")]
    EntitlementToPayments,
    #[serde(rename = "Letter")]
    Letter,
    #[serde(rename = "Ownership")]
    Ownership,
    #[serde(rename = "Pay Slip")]
    PaySlip,
    #[serde(rename = "Proof of Sale")]
    ProofOfSale,
    #[serde(rename = "Proof of Winnings")]
    ProofOfWinnings,
    #[serde(rename = "Severance")]
    Severance,
    #[serde(rename = "Tax Return")]
    TaxReturn,
    #[serde(rename = "Will")]
    Will,
    #[serde(rename = "Bank Statement")]
    BankStatement,
    #[serde(rename = "Brokerage Statement")]
    BrokerageStatement,
    #[serde(rename = "Current Lease")]
    CurrentLease,
    #[serde(rename = "Financial Statement")]
    FinancialStatement,
    #[serde(rename = "Certificate of Incorporation/Formation")]
    CertificateOfIncorporationSlashFormation,
    #[serde(rename = "Certificate of Registratios")]
    CertificateOfRegistratios,
    #[serde(rename = "Company Charter")]
    CompanyCharter,
    #[serde(rename = "Certificate of Good Standing")]
    CertificateOfGoodStanding,
    #[serde(rename = "Government-issued Business License")]
    GovernmentIssuedBusinessLicense,
    #[serde(rename = "Corporate Charter")]
    CorporateCharter,
    #[serde(rename = "Articles of Incorporation")]
    ArticlesOfIncorporation,
    #[serde(rename = "Bank Passbook/Statement")]
    BankPassbookSlashStatement,
    #[serde(rename = "Certified Proof of Identity")]
    CertifiedProofOfIdentity,
    #[serde(rename = "Certified Proof of Address")]
    CertifiedProofOfAddress,
    #[serde(rename = "Income Tax Return")]
    IncomeTaxReturn,
    #[serde(rename = "Additional Proof of Identity Document")]
    AdditionalProofOfIdentityDocument,
    #[serde(rename = "Proof of Principal Place of Business and Registration")]
    ProofOfPrincipalPlaceOfBusinessAndRegistration,
    #[serde(rename = "Utility Bill")]
    UtilityBill,
    #[serde(rename = "Evidence of Ownership of Property")]
    EvidenceOfOwnershipOfProperty,
    #[serde(rename = "Authorization to Open Account - Evidence")]
    AuthorizationToOpenAccountEvidence,
    #[serde(rename = "Authorization to Open Account - Certification")]
    AuthorizationToOpenAccountCertification,
    #[serde(rename = "Italian Health Card (Tessera Sanitaria)")]
    ItalianHealthCardLeftParenthesisTesseraSanitariaRightParenthesis,
    #[serde(rename = "CRS card of Lombardy")]
    CrsCardOfLombardy,
    #[serde(rename = "Italian Electronic ID Card - CIE")]
    ItalianElectronicIdCardCie,
    #[serde(rename = "Court- or Govt-issued document")]
    CourtOrGovtIssuedDocument,
    #[serde(rename = "Copy of Passport, National Id or Driver's License")]
    CopyOfPassportCommaNationalIdOrDriverQuoteSLicense,
    #[serde(rename = "Passport")]
    Passport,
    #[serde(rename = "National ID")]
    NationalId,
}

impl Default for DocumentType {
    fn default() -> DocumentType {
        Self::Check
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProofOfIdentityType {
    #[serde(rename = "Driver License")]
    DriverLicense,
    #[serde(rename = "Passport")]
    Passport,
    #[serde(rename = "Alien ID Card")]
    AlienIdCard,
    #[serde(rename = "National ID Card")]
    NationalIdCard,
    #[serde(rename = "Bank Statement")]
    BankStatement,
    #[serde(rename = "Evidence of Ownership of Property")]
    EvidenceOfOwnershipOfProperty,
    #[serde(rename = "Credit Card Statement")]
    CreditCardStatement,
    #[serde(rename = "Utility Bill")]
    UtilityBill,
    #[serde(rename = "Brokerage Statement")]
    BrokerageStatement,
    #[serde(rename = "T4 Statement")]
    T4Statement,
    #[serde(rename = "CRA Assessment")]
    CraAssessment,
    #[serde(rename = "Hong Kong and Macao Entry Permit")]
    HongKongAndMacaoEntryPermit,
}

impl Default for ProofOfIdentityType {
    fn default() -> ProofOfIdentityType {
        Self::DriverLicense
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProofOfAddressType {
    #[serde(rename = "Driver License")]
    DriverLicense,
    #[serde(rename = "Bank Statement")]
    BankStatement,
    #[serde(rename = "Brokerage Statement")]
    BrokerageStatement,
    #[serde(rename = "Homeowner Insurance Policy Bill")]
    HomeownerInsurancePolicyBill,
    #[serde(rename = "Homeowner Insurance Policy Document")]
    HomeownerInsurancePolicyDocument,
    #[serde(rename = "Renter Insurance Policy bill")]
    RenterInsurancePolicyBill,
    #[serde(rename = "Renter Insurance Policy Document")]
    RenterInsurancePolicyDocument,
    #[serde(rename = "Security System Bill")]
    SecuritySystemBill,
    #[serde(rename = "Government Issued Letters")]
    GovernmentIssuedLetters,
    #[serde(rename = "Utility Bill")]
    UtilityBill,
    #[serde(rename = "Current Lease")]
    CurrentLease,
    #[serde(rename = "Evidence of Ownership of Property")]
    EvidenceOfOwnershipOfProperty,
    #[serde(rename = "Other Document")]
    OtherDocument,
}

impl Default for ProofOfAddressType {
    fn default() -> ProofOfAddressType {
        Self::DriverLicense
    }
}
