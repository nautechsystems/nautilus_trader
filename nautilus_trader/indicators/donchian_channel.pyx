# -------------------------------------------------------------------------------------------------
#  Copyright (C) 2015-2020 Nautech Systems Pty Ltd. All rights reserved.
#  https://nautechsystems.io
#
#  Licensed under the GNU Lesser General Public License Version 3.0 (the "License");
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at https://www.gnu.org/licenses/lgpl-3.0.en.html
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# -------------------------------------------------------------------------------------------------

from collections import deque

from nautilus_trader.core.correctness cimport Condition
from nautilus_trader.indicators.base.indicator cimport Indicator
from nautilus_trader.model.bar cimport Bar
from nautilus_trader.model.tick cimport QuoteTick
from nautilus_trader.model.tick cimport TradeTick


cdef class DonchianChannel(Indicator):
    """
    Donchian Channels are three lines generated by moving average calculations
    that comprise an indicator formed by upper and lower bands around a
    mid-range or median band. The upper band marks the highest price of a
    security over N periods while the lower band marks the lowest price of a
    security over N periods. The area between the upper and lower bands
    represents the Donchian Channel.
    """

    def __init__(self, int period):
        """
        Initialize a new instance of the `DonchianChannel` class.

        Parameters
        ----------
        period : int
            The rolling window period for the indicator (> 0).

        Raises
        ------
        ValueError
            If period is not positive (> 0).

        """
        Condition.positive_int(period, "period")
        super().__init__(params=[period])

        self._period = period
        self._upper = deque(maxlen=period)
        self._lower = deque(maxlen=period)

        self._value_upper = 0
        self._value_middle = 0
        self._value_lower = 0

    @property
    def period(self):
        """
        The period for the moving average.

        Returns
        -------
        int

        """
        return self._period

    @property
    def upper(self):
        """
        The value of the upper channel.

        Returns
        -------
        double

        """
        return self._value_upper

    @property
    def middle(self):
        """
        The value of the middle channel.

        Returns
        -------
        double

        """
        return self._value_middle

    @property
    def lower(self):
        """
        The value of the lower channel.

        Returns
        -------
        double

        """
        return self._value_lower

    cpdef void handle_quote_tick(self, QuoteTick tick) except *:
        """
        Update the indicator with the given ticks high and low prices.

        Parameters
        ----------
        tick : TradeTick
            The tick for the update.

        """
        Condition.not_none(tick, "tick")

        self.update_raw(tick.ask.as_double(), tick.bid.as_double())

    cpdef void handle_trade_tick(self, TradeTick tick) except *:
        """
        Update the indicator with the given ticks price.

        Parameters
        ----------
        tick : TradeTick
            The tick for the update.

        """
        Condition.not_none(tick, "tick")

        cdef double price = tick.price.as_double()
        self.update_raw(price, price)

    cpdef void handle_bar(self, Bar bar) except *:
        """
        Update the indicator with the given bar.

        Parameters
        ----------
        bar : Bar
            The update bar.

        """
        Condition.not_none(bar, "bar")

        self.update_raw(bar.high.as_double(), bar.low.as_double())

    cpdef void update_raw(self, double high, double low) except *:
        """
        Update the indicator with the given prices.

        Parameters
        ----------
        high : double
            The price for the upper channel.
        low : double
            The price for the lower channel.

        """
        # Add data to queues
        self._upper.append(high)
        self._lower.append(low)

        # Initialization logic
        if not self.initialized:
            self._set_has_inputs(True)
            if len(self._upper) >= self._period and len(self._lower) >= self._period:
                self._set_initialized(True)

        # Set values
        self._value_upper = max(self._upper)
        self._value_lower = min(self._lower)
        self._value_middle = (self._value_upper + self._value_lower) / 2

    cpdef void reset(self) except *:
        """
        Reset the indicator.

        All stateful values are reset to their initial value.
        """
        self._reset_base()
        self._upper.clear()
        self._lower.clear()

        self._value_upper = 0
        self._value_middle = 0
        self._value_lower = 0
