/* Generated with cbindgen:0.20.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>
#include <Python.h>

typedef struct String String;

typedef struct UUID4_t {
    struct String *value;
} UUID4_t;

/**
 * Converts seconds to nanoseconds (ns).
 */
uint64_t secs_to_nanos(double secs);

/**
 * Converts seconds to milliseconds (ms).
 */
uint64_t secs_to_millis(double secs);

/**
 * Converts milliseconds (ms) to nanoseconds (ns).
 */
uint64_t millis_to_nanos(double millis);

/**
 * Converts microseconds (μs) to nanoseconds (ns).
 */
uint64_t micros_to_nanos(double micros);

/**
 * Converts nanoseconds (ns) to seconds.
 */
double nanos_to_secs(uint64_t nanos);

/**
 * Converts nanoseconds (ns) to milliseconds (ms).
 */
uint64_t nanos_to_millis(uint64_t nanos);

/**
 * Converts nanoseconds (ns) to microseconds (μs).
 */
uint64_t nanos_to_micros(uint64_t nanos);

/**
 * Returns the current seconds since the UNIX epoch.
 * This timestamp is guaranteed to be monotonic within a runtime.
 */
double unix_timestamp(void);

/**
 * Returns the current milliseconds since the UNIX epoch.
 * This timestamp is guaranteed to be monotonic within a runtime.
 */
uint64_t unix_timestamp_ms(void);

/**
 * Returns the current microseconds since the UNIX epoch.
 * This timestamp is guaranteed to be monotonic within a runtime.
 */
uint64_t unix_timestamp_us(void);

/**
 * Returns the current nanoseconds since the UNIX epoch.
 * This timestamp is guaranteed to be monotonic within a runtime.
 */
uint64_t unix_timestamp_ns(void);

struct UUID4_t uuid4_new(void);

void uuid4_free(struct UUID4_t uuid4);

/**
 * Returns a `UUID4` from a valid Python object pointer.
 *
 * # Safety
 * - `ptr` must be borrowed from a valid Python UTF-8 `str`.
 */
struct UUID4_t uuid4_from_pystr(PyObject *ptr);

/**
 * Returns a pointer to a valid Python UTF-8 string.
 *
 * # Safety
 * - Assumes that since the data is originating from Rust, the GIL does not need
 * to be acquired.
 * - Assumes you are immediately returning this pointer to Python.
 */
PyObject *uuid4_to_pystr(const struct UUID4_t *uuid);

uint8_t uuid4_eq(const struct UUID4_t *lhs, const struct UUID4_t *rhs);

uint64_t uuid4_hash(const struct UUID4_t *uuid);
