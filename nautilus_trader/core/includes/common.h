/* Generated with cbindgen:0.20.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>
#include <Python.h>

typedef enum LogColor {
    NORMAL = 0,
    GREEN = 1,
    BLUE = 2,
    MAGENTA = 3,
    CYAN = 4,
    YELLOW = 5,
    RED = 6,
} LogColor;

typedef enum LogLevel {
    DEBUG = 10,
    INFO = 20,
    WARNING = 30,
    ERROR = 40,
    CRITICAL = 50,
} LogLevel;

typedef struct Logger Logger;

/**
 * BufWriter is not C FFI safe. Box logger and pass it as an opaque pointer.
 * This works because Logger fields don't need to be accessed, only functions
 * are called.
 */
typedef struct CLogger_t {
    struct Logger *_0;
} CLogger_t;

/**
 * Creates a logger from a valid Python object pointer and a defined logging level.
 *
 * # Safety
 * - `ptr` must be borrowed from a valid Python UTF-8 `str`.
 */
struct CLogger_t clogger_new(PyObject *ptr, enum LogLevel level_stdout);

void clogger_free(struct CLogger_t logger);

/**
 * Log a message from valid Python object pointers.
 *
 * # Safety
 * - `component_ptr` must be borrowed from a valid Python UTF-8 `str`.
 * - `msg_ptr` must be borrowed from a valid Python UTF-8 `str`.
 */
void clogger_log(struct CLogger_t *logger,
                 uint64_t timestamp_ns,
                 enum LogLevel level,
                 enum LogColor color,
                 PyObject *component_ptr,
                 PyObject *msg_ptr);

void flush(struct CLogger_t *logger);
