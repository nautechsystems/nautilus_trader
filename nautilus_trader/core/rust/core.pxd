# Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

from libc.stdint cimport uint8_t, uint64_t, uintptr_t

cdef extern from "../includes/core.h":

    # `CVec` is a C compatible struct that stores an opaque pointer to a block of
    # memory, it's length and the capacity of the vector it was allocated from.
    #
    # NOTE: Changing the values here may lead to undefined behavior when the
    # memory is dropped.
    cdef struct CVec:
        # Opaque pointer to block of memory storing elements to access the
        # elements cast it to the underlying type.
        void *ptr;
        # The number of elements in the block.
        uintptr_t len;
        # The capacity of vector from which it was allocated.
        # Used when deallocating the memory
        uintptr_t cap;

    # Represents a pseudo-random UUID (universally unique identifier)
    # version 4 based on a 128-bit label as specified in RFC 4122.
    cdef struct UUID4_t:
        uint8_t value[37];

    # Converts seconds to nanoseconds (ns).
    uint64_t secs_to_nanos(double secs);

    # Converts seconds to milliseconds (ms).
    uint64_t secs_to_millis(double secs);

    # Converts milliseconds (ms) to nanoseconds (ns).
    uint64_t millis_to_nanos(double millis);

    # Converts microseconds (μs) to nanoseconds (ns).
    uint64_t micros_to_nanos(double micros);

    # Converts nanoseconds (ns) to seconds.
    double nanos_to_secs(uint64_t nanos);

    # Converts nanoseconds (ns) to milliseconds (ms).
    uint64_t nanos_to_millis(uint64_t nanos);

    # Converts nanoseconds (ns) to microseconds (μs).
    uint64_t nanos_to_micros(uint64_t nanos);

    # Returns the current seconds since the UNIX epoch.
    double unix_timestamp();

    # Returns the current milliseconds since the UNIX epoch.
    uint64_t unix_timestamp_ms();

    # Returns the current microseconds since the UNIX epoch.
    uint64_t unix_timestamp_us();

    # Returns the current nanoseconds since the UNIX epoch.
    uint64_t unix_timestamp_ns();

    void cvec_drop(CVec cvec);

    CVec cvec_new();

    # Converts a UNIX nanoseconds timestamp to an ISO 8601 formatted C string pointer.
    const char *unix_nanos_to_iso8601_cstr(uint64_t timestamp_ns);

    # Return the decimal precision inferred from the given C string.
    #
    # # Safety
    #
    # - Assumes `ptr` is a valid C string pointer.
    #
    # # Panics
    #
    # - If `ptr` is null.
    uint8_t precision_from_cstr(const char *ptr);

    # Drops the C string memory at the pointer.
    #
    # # Safety
    #
    # - Assumes `ptr` is a valid C string pointer.
    #
    # # Panics
    #
    # - If `ptr` is null.
    void cstr_drop(const char *ptr);

    UUID4_t uuid4_new();

    # Returns a [`UUID4`] from C string pointer.
    #
    # # Safety
    #
    # - Assumes `ptr` is a valid C string pointer.
    #
    # # Panics
    #
    # - If `ptr` cannot be cast to a valid C string.
    UUID4_t uuid4_from_cstr(const char *ptr);

    const char *uuid4_to_cstr(const UUID4_t *uuid);

    uint8_t uuid4_eq(const UUID4_t *lhs, const UUID4_t *rhs);

    uint64_t uuid4_hash(const UUID4_t *uuid);
