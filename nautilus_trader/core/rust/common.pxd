# Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

from cpython.object cimport PyObject
from libc.stdint cimport uint64_t

cdef extern from "../includes/core.h":

    cdef enum LogFormat:
        HEADER,
        GREEN,
        BLUE,
        MAGENTA,
        CYAN,
        YELLOW,
        RED,
        ENDC,
        BOLD,
        UNDERLINE,

    cdef enum LogLevel:
        DBG,
        INF,
        WRN,
        ERR,
        CRT,

    # BufWriter is not C ffi safe
    cdef struct Logger:
        pass

    # C API
    # BufWriter is not C ffi safe. Box logger and pass it to as an opaque
    # pointer. This works because Logger fields don't need to be accessed only
    # functions are called.
    cdef struct CLogger_t:
        Logger *_0;

    void clogger_free(CLogger_t logger);

    # Creates a logger from a valid Python object pointer
    # and a defined logging level
    #
    # # Safety
    #
    # - `ptr` must be borrowed from a valid Python UTF-8 `str`.
    CLogger_t clogger_new(PyObject *ptr, LogLevel level_stdout);

    void debug(CLogger_t *logger,
               uint64_t timestamp_ns,
               LogFormat color,
               const PyObject *component,
               const PyObject *msg);

    void info(CLogger_t *logger,
              uint64_t timestamp_ns,
              LogFormat color,
              const PyObject *component,
              const PyObject *msg);

    void warn(CLogger_t *logger,
              uint64_t timestamp_ns,
              LogFormat color,
              const PyObject *component,
              const PyObject *msg);

    void error(CLogger_t *logger,
               uint64_t timestamp_ns,
               LogFormat color,
               const PyObject *component,
               const PyObject *msg);

    void critical(CLogger_t *logger,
                  uint64_t timestamp_ns,
                  LogFormat color,
                  const PyObject *component,
                  const PyObject *msg);

    void flush(CLogger_t *logger);
