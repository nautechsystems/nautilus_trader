Subject: [PATCH] Updated emulator contingency logic
Allow RELEASED -> CANCELED transition
Add RELEASED -> PENDING_CANCEL state transition
Cleaned changes
Fixed stray Cancel orders
First position OK
---
Index: nautilus_trader/execution/emulator.pyx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus_trader/execution/emulator.pyx b/nautilus_trader/execution/emulator.pyx
--- a/nautilus_trader/execution/emulator.pyx	(revision f6ab1d60cfa8228bd9ffde25fbb52bf823fb313a)
+++ b/nautilus_trader/execution/emulator.pyx	(revision 98d092c2d05ee7e6cbe303885ba3a89c1871c744)
@@ -747,11 +747,12 @@
             # Spawn orders include the original primary order
             exec_spawn_orders = self.cache.orders_for_exec_spawn(order.exec_spawn_id)
             for spawn_order in exec_spawn_orders:
-                raw_quantity += spawn_order.quantity._mem.raw
                 raw_filled_qty += spawn_order.filled_qty._mem.raw
-                raw_leaves_qty += spawn_order.leaves_qty._mem.raw
-                if spawn_order.is_open_c() or spawn_order.status == OrderStatus.RELEASED:
-                    is_spawn_active = True
+                if spawn_order.is_open_c() or spawn_order.is_inflight_c() or \
+                    spawn_order.status in (OrderStatus.INITIALIZED, OrderStatus.EMULATED, OrderStatus.RELEASED):
+                    raw_quantity += spawn_order.quantity._mem.raw
+                    raw_leaves_qty += spawn_order.leaves_qty._mem.raw
+                    is_spawn_active |= True
             quantity = Quantity.from_raw_c(raw_quantity, precision)
             filled_qty = Quantity.from_raw_c(raw_filled_qty, precision)
             leaves_qty = Quantity.from_raw_c(raw_leaves_qty, precision)
@@ -772,8 +773,8 @@
                     self._cancel_order(matching_core, contingent_order)
                 elif raw_filled_qty > 0 and raw_filled_qty != contingent_order.quantity._mem.raw:
                     self._update_order_quantity(contingent_order, filled_qty)
-                elif raw_quantity != contingent_order.quantity._mem.raw:
-                    self._update_order_quantity(contingent_order, quantity)
+                # elif raw_quantity != contingent_order.quantity._mem.raw:
+                #     self._update_order_quantity(contingent_order, quantity)
             elif order.contingency_type == ContingencyType.OUO:
                 if raw_leaves_qty == 0 and order.exec_spawn_id is not None:
                     self._cancel_order(matching_core, contingent_order)
Index: nautilus_trader/backtest/matching_engine.pyx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus_trader/backtest/matching_engine.pyx b/nautilus_trader/backtest/matching_engine.pyx
--- a/nautilus_trader/backtest/matching_engine.pyx	(revision 0b4d9bb5b803e4b59b88d2b0e1623a6f33deffb4)
+++ b/nautilus_trader/backtest/matching_engine.pyx	(revision d223dc730540820c298875355a3baafac779a623)
@@ -1945,7 +1945,7 @@
         for client_order_id in order.linked_order_ids:
             contingent_order = self.cache.order(client_order_id)
             assert contingent_order is not None, "Contingency order not found"
-            if contingent_order.status in (OrderStatus.EMULATED, OrderStatus.RELEASED):
+            if contingent_order.status in (OrderStatus.EMULATED, OrderStatus.RELEASED, OrderStatus.INITIALIZED):
                 continue  # Order is not on the exchange yet
             if not contingent_order.is_closed_c():
                 self.cancel_order(contingent_order, cancel_contingencies=False)
Index: nautilus_trader/model/orders/base.pyx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus_trader/model/orders/base.pyx b/nautilus_trader/model/orders/base.pyx
--- a/nautilus_trader/model/orders/base.pyx	(revision d223dc730540820c298875355a3baafac779a623)
+++ b/nautilus_trader/model/orders/base.pyx	(revision dd9f25c29b9ebffbb08a0ef820a22a30f30c015b)
@@ -85,6 +85,8 @@
     (OrderStatus.EMULATED, OrderStatus.RELEASED): OrderStatus.RELEASED,  # Emulated orders
     (OrderStatus.RELEASED, OrderStatus.SUBMITTED): OrderStatus.SUBMITTED,  # Emulated orders
     (OrderStatus.RELEASED, OrderStatus.DENIED): OrderStatus.DENIED,  # Emulated orders
+    (OrderStatus.RELEASED, OrderStatus.PENDING_CANCEL): OrderStatus.PENDING_CANCEL,  # Execution Algo
+    (OrderStatus.RELEASED, OrderStatus.CANCELED): OrderStatus.CANCELED,  # Execution Algo
     (OrderStatus.SUBMITTED, OrderStatus.PENDING_UPDATE): OrderStatus.PENDING_UPDATE,
     (OrderStatus.SUBMITTED, OrderStatus.PENDING_CANCEL): OrderStatus.PENDING_CANCEL,
     (OrderStatus.SUBMITTED, OrderStatus.REJECTED): OrderStatus.REJECTED,
Index: nautilus_trader/execution/algorithm.pxd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus_trader/execution/algorithm.pxd b/nautilus_trader/execution/algorithm.pxd
--- a/nautilus_trader/execution/algorithm.pxd	(revision 5e637b3054a6d604fad0e30c07fc215995e98ca6)
+++ b/nautilus_trader/execution/algorithm.pxd	(revision dd9f25c29b9ebffbb08a0ef820a22a30f30c015b)
@@ -150,4 +150,5 @@
 
 # -- EGRESS ---------------------------------------------------------------------------------------
 
+    cdef void _send_emulator_command(self, TradingCommand command)
     cdef void _send_risk_command(self, TradingCommand command)
Index: nautilus_trader/execution/algorithm.pyx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nautilus_trader/execution/algorithm.pyx b/nautilus_trader/execution/algorithm.pyx
--- a/nautilus_trader/execution/algorithm.pyx	(revision 5e637b3054a6d604fad0e30c07fc215995e98ca6)
+++ b/nautilus_trader/execution/algorithm.pyx	(revision dd9f25c29b9ebffbb08a0ef820a22a30f30c015b)
@@ -952,7 +952,7 @@
             return  # Cannot send command
 
         cdef OrderPendingCancel event
-        if order.status != OrderStatus.INITIALIZED and not order.is_emulated_c():
+        if order.status not in (OrderStatus.INITIALIZED, OrderStatus.RELEASED) and not order.is_emulated_c():
             # Generate and apply event
             event = self._generate_order_pending_cancel(order)
             try:
@@ -979,7 +979,7 @@
             client_id=client_id,
         )
 
-        if order.is_emulated_c():
+        if order.is_emulated_c() or order.status_c() == OrderStatus.RELEASED:
             self._send_emulator_command(command)
         else:
             self._send_risk_command(command)
@@ -1016,6 +1016,11 @@
 
 # -- EGRESS ---------------------------------------------------------------------------------------
 
+    cdef void _send_emulator_command(self, TradingCommand command):
+        if not self.log.is_bypassed:
+            self.log.info(f"{CMD}{SENT} {command}.")
+        self._msgbus.send(endpoint="OrderEmulator.execute", msg=command)
+
     cdef void _send_risk_command(self, TradingCommand command):
         if not self.log.is_bypassed:
             self.log.info(f"{CMD}{SENT} {command}.")
