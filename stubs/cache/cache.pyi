from collections import deque
from datetime import datetime
from decimal import Decimal
from typing import Any

from nautilus_trader.cache.config import CacheConfig
from nautilus_trader.core import nautilus_pyo3
from nautilus_trader.model.enums import OmsType
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import OrderStatus
from nautilus_trader.model.enums import PositionSide
from nautilus_trader.model.enums import PriceType
from stubs.accounting.accounts.base import Account
from stubs.cache.base import CacheFacade
from stubs.cache.facade import CacheDatabaseFacade
from stubs.common.actor import Actor
from stubs.model.book import OrderBook
from stubs.model.data import Bar
from stubs.model.data import BarType
from stubs.model.data import IndexPriceUpdate
from stubs.model.data import MarkPriceUpdate
from stubs.model.data import QuoteTick
from stubs.model.data import TradeTick
from stubs.model.identifiers import AccountId
from stubs.model.identifiers import ClientId
from stubs.model.identifiers import ClientOrderId
from stubs.model.identifiers import ComponentId
from stubs.model.identifiers import ExecAlgorithmId
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import OrderListId
from stubs.model.identifiers import PositionId
from stubs.model.identifiers import StrategyId
from stubs.model.identifiers import Venue
from stubs.model.identifiers import VenueOrderId
from stubs.model.instruments.base import Instrument
from stubs.model.instruments.synthetic import SyntheticInstrument
from stubs.model.objects import Currency
from stubs.model.objects import Money
from stubs.model.objects import Price
from stubs.model.objects import Quantity
from stubs.model.orders.base import Order
from stubs.model.orders.list import OrderList
from stubs.model.position import Position
from stubs.trading.strategy import Strategy

class Cache(CacheFacade):

    _database: CacheDatabaseFacade | None
    _log: Any
    _drop_instruments_on_reset: bool
    has_backing: bool
    tick_capacity: int
    bar_capacity: int
    _specific_venue: Venue | None
    _general: dict[str, bytes]
    _currencies: dict[str, Currency]
    _instruments: dict[InstrumentId, Instrument]
    _synthetics: dict[InstrumentId, SyntheticInstrument]
    _order_books: dict[InstrumentId, OrderBook]
    _own_order_books: dict[InstrumentId, nautilus_pyo3.OwnOrderBook]
    _quote_ticks: dict[InstrumentId, deque[QuoteTick]]
    _trade_ticks: dict[InstrumentId, deque[TradeTick]]
    _xrate_symbols: dict[InstrumentId, str]
    _mark_xrates: dict[tuple[Currency, Currency], float]
    _mark_prices: dict[InstrumentId, MarkPriceUpdate]
    _index_prices: dict[InstrumentId, IndexPriceUpdate]
    _bars: dict[BarType, deque[Bar]]
    _bars_bid: dict[InstrumentId, Bar]
    _bars_ask: dict[InstrumentId, Bar]
    _accounts: dict[AccountId, Account]
    _orders: dict[ClientOrderId, Order]
    _order_lists: dict[OrderListId, OrderList]
    _positions: dict[PositionId, Position]
    _position_snapshots: dict[PositionId, list[bytes]]
    _greeks: dict[InstrumentId, object]
    _yield_curves: dict[str, object]
    _index_venue_account: dict[Venue, AccountId]
    _index_venue_orders: dict[Venue, set[ClientOrderId]]
    _index_venue_positions: dict[Venue, set[PositionId]]
    _index_venue_order_ids: dict[VenueOrderId, ClientOrderId]
    _index_client_order_ids: dict[ClientOrderId, VenueOrderId]
    _index_order_position: dict[ClientOrderId, PositionId]
    _index_order_strategy: dict[ClientOrderId, StrategyId]
    _index_order_client: dict[ClientOrderId, ClientId]
    _index_position_strategy: dict[PositionId, StrategyId]
    _index_position_orders: dict[PositionId, set[ClientOrderId]]
    _index_instrument_orders: dict[InstrumentId, set[ClientOrderId]]
    _index_instrument_positions: dict[InstrumentId, set[PositionId]]
    _index_strategy_orders: dict[StrategyId, set[ClientOrderId]]
    _index_strategy_positions: dict[StrategyId, set[PositionId]]
    _index_exec_algorithm_orders: dict[ExecAlgorithmId, set[ClientOrderId]]
    _index_exec_spawn_orders: dict[ClientOrderId, set[ClientOrderId]]
    _index_orders: set[ClientOrderId]
    _index_orders_open: set[ClientOrderId]
    _index_orders_open_pyo3: set[nautilus_pyo3.ClientOrderId]
    _index_orders_closed: set[ClientOrderId]
    _index_orders_emulated: set[ClientOrderId]
    _index_orders_inflight: set[ClientOrderId]
    _index_orders_pending_cancel: set[ClientOrderId]
    _index_positions: set[PositionId]
    _index_positions_open: set[PositionId]
    _index_positions_closed: set[PositionId]
    _index_actors: set[ComponentId]
    _index_strategies: set[StrategyId]
    _index_exec_algorithms: set[ExecAlgorithmId]

    def __init__(self, database: CacheDatabaseFacade | None = None, config: CacheConfig | None = None) -> None: ...
    def set_specific_venue(self, venue: Venue) -> None: ...
    def cache_all(self) -> None: ...
    def cache_general(self) -> None: ...
    def cache_currencies(self) -> None: ...
    def cache_instruments(self) -> None: ...
    def cache_synthetics(self) -> None: ...
    def cache_accounts(self) -> None: ...
    def cache_orders(self) -> None: ...
    def cache_order_lists(self) -> None: ...
    def cache_positions(self) -> None: ...
    def build_index(self) -> None: ...
    def check_integrity(self) -> bool: ...
    def check_residuals(self) -> bool: ...
    def purge_closed_orders(
        self,
        ts_now: int,
        buffer_secs: int = 0,
        purge_from_database: bool = False,
    ) -> None: ...
    def purge_closed_positions(
        self,
        ts_now: int,
        buffer_secs: int = 0,
        purge_from_database: bool = False,
    ) -> None: ...
    def purge_order(self, client_order_id: ClientOrderId, purge_from_database: bool = False) -> None: ...
    def purge_position(self, position_id: PositionId, purge_from_database: bool = False) -> None: ...
    def purge_account_events(
        self,
        ts_now: int,
        lookback_secs: int = 0,
        purge_from_database: bool = False,
    ) -> None: ...
    def clear_index(self) -> None: ...
    def reset(self) -> None: ...
    def dispose(self) -> None: ...
    def flush_db(self) -> None: ...
    def calculate_unrealized_pnl(self, position: Position) -> Money | None: ...
    def load_actor(self, actor: Actor) -> None: ...
    def load_strategy(self, strategy: Strategy) -> None: ...
    def load_instrument(self, instrument_id: InstrumentId) -> Instrument | None: ...
    def load_synthetic(self, instrument_id: InstrumentId) -> SyntheticInstrument | None: ...
    def load_account(self, account_id: AccountId) -> Account | None: ...
    def load_order(self, client_order_id: ClientOrderId) -> Order | None: ...
    def load_position(self, position_id: PositionId) -> Position | None: ...
    def add(self, key: str, value: bytes) -> None: ...
    def add_order_book(self, order_book: OrderBook) -> None: ...
    def add_own_order_book(self, own_order_book) -> None: ...
    def add_quote_tick(self, tick: QuoteTick) -> None: ...
    def add_trade_tick(self, tick: TradeTick) -> None: ...
    def add_mark_price(self, mark_price: MarkPriceUpdate) -> None: ...
    def add_index_price(self, index_price: IndexPriceUpdate) -> None: ...
    def add_bar(self, bar: Bar) -> None: ...
    def add_quote_ticks(self, ticks: list[QuoteTick]) -> None: ...
    def add_trade_ticks(self, ticks: list[TradeTick]) -> None: ...
    def add_bars(self, bars: list[Bar]) -> None: ...
    def add_currency(self, currency: Currency) -> None: ...
    def add_instrument(self, instrument: Instrument) -> None: ...
    def add_synthetic(self, synthetic: SyntheticInstrument) -> None: ...
    def add_account(self, account: Account) -> None: ...
    def add_venue_order_id(
        self,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId,
        overwrite: bool = False,
    ) -> None: ...
    def add_order(
        self,
        order: Order,
        position_id: PositionId | None = None,
        client_id: ClientId | None = None,
        overwrite: bool = False,
    ) -> None: ...
    def add_order_list(self, order_list: OrderList) -> None: ...
    def add_position_id(
        self,
        position_id: PositionId,
        venue: Venue,
        client_order_id: ClientOrderId,
        strategy_id: StrategyId,
    ) -> None: ...
    def add_position(self, position: Position, oms_type: OmsType) -> None: ...
    def add_greeks(self, greeks: object) -> None: ...
    def add_yield_curve(self, yield_curve: object) -> None: ...
    def greeks(self, instrument_id: InstrumentId) -> object | None: ...
    def yield_curve(self, curve_name: str) -> object | None: ...
    def snapshot_position(self, position: Position) -> None: ...
    def snapshot_position_state(
        self,
        position: Position,
        ts_snapshot: int,
        unrealized_pnl: Money | None = None,
        open_only: bool = True,
    ) -> None: ...
    def snapshot_order_state(self, order: Order) -> None: ...
    def update_account(self, account: Account) -> None: ...
    def update_order(self, order: Order) -> None: ...
    def update_order_pending_cancel_local(self, order: Order) -> None: ...
    def update_own_order_book(self, order: Order) -> None: ...
    def update_position(self, position: Position) -> None: ...
    def update_actor(self, actor: Actor) -> None: ...
    def update_strategy(self, strategy: Strategy) -> None: ...
    def delete_actor(self, actor: Actor) -> None: ...
    def delete_strategy(self, strategy: Strategy) -> None: ...
    def get(self, key: str) -> bytes | None: ...
    def quote_ticks(self, instrument_id: InstrumentId) -> list[QuoteTick]: ...
    def trade_ticks(self, instrument_id: InstrumentId) -> list[TradeTick]: ...
    def mark_prices(self, instrument_id: InstrumentId) -> list[MarkPriceUpdate]: ...
    def index_prices(self, instrument_id: InstrumentId) -> list[IndexPriceUpdate]: ...
    def bars(self, bar_type: BarType) -> list[Bar]: ...
    def price(self, instrument_id: InstrumentId, price_type: PriceType) -> Price | None: ...
    def prices(self, price_type: PriceType) -> dict[InstrumentId, Price]: ...
    def order_book(self, instrument_id: InstrumentId) -> OrderBook | None: ...
    def own_order_book(self, instrument_id: InstrumentId) -> nautilus_pyo3.OwnOrderBook | None: ...
    def own_bid_orders(
        self,
        instrument_id: InstrumentId,
        status: set[OrderStatus] | None = None,
        accepted_buffer_ns: int = 0,
        ts_now: int = 0,
    ) -> dict[Decimal, list[Order]] | None: ...
    def own_ask_orders(
        self,
        instrument_id: InstrumentId,
        status: set[OrderStatus] | None = None,
        accepted_buffer_ns: int = 0,
        ts_now: int = 0,
    ) -> dict[Decimal, list[Order]] | None: ...
    def quote_tick(self, instrument_id: InstrumentId, index: int = 0) -> QuoteTick | None: ...
    def trade_tick(self, instrument_id: InstrumentId, index: int = 0) -> TradeTick | None: ...
    def mark_price(self, instrument_id: InstrumentId, index: int = 0) -> MarkPriceUpdate | None: ...
    def index_price(self, instrument_id: InstrumentId, index: int = 0) -> IndexPriceUpdate | None: ...
    def bar(self, bar_type: BarType, index: int = 0) -> Bar | None: ...
    def book_update_count(self, instrument_id: InstrumentId) -> int: ...
    def quote_tick_count(self, instrument_id: InstrumentId) -> int: ...
    def trade_tick_count(self, instrument_id: InstrumentId) -> int: ...
    def mark_price_count(self, instrument_id: InstrumentId) -> int: ...
    def index_price_count(self, instrument_id: InstrumentId) -> int: ...
    def bar_count(self, bar_type: BarType) -> int: ...
    def has_order_book(self, instrument_id: InstrumentId) -> bool: ...
    def has_quote_ticks(self, instrument_id: InstrumentId) -> bool: ...
    def has_trade_ticks(self, instrument_id: InstrumentId) -> bool: ...
    def has_mark_prices(self, instrument_id: InstrumentId) -> bool: ...
    def has_index_prices(self, instrument_id: InstrumentId) -> bool: ...
    def has_bars(self, bar_type: BarType) -> bool: ...
    def get_xrate(
        self,
        venue: Venue,
        from_currency: Currency,
        to_currency: Currency,
        price_type: PriceType = ...,
    ) -> float | None: ...
    def get_mark_xrate(self, from_currency: Currency, to_currency: Currency) -> float | None: ...
    def set_mark_xrate(self, from_currency: Currency, to_currency: Currency, xrate: float) -> None: ...
    def clear_mark_xrate(self, from_currency: Currency, to_currency: Currency) -> None: ...
    def clear_mark_xrates(self) -> None: ...
    def instrument(self, instrument_id: InstrumentId) -> Instrument | None: ...
    def instrument_ids(self, venue: Venue | None = None) -> list[InstrumentId]: ...
    def instruments(self, venue: Venue | None = None, underlying: str | None = None) -> list[Instrument]: ...
    def bar_types(
        self,
        instrument_id: InstrumentId | None = None,
        price_type: PriceType | None = None,
        aggregation_source = None,
    ) -> list[BarType]: ...
    def synthetic(self, instrument_id: InstrumentId) -> SyntheticInstrument | None: ...
    def synthetic_ids(self) -> list[InstrumentId]: ...
    def synthetics(self) -> list[SyntheticInstrument]: ...
    def account(self, account_id: AccountId) -> Account | None: ...
    def account_for_venue(self, venue: Venue) -> Account | None: ...
    def account_id(self, venue: Venue) -> AccountId | None: ...
    def accounts(self) -> list[Account]: ...
    def client_order_ids(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[ClientOrderId]: ...
    def client_order_ids_open(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[ClientOrderId]: ...
    def client_order_ids_closed(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[ClientOrderId]: ...
    def client_order_ids_emulated(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[ClientOrderId]: ...
    def client_order_ids_inflight(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[ClientOrderId]: ...
    def order_list_ids(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[OrderListId]: ...
    def position_ids(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[PositionId]: ...
    def position_open_ids(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[PositionId]: ...
    def position_closed_ids(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> set[PositionId]: ...
    def actor_ids(self) -> set[ComponentId]: ...
    def strategy_ids(self) -> set[StrategyId]: ...
    def exec_algorithm_ids(self) -> set[ExecAlgorithmId]: ...
    def order(self, client_order_id: ClientOrderId) -> Order | None: ...
    def client_order_id(self, venue_order_id: VenueOrderId) -> ClientOrderId | None: ...
    def venue_order_id(self, client_order_id: ClientOrderId) -> VenueOrderId | None: ...
    def client_id(self, client_order_id: ClientOrderId) -> ClientId | None: ...
    def orders(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_open(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_closed(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_emulated(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_inflight(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_for_position(self, position_id: PositionId) -> list[Order]: ...
    def order_exists(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_open(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_closed(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_emulated(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_inflight(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_pending_cancel_local(self, client_order_id: ClientOrderId) -> bool: ...
    def orders_open_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> int: ...
    def orders_closed_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> int: ...
    def orders_emulated_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> int: ...
    def orders_inflight_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> int: ...
    def orders_total_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> int: ...
    def order_list(self, order_list_id: OrderListId) -> OrderList | None: ...
    def order_lists(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> list[OrderList]: ...
    def order_list_exists(self, order_list_id: OrderListId) -> bool: ...
    def orders_for_exec_algorithm(
        self,
        exec_algorithm_id: ExecAlgorithmId,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: OrderSide = ...,
    ) -> list[Order]: ...
    def orders_for_exec_spawn(self, exec_spawn_id: ClientOrderId) -> list[Order]: ...
    def exec_spawn_total_quantity(self, exec_spawn_id: ClientOrderId, active_only: bool = False) -> Quantity | None: ...
    def exec_spawn_total_filled_qty(self, exec_spawn_id: ClientOrderId, active_only: bool = False) -> Quantity | None: ...
    def exec_spawn_total_leaves_qty(self, exec_spawn_id: ClientOrderId, active_only: bool = False) -> Quantity | None: ...
    def position(self, position_id: PositionId) -> Position | None: ...
    def position_for_order(self, client_order_id: ClientOrderId) -> Position | None: ...
    def position_id(self, client_order_id: ClientOrderId) -> PositionId | None: ...
    def position_snapshots(self, position_id: PositionId | None = None) -> list[Any]: ...
    def positions(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: PositionSide = ...,
    ) -> list[Any]: ...
    def positions_open(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: PositionSide = ...,
    ) -> list[Any]: ...
    def positions_closed(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> list[Any]: ...
    def position_exists(self, position_id: PositionId) -> bool: ...
    def is_position_open(self, position_id: PositionId) -> bool: ...
    def is_position_closed(self, position_id: PositionId) -> bool: ...
    def positions_open_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: PositionSide = ...,
    ) -> int: ...
    def positions_closed_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
    ) -> int: ...
    def positions_total_count(
        self,
        venue: Venue | None = None,
        instrument_id: InstrumentId | None = None,
        strategy_id: StrategyId | None = None,
        side: PositionSide = ...,
    ) -> int: ...
    def strategy_id_for_order(self, client_order_id: ClientOrderId) -> StrategyId | None: ...
    def strategy_id_for_position(self, position_id: PositionId) -> StrategyId | None: ...
    def heartbeat(self, timestamp: datetime) -> None: ...
    def audit_own_order_books(self) -> None: ...

def process_own_order_map(
    own_order_map: dict[Decimal, list[nautilus_pyo3.OwnBookOrder]],
    order_cache: dict[ClientOrderId, Order],
) -> dict[Decimal, list[Order]]: ...
