from typing import Any, ClassVar
from nautilus_trader.core.nautilus_pyo3 import Account
from nautilus_trader.core.nautilus_pyo3 import AccountId
from nautilus_trader.core.nautilus_pyo3 import Bar
from nautilus_trader.core.nautilus_pyo3 import BarType
from nautilus_trader.core.nautilus_pyo3 import ClientId
from nautilus_trader.core.nautilus_pyo3 import ClientOrderId
from nautilus_trader.core.nautilus_pyo3 import Currency
from nautilus_trader.core.nautilus_pyo3 import Instrument
from nautilus_trader.core.nautilus_pyo3 import InstrumentId
from nautilus_trader.core.nautilus_pyo3 import Money
from nautilus_trader.core.nautilus_pyo3 import Order
from nautilus_trader.core.nautilus_pyo3 import Position
from nautilus_trader.core.nautilus_pyo3 import PositionId
from nautilus_trader.core.nautilus_pyo3 import StrategyId
from nautilus_trader.core.nautilus_pyo3 import VenueOrderId
from nautilus_trader.cache.config import CacheConfig
from nautilus_trader.core.nautilus_pyo3 import SyntheticInstrument
import datetime

class CacheDatabaseFacade:
    """
    The base class for all cache databases.

    Parameters
    ----------
    config : CacheConfig, optional
        The configuration for the database.

    Warnings
    --------
    This class should not be used directly, but through a concrete subclass.
    """

    def __init__(self, config: CacheConfig | None = None) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def keys(self, pattern: str = "*") -> list[str]: ...
    def load_all(self) -> dict: ...
    def load(self) -> dict: ...
    def load_currencies(self) -> dict: ...
    def load_instruments(self) -> dict: ...
    def load_synthetics(self) -> dict: ...
    def load_accounts(self) -> dict: ...
    def load_orders(self) -> dict: ...
    def load_positions(self) -> dict: ...
    def load_index_order_position(self) -> dict: ...
    def load_index_order_client(self) -> dict: ...
    def load_currency(self, code: str) -> Currency: ...
    def load_instrument(self, instrument_id: InstrumentId) -> Instrument: ...
    def load_synthetic(self, instrument_id: InstrumentId) -> SyntheticInstrument: ...
    def load_account(self, account_id: AccountId) -> Account: ...
    def load_order(self, client_order_id: ClientOrderId) -> Order: ...
    def load_position(self, position_id: PositionId) -> Position: ...
    def load_actor(self, component_id: Any) -> dict: ...
    def load_strategy(self, strategy_id: StrategyId) -> dict: ...
    def add(self, key: str, value: bytes) -> None: ...
    def add_currency(self, currency: Currency) -> None: ...
    def add_instrument(self, instrument: Instrument) -> None: ...
    def add_synthetic(self, synthetic: SyntheticInstrument) -> None: ...
    def add_account(self, account: Account) -> None: ...
    def add_order(self, order: Order, position_id: PositionId | None = None, client_id: ClientId | None = None) -> None: ...
    def add_position(self, position: Position) -> None: ...
    def index_venue_order_id(self, client_order_id: ClientOrderId, venue_order_id: VenueOrderId) -> None: ...
    def index_order_position(self, client_order_id: ClientOrderId, position_id: PositionId) -> None: ...
    def update_account(self, event: Account) -> None: ...
    def update_order(self, order: Order) -> None: ...
    def update_position(self, position: Position) -> None: ...
    def update_actor(self, actor: Any) -> None: ...
    def update_strategy(self, strategy: Any) -> None: ...
    def snapshot_order_state(self, order: Order) -> None: ...
    def snapshot_position_state(self, position: Position, ts_snapshot: int, unrealized_pnl: Money | None = None) -> None: ...
    def delete_order(self, client_order_id: ClientOrderId) -> None: ...
    def delete_position(self, position_id: PositionId) -> None: ...
    def delete_account_event(self, account_id: AccountId, event_id: str) -> None: ...
    def delete_actor(self, component_id: Any) -> None: ...
    def delete_strategy(self, strategy_id: StrategyId) -> None: ...
    def heartbeat(self, timestamp: datetime.datetime) -> None: ...