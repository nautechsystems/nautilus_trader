from nautilus_trader.model.enums import AccountType
from nautilus_trader.model.enums import LiquiditySide
from nautilus_trader.model.enums import OrderSide
from stubs.model.events.account import AccountState
from stubs.model.events.order import OrderFilled
from stubs.model.identifiers import AccountId
from stubs.model.identifiers import InstrumentId
from stubs.model.instruments.base import Instrument
from stubs.model.objects import AccountBalance
from stubs.model.objects import Currency
from stubs.model.objects import Money
from stubs.model.objects import Price
from stubs.model.objects import Quantity
from stubs.model.position import Position

class Account:

    id: AccountId
    type: AccountType
    base_currency: Currency | None
    is_cash_account: bool
    is_margin_account: bool
    calculate_account_state: bool
    _events: list[AccountState]
    _commissions: dict[Currency, Money]
    _balances: dict[Currency, AccountBalance]
    _balances_starting: dict[Currency, Money]

    def __init__(self, event: AccountState, calculate_account_state: bool) -> None: ...
    def __eq__(self, other: Account) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    @property
    def last_event(self) -> AccountState: ...
    @property
    def events(self) -> list[AccountState]: ...
    @property
    def event_count(self) -> int: ...
    def currencies(self) -> list[Currency]: ...
    def starting_balances(self) -> dict[Currency, Money]: ...
    def balances(self) -> dict[Currency, AccountBalance]: ...
    def balances_total(self) -> dict[Currency, Money]: ...
    def balances_free(self) -> dict[Currency, Money]: ...
    def balances_locked(self) -> dict[Currency, Money]: ...
    def commissions(self) -> dict[Currency, Money]: ...
    def balance(self, currency: Currency | None = None) -> AccountBalance | None: ...
    def balance_total(self, currency: Currency | None = None) -> Money | None: ...
    def balance_free(self, currency: Currency | None = None) -> Money | None: ...
    def balance_locked(self, currency: Currency | None = None) -> Money | None: ...
    def commission(self, currency: Currency) -> Money | None: ...
    def apply(self, event: AccountState) -> None: ...
    def update_balances(self, balances: list[AccountBalance]) -> None: ...
    def update_commissions(self, commission: Money) -> None: ...
    def purge_account_events(self, ts_now: int, lookback_secs: int = 0) -> None: ...
    def is_unleveraged(self, instrument_id: InstrumentId) -> bool: ...
    def calculate_commission(self, instrument: Instrument, last_qty: Quantity, last_px: Price, liquidity_side: LiquiditySide, use_quote_for_inverse: bool = False) -> Money: ...
    def calculate_pnls(self, instrument: Instrument, fill: OrderFilled, position: Position | None = None) -> list: ...
    def balance_impact(self, instrument: Instrument, quantity: Quantity, price: Price, order_side: OrderSide) -> Money: ...
