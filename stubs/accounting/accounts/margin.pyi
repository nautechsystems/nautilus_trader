from decimal import Decimal
from typing import Any

from nautilus_trader.model.enums import LiquiditySide
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import PositionSide
from stubs.accounting.accounts.base import Account
from stubs.model.events.account import AccountState
from stubs.model.events.order import OrderFilled
from stubs.model.identifiers import InstrumentId
from stubs.model.instruments.base import Instrument
from stubs.model.objects import MarginBalance
from stubs.model.objects import Money
from stubs.model.objects import Price
from stubs.model.objects import Quantity
from stubs.model.position import Position

class MarginAccount(Account):

    default_leverage: Decimal
    _leverages: dict[InstrumentId, Decimal]
    _margins: dict[InstrumentId, MarginBalance]

    def __init__(self, event: AccountState, calculate_account_state: bool = False) -> None: ...
    @staticmethod
    def to_dict(obj: MarginAccount) -> dict: ...
    @staticmethod
    def from_dict(values: dict) -> Any: ...
    def margins(self) -> dict[InstrumentId, Money]: ...
    def margins_init(self) -> dict[InstrumentId, Money]: ...
    def margins_maint(self) -> dict[InstrumentId, Money]: ...
    def leverages(self) -> dict[InstrumentId, Decimal]: ...
    def leverage(self, instrument_id: InstrumentId) -> Decimal | None: ...
    def margin_init(self, instrument_id: InstrumentId) -> Money | None: ...
    def margin_maint(self, instrument_id: InstrumentId) -> Money | None: ...
    def margin(self, instrument_id: InstrumentId) -> MarginBalance | None: ...
    def set_default_leverage(self, leverage: Decimal) -> None: ...
    def set_leverage(self, instrument_id: InstrumentId, leverage: Decimal) -> None: ...
    def update_margin_init(self, instrument_id: InstrumentId, margin_init: Money) -> None: ...
    def update_margin_maint(self, instrument_id: InstrumentId, margin_maint: Money) -> None: ...
    def update_margin(self, margin: MarginBalance) -> None: ...
    def clear_margin_init(self, instrument_id: InstrumentId) -> None: ...
    def clear_margin_maint(self, instrument_id: InstrumentId) -> None: ...
    def clear_margin(self, instrument_id: InstrumentId) -> None: ...
    def is_unleveraged(self, instrument_id: InstrumentId) -> bool: ...
    def calculate_commission(
        self,
        instrument: Instrument,
        last_qty: Quantity,
        last_px: Price,
        liquidity_side: LiquiditySide,
        use_quote_for_inverse: bool = False,
    ) -> Money: ...
    def calculate_margin_init(
        self,
        instrument: Instrument,
        quantity: Quantity,
        price: Price,
        use_quote_for_inverse: bool = False,
    ) -> Money: ...
    def calculate_margin_maint(
        self,
        instrument: Instrument,
        side: PositionSide,
        quantity: Quantity,
        price: Price,
        use_quote_for_inverse: bool = False,
    ) -> Money: ...
    def calculate_pnls(self, instrument: Instrument, fill: OrderFilled, position: Position | None = None) -> list[Money]: ...
    def balance_impact(self, instrument: Instrument, quantity: Quantity, price: Price, order_side: OrderSide) -> Money: ...
