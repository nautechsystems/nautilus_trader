from collections.abc import Callable
from typing import Any

from stubs.core.uuid import UUID4

class Command:

    id: UUID4
    ts_init: int

    def __init__(
        self,
        command_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __eq__(self, other: Command) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class Document:

    id: UUID4
    ts_init: int

    def __init__(
        self,
        document_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __eq__(self, other: Document) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...


class Event:

    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...


class Request:

    callback: Callable[[Any], None]
    id: UUID4
    ts_init: int

    def __init__(
        self,
        callback: Callable[[Any], None],
        request_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __eq__(self, other: Request) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...


class Response:

    correlation_id: UUID4
    id: UUID4
    ts_init: int

    def __init__(
        self,
        correlation_id: UUID4,
        response_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __eq__(self, other: Response) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
