from stubs.common.component import Clock
from stubs.model.identifiers import ClientOrderId
from stubs.model.identifiers import OrderListId
from stubs.model.identifiers import PositionId
from stubs.model.identifiers import StrategyId
from stubs.model.identifiers import TraderId

class IdentifierGenerator:

    def __init__(self, trader_id: TraderId, clock: Clock) -> None: ...


class ClientOrderIdGenerator(IdentifierGenerator):

    count: int
    use_uuids: bool
    use_hyphens: bool
    _id_tag_strategy: str

    def __init__(self, trader_id: TraderId, strategy_id: StrategyId, clock: Clock, initial_count: int = 0, use_uuids: bool = False, use_hyphens: bool = True) -> None: ...
    def set_count(self, count: int) -> None: ...
    def generate(self) -> ClientOrderId: ...
    def reset(self) -> None: ...


class OrderListIdGenerator(IdentifierGenerator):

    count: int
    _id_tag_strategy: str

    def __init__(self, trader_id: TraderId, strategy_id: StrategyId, clock: Clock, initial_count: int = 0) -> None: ...
    def set_count(self, count: int) -> None: ...
    def generate(self) -> OrderListId: ...
    def reset(self) -> None: ...


class PositionIdGenerator(IdentifierGenerator):

    _counts: dict[StrategyId, int]

    def __init__(self, trader_id: TraderId, clock: Clock) -> None: ...
    def set_count(self, strategy_id: StrategyId, count: int) -> None: ...
    def get_count(self, strategy_id: StrategyId) -> int: ...
    def generate(self, strategy_id: StrategyId, flipped: bool = False) -> PositionId: ...
    def reset(self) -> None: ...
