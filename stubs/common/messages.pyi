from typing import Any

from nautilus_trader.common.enums import ComponentState
from nautilus_trader.model.enums import TradingState
from stubs.core.message import Command
from stubs.core.message import Event
from stubs.core.uuid import UUID4
from stubs.model.identifiers import Identifier
from stubs.model.identifiers import TraderId

class ShutdownSystem(Command):

    def __init__(
        self,
        trader_id: TraderId,
        component_id: Identifier,
        command_id: UUID4,
        ts_init: int,
        reason: str | None = None,
    ) -> None: ...
    def __eq__(self, other: Command) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> ShutdownSystem: ...
    @staticmethod
    def to_dict(obj: ShutdownSystem) -> dict[str, Any]: ...

class ComponentStateChanged(Event):

    def __init__(
        self,
        trader_id: TraderId,
        component_id: Identifier,
        component_type: str,
        state: ComponentState,
        config: dict[str, Any],
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> ComponentStateChanged: ...
    @staticmethod
    def to_dict(obj: ComponentStateChanged) -> dict[str, Any]: ...


class RiskEvent(Event):

    def __init__(
        self,
        trader_id: TraderId,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...


class TradingStateChanged(RiskEvent):

    def __init__(
        self,
        trader_id: TraderId,
        state: TradingState,
        config: dict[str, Any],
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> TradingStateChanged: ...
    @staticmethod
    def to_dict(obj: TradingStateChanged) -> dict[str, Any]: ...
