from typing import Any

from nautilus_trader.core.nautilus_pyo3 import Account
from nautilus_trader.core.nautilus_pyo3 import InstrumentId
from nautilus_trader.core.nautilus_pyo3 import Money
from nautilus_trader.core.nautilus_pyo3 import Price
from nautilus_trader.core.nautilus_pyo3 import Venue

class PortfolioFacade:
    """
    Provides a read-only facade for a `Portfolio`.
    """

    def account(self, venue: Venue) -> Account: ...
    def balances_locked(self, venue: Venue) -> dict[Any, Any]: ...
    def margins_init(self, venue: Venue) -> dict[Any, Any]: ...
    def margins_maint(self, venue: Venue) -> dict[Any, Any]: ...
    def realized_pnls(self, venue: Venue) -> dict[Any, Any]: ...
    def unrealized_pnls(self, venue: Venue) -> dict[Any, Any]: ...
    def total_pnls(self, venue: Venue) -> dict[Any, Any]: ...
    def net_exposures(self, venue: Venue) -> dict[Any, Any]: ...
    def realized_pnl(self, instrument_id: InstrumentId) -> Money: ...
    def unrealized_pnl(self, instrument_id: InstrumentId, price: Price | None = None) -> Money: ...
    def total_pnl(self, instrument_id: InstrumentId, price: Price | None = None) -> Money: ...
    def net_exposure(self, instrument_id: InstrumentId, price: Price | None = None) -> Money: ...
    def net_position(self, instrument_id: InstrumentId) -> object: ...
    def is_net_long(self, instrument_id: InstrumentId) -> bool: ...
    def is_net_short(self, instrument_id: InstrumentId) -> bool: ...
    def is_flat(self, instrument_id: InstrumentId) -> bool: ...
    def is_completely_flat(self) -> bool: ...