from decimal import Decimal
from typing import Any

from nautilus_trader.analysis.analyzer import PortfolioAnalyzer
from nautilus_trader.portfolio.config import PortfolioConfig
from stubs.accounting.accounts.base import Account
from stubs.accounting.manager import AccountsManager
from stubs.cache.base import CacheFacade
from stubs.common.component import Clock
from stubs.common.component import Logger
from stubs.common.component import MessageBus
from stubs.model.data import Bar
from stubs.model.data import QuoteTick
from stubs.model.events.account import AccountState
from stubs.model.events.order import OrderEvent
from stubs.model.events.position import PositionEvent
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import PositionId
from stubs.model.identifiers import Venue
from stubs.model.objects import Currency
from stubs.model.objects import Money
from stubs.model.objects import Price
from stubs.portfolio.base import PortfolioFacade

class Portfolio(PortfolioFacade):

    analyzer: PortfolioAnalyzer
    initialized: bool

    _clock: Clock
    _log: Logger
    _msgbus: MessageBus
    _cache: CacheFacade
    _accounts: AccountsManager

    _config: PortfolioConfig
    _debug: bool
    _use_mark_prices: bool
    _use_mark_xrates: bool
    _convert_to_account_base_currency: bool
    _log_price: str
    _log_xrate: str
    _realized_pnls: dict[InstrumentId, Money]
    _unrealized_pnls: dict[InstrumentId, Money]
    _net_positions: dict[InstrumentId, Decimal]
    _bet_positions: dict[InstrumentId, Any]
    _index_bet_positions: dict[InstrumentId, set[PositionId]]
    _pending_calcs: set[InstrumentId]
    _bar_close_prices: dict[InstrumentId, Price]

    def __init__(
        self,
        msgbus: MessageBus,
        cache: CacheFacade,
        clock: Clock,
        config: PortfolioConfig | None = None,
    ) -> None: ...
    def set_use_mark_prices(self, value: bool) -> None: ...
    def set_use_mark_xrates(self, value: bool) -> None: ...
    def set_specific_venue(self, venue: Venue) -> None: ...
    def initialize_orders(self) -> None: ...
    def initialize_positions(self) -> None: ...
    def update_quote_tick(self, tick: QuoteTick) -> None: ...
    def update_mark_price(self, mark_price: object) -> None: ...
    def update_bar(self, bar: Bar) -> None: ...
    def update_account(self, event: AccountState) -> None: ...
    def update_order(self, event: OrderEvent) -> None: ...
    def update_position(self, event: PositionEvent) -> None: ...
    def on_order_event(self, event: OrderEvent) -> None: ...
    def on_position_event(self, event: PositionEvent) -> None: ...
    def _reset(self) -> None: ...
    def reset(self) -> None: ...
    def dispose(self) -> None: ...
    def account(self, venue: Venue) -> Account | None: ...
    def balances_locked(self, venue: Venue) -> dict[Currency, Money] | None: ...
    def margins_init(self, venue: Venue) -> dict[Currency, Money] | None: ...
    def margins_maint(self, venue: Venue) -> dict[Currency, Money] | None: ...
    def realized_pnls(self, venue: Venue) -> dict[Currency, Money]: ...
    def unrealized_pnls(self, venue: Venue) -> dict[Currency, Money]: ...
    def total_pnls(self, venue: Venue) -> dict[Currency, Money]: ...
    def net_exposures(self, venue: Venue) -> dict[Currency, Money] | None: ...
    def realized_pnl(self, instrument_id: InstrumentId) -> Money | None: ...
    def unrealized_pnl(self, instrument_id: InstrumentId, price: Price | None = None) -> Money | None: ...
    def total_pnl(self, instrument_id: InstrumentId, price: Price | None = None) -> Money | None: ...
    def net_exposure(self, instrument_id: InstrumentId, price: Price | None = None) -> Money | None: ...
    def net_position(self, instrument_id: InstrumentId) -> object: ...
    def is_net_long(self, instrument_id: InstrumentId) -> bool: ...
    def is_net_short(self, instrument_id: InstrumentId) -> bool: ...
    def is_flat(self, instrument_id: InstrumentId) -> bool: ...
    def is_completely_flat(self) -> bool: ...
