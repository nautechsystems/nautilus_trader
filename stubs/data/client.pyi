from typing import Any

from nautilus_trader.common.config import NautilusConfig
from stubs.cache.cache import Cache
from stubs.common.component import Clock
from stubs.common.component import Component
from stubs.common.component import MessageBus
from stubs.core.data import Data
from stubs.core.uuid import UUID4
from stubs.data.messages import RequestBars
from stubs.data.messages import RequestData
from stubs.data.messages import RequestInstrument
from stubs.data.messages import RequestInstruments
from stubs.data.messages import RequestOrderBookSnapshot
from stubs.data.messages import RequestQuoteTicks
from stubs.data.messages import RequestTradeTicks
from stubs.data.messages import SubscribeBars
from stubs.data.messages import SubscribeData
from stubs.data.messages import SubscribeIndexPrices
from stubs.data.messages import SubscribeInstrument
from stubs.data.messages import SubscribeInstrumentClose
from stubs.data.messages import SubscribeInstruments
from stubs.data.messages import SubscribeInstrumentStatus
from stubs.data.messages import SubscribeMarkPrices
from stubs.data.messages import SubscribeOrderBook
from stubs.data.messages import SubscribeQuoteTicks
from stubs.data.messages import SubscribeTradeTicks
from stubs.data.messages import UnsubscribeBars
from stubs.data.messages import UnsubscribeData
from stubs.data.messages import UnsubscribeIndexPrices
from stubs.data.messages import UnsubscribeInstrument
from stubs.data.messages import UnsubscribeInstrumentClose
from stubs.data.messages import UnsubscribeInstruments
from stubs.data.messages import UnsubscribeInstrumentStatus
from stubs.data.messages import UnsubscribeMarkPrices
from stubs.data.messages import UnsubscribeOrderBook
from stubs.data.messages import UnsubscribeQuoteTicks
from stubs.data.messages import UnsubscribeTradeTicks
from stubs.model.data import Bar
from stubs.model.data import BarType
from stubs.model.data import DataType
from stubs.model.identifiers import ClientId
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import Venue
from stubs.model.instruments.base import Instrument

class DataClient(Component):

    venue: Venue | None
    is_connected: bool

    def __init__(
        self,
        client_id: ClientId,
        msgbus: MessageBus,
        cache: Cache,
        clock: Clock,
        venue: Venue | None = None,
        config: NautilusConfig | None = None,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def _set_connected(self, value: bool = True) -> None: ...
    def subscribed_custom_data(self) -> list[DataType]: ...
    def subscribe(self, command: SubscribeData) -> None: ...
    def unsubscribe(self, command: UnsubscribeData) -> None: ...
    def _add_subscription(self, data_type: DataType) -> None: ...
    def _remove_subscription(self, data_type: DataType) -> None: ...
    def request(self, request: RequestData) -> None: ...
    def _handle_data_py(self, data: Data) -> None: ...
    def _handle_data_response_py(self, data_type: DataType, data: Any, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_data(self, data: Data) -> None: ...
    def _handle_data_response(self, data_type: DataType, data, correlation_id: UUID4, params: dict[str, object]) -> None: ...


class MarketDataClient(DataClient):

    def __init__(
        self,
        client_id: ClientId,
        msgbus: MessageBus,
        cache: Cache,
        clock: Clock,
        venue: Venue | None = None,
        config: NautilusConfig | None = None,
    ) -> None: ...
    def subscribed_custom_data(self) -> list[DataType]: ...
    def subscribed_instruments(self) -> list[InstrumentId]: ...
    def subscribed_order_book_deltas(self) -> list[InstrumentId]: ...
    def subscribed_order_book_snapshots(self) -> list[InstrumentId]: ...
    def subscribed_quote_ticks(self) -> list[InstrumentId]: ...
    def subscribed_trade_ticks(self) -> list[InstrumentId]: ...
    def subscribed_mark_prices(self) -> list[InstrumentId]: ...
    def subscribed_index_prices(self) -> list[InstrumentId]: ...
    def subscribed_bars(self) -> list[BarType]: ...
    def subscribed_instrument_status(self) -> list[InstrumentId]: ...
    def subscribed_instrument_close(self) -> list[InstrumentId]: ...
    def subscribe(self, command: SubscribeData) -> None: ...
    def subscribe_instruments(self, command: SubscribeInstruments) -> None: ...
    def subscribe_instrument(self, command: SubscribeInstrument) -> None: ...
    def subscribe_order_book_deltas(self, command: SubscribeOrderBook) -> None: ...
    def subscribe_order_book_snapshots(self, command: SubscribeOrderBook) -> None: ...
    def subscribe_quote_ticks(self, command: SubscribeQuoteTicks) -> None: ...
    def subscribe_trade_ticks(self, command: SubscribeTradeTicks) -> None: ...
    def subscribe_mark_prices(self, command: SubscribeMarkPrices) -> None: ...
    def subscribe_index_prices(self, command: SubscribeIndexPrices) -> None: ...
    def subscribe_instrument_status(self, command: SubscribeInstrumentStatus) -> None: ...
    def subscribe_instrument_close(self, command: SubscribeInstrumentClose) -> None: ...
    def subscribe_bars(self, command: SubscribeBars) -> None: ...
    def unsubscribe(self, command: UnsubscribeData) -> None: ...
    def unsubscribe_instruments(self, command: UnsubscribeInstruments) -> None: ...
    def unsubscribe_instrument(self, command: UnsubscribeInstrument) -> None: ...
    def unsubscribe_order_book_deltas(self, command: UnsubscribeOrderBook) -> None: ...
    def unsubscribe_order_book_snapshots(self, command: UnsubscribeOrderBook) -> None: ...
    def unsubscribe_quote_ticks(self, command: UnsubscribeQuoteTicks) -> None: ...
    def unsubscribe_trade_ticks(self, command: UnsubscribeTradeTicks) -> None: ...
    def unsubscribe_mark_prices(self, command: UnsubscribeMarkPrices) -> None: ...
    def unsubscribe_index_prices(self, command: UnsubscribeIndexPrices) -> None: ...
    def unsubscribe_bars(self, command: UnsubscribeBars) -> None: ...
    def unsubscribe_instrument_status(self, command: UnsubscribeInstrumentStatus) -> None: ...
    def unsubscribe_instrument_close(self, command: UnsubscribeInstrumentClose) -> None: ...
    def _add_subscription(self, data_type: DataType) -> None: ...
    def _add_subscription_instrument(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_order_book_deltas(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_order_book_snapshots(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_quote_ticks(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_trade_ticks(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_mark_prices(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_index_prices(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_bars(self, bar_type: BarType) -> None: ...
    def _add_subscription_instrument_status(self, instrument_id: InstrumentId) -> None: ...
    def _add_subscription_instrument_close(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription(self, data_type: DataType) -> None: ...
    def _remove_subscription_instrument(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_order_book_deltas(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_order_book_snapshots(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_quote_ticks(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_trade_ticks(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_mark_prices(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_index_prices(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_bars(self, bar_type: BarType) -> None: ...
    def _remove_subscription_instrument_status(self, instrument_id: InstrumentId) -> None: ...
    def _remove_subscription_instrument_close(self, instrument_id: InstrumentId) -> None: ...
    def request_instrument(self, request: RequestInstrument) -> None: ...
    def request_instruments(self, request: RequestInstruments) -> None: ...
    def request_order_book_snapshot(self, request: RequestOrderBookSnapshot) -> None: ...
    def request_quote_ticks(self, request: RequestQuoteTicks) -> None: ...
    def request_trade_ticks(self, request: RequestTradeTicks) -> None: ...
    def request_bars(self, request: RequestBars) -> None: ...
    def _handle_data_py(self, data: Data) -> None: ...
    def _handle_instrument_py(self, instrument: Instrument, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_instruments_py(self, venue: Venue, instruments: list, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_quote_ticks_py(self, instrument_id: InstrumentId, ticks: list, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_trade_ticks_py(self, instrument_id: InstrumentId, ticks: list, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_bars_py(self, bar_type: BarType, bars: list, partial: Bar, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_data_response_py(self, data_type: DataType, data: Any, correlation_id: UUID4, params: dict[str, object] | None = None) -> None: ...
    def _handle_data(self, data: Data) -> None: ...
    def _handle_instrument(self, instrument: Instrument, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_instruments(self, venue: Venue, instruments: list, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_quote_ticks(self, instrument_id: InstrumentId, ticks: list, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_trade_ticks(self, instrument_id: InstrumentId, ticks: list, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_bars(self, bar_type: BarType, bars: list, partial: Bar, correlation_id: UUID4, params: dict[str, object]) -> None: ...
    def _handle_data_response(self, data_type: DataType, data, correlation_id: UUID4, params: dict[str, object]) -> None: ...
