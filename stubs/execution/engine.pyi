from nautilus_trader.execution.config import ExecEngineConfig
from nautilus_trader.execution.reports import ExecutionMassStatus
from nautilus_trader.execution.reports import ExecutionReport
from nautilus_trader.model.enums import OmsType
from nautilus_trader.model.enums import OrderSide
from stubs.cache.cache import Cache
from stubs.common.component import Clock
from stubs.common.component import Component
from stubs.common.component import MessageBus
from stubs.common.component import TimeEvent
from stubs.common.generators import PositionIdGenerator
from stubs.execution.client import ExecutionClient
from stubs.execution.messages import BatchCancelOrders
from stubs.execution.messages import CancelAllOrders
from stubs.execution.messages import CancelOrder
from stubs.execution.messages import ModifyOrder
from stubs.execution.messages import QueryOrder
from stubs.execution.messages import SubmitOrder
from stubs.execution.messages import SubmitOrderList
from stubs.execution.messages import TradingCommand
from stubs.model.events.order import OrderEvent
from stubs.model.events.order import OrderFilled
from stubs.model.events.position import PositionEvent
from stubs.model.identifiers import ClientId
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import PositionId
from stubs.model.identifiers import StrategyId
from stubs.model.identifiers import Venue
from stubs.model.instruments.base import Instrument
from stubs.model.objects import Price
from stubs.model.objects import Quantity
from stubs.model.orders.base import Order
from stubs.model.position import Position
from stubs.trading.strategy import Strategy

class ExecutionEngine(Component):

    _cache: Cache
    _clients: dict[ClientId, ExecutionClient]
    _routing_map: dict[Venue, ExecutionClient]
    _default_client: ExecutionClient | None
    _external_clients: set[ClientId]
    _oms_overrides: dict[StrategyId, OmsType]
    _external_order_claims: dict[InstrumentId, StrategyId]
    _pos_id_generator: PositionIdGenerator
    _pending_position_events: list[PositionEvent]
    debug: bool
    manage_own_order_books: bool
    snapshot_orders: bool
    snapshot_positions: bool
    snapshot_positions_interval_secs: int
    snapshot_positions_timer_name: str
    command_count: int
    event_count: int
    report_count: int

    def __init__(
        self,
        msgbus: MessageBus,
        cache: Cache,
        clock: Clock,
        config: ExecEngineConfig | None = None,
    ) -> None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def registered_clients(self) -> list[ClientId]: ...
    @property
    def default_client(self) -> ClientId | None: ...
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def position_id_count(self, strategy_id: StrategyId) -> int: ...
    def check_integrity(self) -> bool: ...
    def check_connected(self) -> bool: ...
    def check_disconnected(self) -> bool: ...
    def check_residuals(self) -> bool: ...
    def get_external_order_claim(self, instrument_id: InstrumentId) -> StrategyId | None: ...
    def get_external_order_claims_instruments(self) -> set[InstrumentId]: ...
    def get_clients_for_orders(self, orders: list[Order]) -> set[ExecutionClient]: ...
    def set_manage_own_order_books(self, value: bool) -> None: ...
    def register_client(self, client: ExecutionClient) -> None: ...
    def register_default_client(self, client: ExecutionClient) -> None: ...
    def register_venue_routing(self, client: ExecutionClient, venue: Venue) -> None: ...
    def register_oms_type(self, strategy: Strategy) -> None: ...
    def register_external_order_claims(self, strategy: Strategy) -> None: ...
    def deregister_client(self, client: ExecutionClient) -> None: ...
    async def reconcile_state(self, timeout_secs: float = 10.0) -> bool: ...
    def reconcile_report(self, report: ExecutionReport) -> bool: ...
    def reconcile_mass_status(self, report: ExecutionMassStatus) -> None: ...
    def _on_start(self) -> None: ...
    def _on_stop(self) -> None: ...
    def _start(self) -> None: ...
    def _stop(self) -> None: ...
    def _reset(self) -> None: ...
    def _dispose(self) -> None: ...
    def stop_clients(self) -> None: ...
    def load_cache(self) -> None: ...
    def execute(self, command: TradingCommand) -> None: ...
    def process(self, event: OrderEvent) -> None: ...
    def flush_db(self) -> None: ...
    def _set_position_id_counts(self) -> None: ...
    def _last_px_for_conversion(self, instrument_id: InstrumentId, order_side: OrderSide) -> Price | None: ...
    def _set_order_base_qty(self, order: Order, base_qty: Quantity) -> None: ...
    def _deny_order(self, order: Order, reason: str) -> None: ...
    def _get_or_init_own_order_book(self, instrument_id: InstrumentId) -> object: ...
    def _add_own_book_order(self, order: Order) -> None: ...
    def _execute_command(self, command: TradingCommand) -> None: ...
    def _handle_submit_order(self, client: ExecutionClient, command: SubmitOrder) -> None: ...
    def _handle_submit_order_list(self, client: ExecutionClient, command: SubmitOrderList) -> None: ...
    def _handle_modify_order(self, client: ExecutionClient, command: ModifyOrder) -> None: ...
    def _handle_cancel_order(self, client: ExecutionClient, command: CancelOrder) -> None: ...
    def _handle_cancel_all_orders(self, client: ExecutionClient, command: CancelAllOrders) -> None: ...
    def _handle_batch_cancel_orders(self, client: ExecutionClient, command: BatchCancelOrders) -> None: ...
    def _handle_query_order(self, client: ExecutionClient, command: QueryOrder) -> None: ...
    def _handle_event(self, event: OrderEvent) -> None: ...
    def _determine_oms_type(self, fill: OrderFilled) -> OmsType: ...
    def _determine_position_id(self, fill: OrderFilled, oms_type: OmsType) -> None: ...
    def _determine_hedging_position_id(self, fill: OrderFilled) -> PositionId: ...
    def _determine_netting_position_id(self, fill: OrderFilled) -> PositionId: ...
    def _apply_event_to_order(self, order: Order, event: OrderEvent) -> None: ...
    def _handle_order_fill(self, order: Order, fill: OrderFilled, oms_type: OmsType) -> None: ...
    def _open_position(self, instrument: Instrument, position: Position | None, fill: OrderFilled, oms_type: OmsType) -> Position: ...
    def _update_position(self, instrument: Instrument, position: Position, fill: OrderFilled, oms_type: OmsType) -> None: ...
    def _will_flip_position(self, position: Position, fill: OrderFilled) -> bool: ...
    def _flip_position(self, instrument: Instrument, position: Position, fill: OrderFilled, oms_type: OmsType) -> None: ...
    def _create_order_state_snapshot(self, order: Order) -> None: ...
    def _create_position_state_snapshot(self, position: Position, open_only: bool) -> None: ...
    def _snapshot_open_position_states(self, event: TimeEvent) -> None: ...

