from nautilus_trader.common.config import NautilusConfig
from stubs.cache.cache import Cache
from stubs.common.component import Clock
from stubs.common.component import MessageBus
from stubs.data.client import DataClient
from stubs.data.client import MarketDataClient
from stubs.data.messages import RequestBars
from stubs.data.messages import RequestData
from stubs.data.messages import RequestInstrument
from stubs.data.messages import RequestInstruments
from stubs.data.messages import RequestOrderBookSnapshot
from stubs.data.messages import RequestQuoteTicks
from stubs.data.messages import RequestTradeTicks
from stubs.data.messages import SubscribeBars
from stubs.data.messages import SubscribeData
from stubs.data.messages import SubscribeIndexPrices
from stubs.data.messages import SubscribeInstrument
from stubs.data.messages import SubscribeInstrumentClose
from stubs.data.messages import SubscribeInstruments
from stubs.data.messages import SubscribeInstrumentStatus
from stubs.data.messages import SubscribeMarkPrices
from stubs.data.messages import SubscribeOrderBook
from stubs.data.messages import SubscribeQuoteTicks
from stubs.data.messages import SubscribeTradeTicks
from stubs.data.messages import UnsubscribeBars
from stubs.data.messages import UnsubscribeData
from stubs.data.messages import UnsubscribeIndexPrices
from stubs.data.messages import UnsubscribeInstrument
from stubs.data.messages import UnsubscribeInstrumentClose
from stubs.data.messages import UnsubscribeInstruments
from stubs.data.messages import UnsubscribeInstrumentStatus
from stubs.data.messages import UnsubscribeMarkPrices
from stubs.data.messages import UnsubscribeOrderBook
from stubs.data.messages import UnsubscribeQuoteTicks
from stubs.data.messages import UnsubscribeTradeTicks
from stubs.model.identifiers import ClientId

class BacktestDataClient(DataClient):
    """
    Provides an implementation of `DataClient` for backtesting.

    Parameters
    ----------
    client_id : ClientId
        The data client ID.
    msgbus : MessageBus
        The message bus for the client.
    cache : Cache
        The cache for the client.
    clock : Clock
        The clock for the client.
    config : NautilusConfig, optional
        The configuration for the instance.
    """

    is_connected: bool

    def __init__(
        self,
        client_id: ClientId,
        msgbus: MessageBus,
        cache: Cache,
        clock: Clock,
        config: NautilusConfig | None = None,
    ) -> None: ...
    def _start(self) -> None: ...
    def _stop(self) -> None: ...
    def subscribe(self, command: SubscribeData) -> None: ...
    def unsubscribe(self, command: UnsubscribeData) -> None: ...
    def request(self, request: RequestData) -> None: ...

class BacktestMarketDataClient(MarketDataClient):
    """
    Provides an implementation of `MarketDataClient` for backtesting.

    Parameters
    ----------
    client_id : ClientId
        The data client ID.
    msgbus : MessageBus
        The message bus for the client.
    cache : Cache
        The cache for the client.
    clock : Clock
        The clock for the client.
    """

    is_connected: bool

    def __init__(
        self,
        client_id: ClientId,
        msgbus: MessageBus,
        cache: Cache,
        clock: Clock,
    ): ...
    def _start(self) -> None: ...
    def _stop(self) -> None: ...
    def subscribe(self, command: SubscribeData) -> None: ...
    def unsubscribe(self, command: UnsubscribeData) -> None: ...
    def subscribe_instruments(self, command: SubscribeInstruments) -> None: ...
    def subscribe_instrument(self, command: SubscribeInstrument) -> None: ...
    def subscribe_order_book_deltas(self, command: SubscribeOrderBook) -> None: ...
    def subscribe_order_book_snapshots(self, command: SubscribeOrderBook) -> None: ...
    def subscribe_quote_ticks(self, command: SubscribeQuoteTicks) -> None: ...
    def subscribe_trade_ticks(self, command: SubscribeTradeTicks) -> None: ...
    def subscribe_mark_prices(self, command: SubscribeMarkPrices) -> None: ...
    def subscribe_index_prices(self, command: SubscribeIndexPrices) -> None: ...
    def subscribe_bars(self, command: SubscribeBars) -> None: ...
    def subscribe_instrument_status(self, command: SubscribeInstrumentStatus) -> None: ...
    def subscribe_instrument_close(self, command: SubscribeInstrumentClose) -> None: ...
    def unsubscribe_instruments(self, command: UnsubscribeInstruments) -> None: ...
    def unsubscribe_instrument(self, command: UnsubscribeInstrument) -> None: ...
    def unsubscribe_order_book_deltas(self, command: UnsubscribeOrderBook) -> None: ...
    def unsubscribe_order_book_snapshots(self, command: UnsubscribeOrderBook) -> None: ...
    def unsubscribe_quote_ticks(self, command: UnsubscribeQuoteTicks) -> None: ...
    def unsubscribe_trade_ticks(self, command: UnsubscribeTradeTicks) -> None: ...
    def unsubscribe_mark_prices(self, command: UnsubscribeMarkPrices) -> None: ...
    def unsubscribe_index_prices(self, command: UnsubscribeIndexPrices) -> None: ...
    def unsubscribe_bars(self, command: UnsubscribeBars) -> None: ...
    def unsubscribe_instrument_status(self, command: UnsubscribeInstrumentStatus) -> None: ...
    def unsubscribe_instrument_close(self, command: UnsubscribeInstrumentClose) -> None: ...
    def request_instrument(self, request: RequestInstrument) -> None: ...
    def request_instruments(self, request: RequestInstruments) -> None: ...
    def request_order_book_snapshot(self, request: RequestOrderBookSnapshot) -> None: ...
    def request_quote_ticks(self, request: RequestQuoteTicks) -> None: ...
    def request_trade_ticks(self, request: RequestTradeTicks) -> None: ...
    def request_bars(self, request: RequestBars) -> None: ...
