from collections.abc import Callable
from typing import Any

_OBJECT_TO_DICT_MAP: dict[str, Callable[[Any], dict]] = ...
_OBJECT_FROM_DICT_MAP: dict[str, Callable[[dict], Any]] = ...
_EXTERNAL_PUBLISHABLE_TYPES: set = ...


def register_serializable_type(
    cls: type,
    to_dict: Callable[[Any], dict[str, Any]],
    from_dict: Callable[[dict[str, Any]], Any],
) -> None: ...


class Serializer:

    def __init__(self) -> None: ...

    def serialize(self, obj: object) -> bytes: ...

    def deserialize(self, obj_bytes: bytes) -> object: ...

