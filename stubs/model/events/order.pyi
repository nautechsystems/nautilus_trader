from typing import Any

from nautilus_trader.model.enums import ContingencyType
from nautilus_trader.model.enums import LiquiditySide
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import OrderType
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from stubs.core.message import Event
from stubs.core.uuid import UUID4
from stubs.model.identifiers import AccountId
from stubs.model.identifiers import ClientOrderId
from stubs.model.identifiers import ExecAlgorithmId
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import OrderListId
from stubs.model.identifiers import PositionId
from stubs.model.identifiers import StrategyId
from stubs.model.identifiers import TradeId
from stubs.model.identifiers import TraderId
from stubs.model.identifiers import VenueOrderId
from stubs.model.objects import Currency
from stubs.model.objects import Money
from stubs.model.objects import Price
from stubs.model.objects import Quantity

class OrderEvent(Event):

    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...

class OrderInitialized(OrderEvent):

    side: OrderSide
    order_type: OrderType
    quantity: Quantity
    time_in_force: TimeInForce
    post_only: bool
    reduce_only: bool
    quote_quantity: bool
    options: dict[str, Any]
    emulation_trigger: TriggerType
    trigger_instrument_id: InstrumentId | None
    contingency_type: ContingencyType
    order_list_id: OrderListId | None
    linked_order_ids: list[ClientOrderId] | None
    parent_order_id: ClientOrderId | None
    exec_algorithm_id: ExecAlgorithmId | None
    exec_algorithm_params: dict[str, Any] | None
    exec_spawn_id: ClientOrderId | None
    tags: list[str] | None

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        order_side: OrderSide,
        order_type: OrderType,
        quantity: Quantity,
        time_in_force: TimeInForce,
        post_only: bool,
        reduce_only: bool,
        quote_quantity: bool,
        options: dict[str, object],
        emulation_trigger: TriggerType,
        trigger_instrument_id: InstrumentId | None,
        contingency_type: ContingencyType,
        order_list_id: OrderListId | None,
        linked_order_ids: list[ClientOrderId] | None,
        parent_order_id: ClientOrderId | None,
        exec_algorithm_id: ExecAlgorithmId | None,
        exec_algorithm_params: dict[str, object] | None,
        exec_spawn_id: ClientOrderId | None,
        tags: list[str] | None,
        event_id: UUID4,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderInitialized: ...
    @staticmethod
    def to_dict(obj: OrderInitialized) -> dict[str, object]: ...

class OrderDenied(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        reason: str,
        event_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reason(self) -> str: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderDenied: ...
    @staticmethod
    def to_dict(obj: OrderDenied) -> dict[str, object]: ...

class OrderEmulated(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        event_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderEmulated: ...
    @staticmethod
    def to_dict(obj: OrderEmulated) -> dict[str, object]: ...

class OrderReleased(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        released_price: Price,
        event_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def released_price(self) -> Price: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderReleased: ...
    @staticmethod
    def to_dict(obj: OrderReleased) -> dict[str, object]: ...

class OrderSubmitted(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        account_id: AccountId,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderSubmitted: ...
    @staticmethod
    def to_dict(obj: OrderSubmitted) -> dict[str, object]: ...

class OrderAccepted(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId,
        account_id: AccountId,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderAccepted: ...
    @staticmethod
    def to_dict(obj: OrderAccepted) -> dict[str, object]: ...

class OrderRejected(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        account_id: AccountId,
        reason: str,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reason(self) -> str: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderRejected: ...
    @staticmethod
    def to_dict(obj: OrderRejected) -> dict[str, object]: ...

class OrderCanceled(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderCanceled: ...
    @staticmethod
    def to_dict(obj: OrderCanceled) -> dict[str, object]: ...

class OrderExpired(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderExpired: ...
    @staticmethod
    def to_dict(obj: OrderExpired) -> dict[str, object]: ...

class OrderTriggered(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderTriggered: ...
    @staticmethod
    def to_dict(obj: OrderTriggered) -> dict[str, object]: ...

class OrderPendingUpdate(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderPendingUpdate: ...
    @staticmethod
    def to_dict(obj: OrderPendingUpdate) -> dict[str, object]: ...

class OrderPendingCancel(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderPendingCancel: ...
    @staticmethod
    def to_dict(obj: OrderPendingCancel) -> dict[str, object]: ...

class OrderModifyRejected(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        reason: str,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reason(self) -> str: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderModifyRejected: ...
    @staticmethod
    def to_dict(obj: OrderModifyRejected) -> dict[str, object]: ...

class OrderCancelRejected(OrderEvent):

    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        reason: str,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reason(self) -> str: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderCancelRejected: ...
    @staticmethod
    def to_dict(obj: OrderCancelRejected) -> dict[str, object]: ...

class OrderUpdated(OrderEvent):

    quantity: Quantity
    price: Price | None
    trigger_price: Price | None
    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId | None,
        account_id: AccountId | None,
        quantity: Quantity,
        price: Price | None,
        trigger_price: Price | None,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderUpdated: ...
    @staticmethod
    def to_dict(obj: OrderUpdated) -> dict[str, object]: ...

class OrderFilled(OrderEvent):

    trade_id: TradeId
    position_id: PositionId | None
    order_side: OrderSide
    order_type: OrderType
    last_qty: Quantity
    last_px: Price
    currency: Currency
    commission: Money
    liquidity_side: LiquiditySide
    info: dict[str, Any]
    def __init__(
        self,
        trader_id: TraderId,
        strategy_id: StrategyId,
        instrument_id: InstrumentId,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId,
        account_id: AccountId,
        trade_id: TradeId,
        position_id: PositionId | None,
        order_side: OrderSide,
        order_type: OrderType,
        last_qty: Quantity,
        last_px: Price,
        currency: Currency,
        commission: Money,
        liquidity_side: LiquiditySide,
        event_id: UUID4,
        ts_event: int,
        ts_init: int,
        reconciliation: bool = False,
        info: dict[str, Any] | None = None,
    ) -> None: ...
    def __eq__(self, other: Event) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def set_client_order_id(self, client_order_id: ClientOrderId): ...
    @property
    def trader_id(self) -> TraderId: ...
    @property
    def strategy_id(self) -> TraderId: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def client_order_id(self) -> ClientOrderId: ...
    @property
    def venue_order_id(self) -> VenueOrderId | None: ...
    @property
    def account_id(self) -> AccountId | None: ...
    @property
    def reconciliation(self) -> bool: ...
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> OrderFilled: ...
    @staticmethod
    def to_dict(obj: OrderFilled) -> dict[str, object]: ...
    @property
    def is_buy(self) -> bool: ...
    @property
    def is_sell(self) -> bool: ...
