import decimal

from nautilus_trader.model.enums import CurrencyType
from stubs.model.identifiers import InstrumentId

QUANTITY_MAX: float = ...
QUANTITY_MIN: float = ...
PRICE_MAX: float = ...
PRICE_MIN: float = ...
MONEY_MAX: float = ...
MONEY_MIN: float = ...
HIGH_PRECISION: bool = ...
FIXED_PRECISION: int = ...
FIXED_SCALAR: float = ...
FIXED_PRECISION_BYTES: int = ...

class Quantity:

    def __init__(self, value: float, precision: int) -> None: ...
    def __getstate__(self) -> tuple[int, int]: ...
    def __setstate__(self, state: tuple[int, int]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __add__(a: object, b: object) -> decimal.Decimal | float: ...
    def __radd__(b: object, a: object) -> decimal.Decimal | float: ...
    def __sub__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rsub__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mul__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmul__(b: object, a: object) -> decimal.Decimal | float: ...
    def __truediv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rtruediv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __floordiv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rfloordiv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mod__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmod__(b: object, a: object) -> decimal.Decimal | float: ...
    def __neg__(self) -> decimal.Decimal: ...
    def __pos__(self) -> decimal.Decimal: ...
    def __abs__(self) -> decimal.Decimal: ...
    def __round__(self, ndigits: int | None = None) -> decimal.Decimal: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def raw(self) -> QuantityRaw: ...
    @property
    def precision(self) -> int: ...
    @staticmethod
    def raw_to_f64(raw: int) -> float: ...
    @staticmethod
    def zero(precision: int = 0) -> Quantity: ...
    @staticmethod
    def from_raw(raw: int, precision: int) -> Quantity: ...
    @staticmethod
    def from_str(value: str) -> Quantity: ...
    @staticmethod
    def from_int(value: int) -> Quantity: ...
    def to_formatted_str(self) -> str: ...
    def as_decimal(self) -> decimal.Decimal: ...
    def as_double(self) -> float: ...

class Price:

    def __init__(self, value: float, precision: int) -> None: ...
    def __getstate__(self) -> tuple[int, int]: ...
    def __setstate__(self, state: tuple[int, int]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __add__(a: object, b: object) -> decimal.Decimal | float: ...
    def __radd__(b: object, a: object) -> decimal.Decimal | float: ...
    def __sub__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rsub__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mul__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmul__(b: object, a: object) -> decimal.Decimal | float: ...
    def __truediv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rtruediv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __floordiv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rfloordiv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mod__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmod__(b: object, a: object) -> decimal.Decimal | float: ...
    def __neg__(self) -> decimal.Decimal: ...
    def __pos__(self) -> decimal.Decimal: ...
    def __abs__(self) -> decimal.Decimal: ...
    def __round__(self, ndigits: int | None = None) -> decimal.Decimal: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def raw(self) -> PriceRaw: ...
    @property
    def precision(self) -> int: ...
    @staticmethod
    def from_raw(raw: int, precision: int) -> Price: ...
    @staticmethod
    def from_str(value: str) -> Price: ...
    @staticmethod
    def from_int(value: int) -> Price: ...
    def to_formatted_str(self) -> str: ...
    def as_decimal(self) -> decimal.Decimal: ...
    def as_double(self) -> float: ...

class Money:

    def __init__(self, value: object, currency: Currency) -> None: ...
    def __getstate__(self) -> tuple[int, str]: ...
    def __setstate__(self, state: tuple[int, str]) -> None: ...
    def __eq__(self, other: Money) -> bool: ...
    def __lt__(self, other: Money) -> bool: ...
    def __le__(self, other: Money) -> bool: ...
    def __gt__(self, other: Money) -> bool: ...
    def __ge__(self, other: Money) -> bool: ...
    def __add__(a: object, b: object) -> decimal.Decimal | float: ...
    def __radd__(b: object, a: object) -> decimal.Decimal | float: ...
    def __sub__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rsub__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mul__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmul__(b: object, a: object) -> decimal.Decimal | float: ...
    def __truediv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rtruediv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __floordiv__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rfloordiv__(b: object, a: object) -> decimal.Decimal | float: ...
    def __mod__(a: object, b: object) -> decimal.Decimal | float: ...
    def __rmod__(b: object, a: object) -> decimal.Decimal | float: ...
    def __neg__(self) -> decimal.Decimal: ...
    def __pos__(self) -> decimal.Decimal: ...
    def __abs__(self) -> decimal.Decimal: ...
    def __round__(self, ndigits: int | None = None) -> decimal.Decimal: ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def raw(self) -> MoneyRaw: ...
    @property
    def currency(self) -> Currency: ...
    @staticmethod
    def from_raw(raw: int, currency: Currency) -> Money: ...
    @staticmethod
    def from_str(value: str) -> Money: ...
    def to_formatted_str(self) -> str: ...
    def as_decimal(self) -> decimal.Decimal: ...
    def as_double(self) -> float: ...

class Currency:

    def __init__(
        self,
        code: str,
        precision: int,
        iso4217: int,
        name: str,
        currency_type: CurrencyType,
    ) -> None: ...
    def __getstate__(self) -> tuple[str, int, int, str, CurrencyType]: ...
    def __setstate__(self, state: tuple[str, int, int, str, CurrencyType]) -> None: ...
    def __eq__(self, other: Currency) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def code(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def precision(self) -> int: ...
    @property
    def iso4217(self) -> int: ...
    @property
    def currency_type(self) -> CurrencyType: ...
    @staticmethod
    def register(currency: Currency, overwrite: bool = False) -> None: ...
    @staticmethod
    def from_internal_map(code: str) -> Currency | None: ...
    @staticmethod
    def from_str(code: str, strict: bool = False) -> Currency | None: ...
    @staticmethod
    def is_fiat(code: str) -> bool: ...
    @staticmethod
    def is_crypto(code: str) -> bool: ...

class AccountBalance:

    total: Money
    locked: Money
    free: Money
    currency: Currency

    def __init__(self, total: Money, locked: Money, free: Money) -> None: ...
    def __eq__(self, other: AccountBalance) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def from_dict(values: dict[str, object]) -> AccountBalance: ...
    def copy(self) -> AccountBalance: ...
    def to_dict(self) -> dict[str, object]: ...

class MarginBalance:

    initial: Money
    maintenance: Money
    currency: Currency
    instrument_id: InstrumentId | None

    def __init__(
        self,
        initial: Money,
        maintenance: Money,
        instrument_id: InstrumentId | None = None,
    ) -> None: ...
    def __eq__(self, other: MarginBalance) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def from_dict(values: dict[str, object]) -> MarginBalance: ...
    def copy(self) -> MarginBalance: ...
    def to_dict(self) -> dict[str, object]: ...
