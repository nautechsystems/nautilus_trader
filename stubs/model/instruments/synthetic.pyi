from typing import Any

from stubs.core.data import Data
from stubs.model.identifiers import InstrumentId
from stubs.model.identifiers import Symbol
from stubs.model.objects import Price

class SyntheticInstrument(Data):

    id: InstrumentId
    def __init__(
        self,
        symbol: Symbol,
        price_precision: int,
        components: list[InstrumentId],
        formula: str,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    def __del__(self) -> None: ...
    def __eq__(self, other: SyntheticInstrument) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def price_precision(self) -> int: ...
    @property
    def price_increment(self) -> Price: ...
    @property
    def components(self) -> list[InstrumentId]: ...
    @property
    def formula(self) -> str: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    def change_formula(self, formula: str) -> None: ...
    def calculate(self, inputs: list[float]) -> Price: ...
    @staticmethod
    def from_dict(values: dict[str, Any]) -> SyntheticInstrument: ...
    @staticmethod
    def to_dict(obj: SyntheticInstrument) -> dict[str, Any]: ...
