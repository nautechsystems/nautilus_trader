from nautilus_trader.model.enums import BookType
from nautilus_trader.model.enums import OrderSide
from stubs.core.data import Data
from stubs.model.data import BookOrder
from stubs.model.data import OrderBookDelta
from stubs.model.data import OrderBookDeltas
from stubs.model.data import OrderBookDepth10
from stubs.model.data import QuoteTick
from stubs.model.data import TradeTick
from stubs.model.identifiers import InstrumentId
from stubs.model.objects import Price
from stubs.model.objects import Quantity
from stubs.model.orders.base import Order

class OrderBook(Data):

    def __init__(
        self,
        instrument_id: InstrumentId,
        book_type: BookType,
    ) -> None: ...
    def __del__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def book_type(self) -> BookType: ...
    @property
    def sequence(self) -> int: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @property
    def ts_last(self) -> int: ...
    @property
    def update_count(self) -> int: ...
    def reset(self) -> None: ...
    def add(self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0) -> None: ...
    def update(self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0) -> None: ...
    def delete(self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0) -> None: ...
    def clear(self, ts_event: int, sequence: int = 0) -> None: ...
    def clear_bids(self, ts_event: int, sequence: int = 0) -> None: ...
    def clear_asks(self, ts_event: int, sequence: int = 0) -> None: ...
    def apply_delta(self, delta: OrderBookDelta) -> None: ...
    def apply_deltas(self, deltas: OrderBookDeltas) -> None: ...
    def apply_depth(self, depth: OrderBookDepth10) -> None: ...
    def apply(self, data: Data) -> None: ...
    def check_integrity(self) -> None: ...
    def bids(self) -> list[BookLevel]: ...
    def asks(self) -> list[BookLevel]: ...
    def best_bid_price(self) -> Price | None: ...
    def best_ask_price(self) -> Price | None: ...
    def best_bid_size(self) -> Quantity | None: ...
    def best_ask_size(self) -> Quantity | None: ...
    def spread(self) -> float | None: ...
    def midpoint(self) -> float | None: ...
    def get_avg_px_for_quantity(self, quantity: Quantity, order_side: OrderSide) -> float: ...
    def get_quantity_for_price(self, price: Price, order_side: OrderSide) -> float: ...
    def simulate_fills(self, order: Order, price_prec: int, size_prec: int, is_aggressive: bool) -> list[tuple[Price, Quantity]]: ...
    def update_quote_tick(self, tick: QuoteTick) -> None: ...
    def update_trade_tick(self, tick: TradeTick) -> None: ...
    def pprint(self, num_levels: int = 3) -> str: ...

class BookLevel:

    def __del__(self) -> None: ...
    def __eq__(self, other: BookLevel) -> bool: ...
    def __lt__(self, other: BookLevel) -> bool: ...
    def __le__(self, other: BookLevel) -> bool: ...
    def __gt__(self, other: BookLevel) -> bool: ...
    def __ge__(self, other: BookLevel) -> bool: ...
    def __repr__(self) -> str: ...
    @property
    def side(self) -> OrderSide: ...
    @property
    def price(self) -> Price: ...
    def orders(self) -> list[BookOrder]: ...
    def size(self) -> float: ...
    def exposure(self) -> float: ...

def py_should_handle_own_book_order(order: Order) -> bool: ...
