[tool.poetry]
name = "nautilus_trader"
version = "1.174.0"
description = "A high-performance algorithmic trading platform and event-driven backtester"
authors = ["Nautech Systems <info@nautechsystems.io>"]
license = "LGPL-3.0-or-later"
readme = "README.md"
homepage = "https://nautilustrader.io"
repository = "https://github.com/nautechsystems/nautilus_trader"
classifiers = [
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Investment",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
]
include = [
    # Rust source must be included in the source distributions
    { path = "nautilus_core/*", format = "sdist" },
    { path = "nautilus_core/*[!target]*/*", format = "sdist" },
    # Compiled extensions must be included in the wheel distributions
    { path = "nautilus_trader/**/*.so", format = "wheel" },
    { path = "nautilus_trader/**/*.pyd", format = "wheel" },
]

[build-system]
requires = [
    "setuptools",
    "poetry-core>=1.5.2",
    "numpy>=1.24.3",
    "Cython==3.0.0b2",
]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
script = "build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
cython = "==3.0.0b2"
aiodns = "^3.0.0"
aiohttp = "^3.8.4"
click = "^8.1.3"
frozendict = "^2.3.8"
fsspec = ">=2022.5.0"
msgspec = "^0.14.2"
numpy = "^1.24.3"
pandas = "^1.5.3"
psutil = "^5.9.5"
pyarrow = "^12.0.0"
pytz = "^2023.3.0"
tabulate = "^0.9.0"
toml = "^0.10.2"
tqdm = "^4.65.0"
uvloop = {version = "^0.17.0", markers = "sys_platform != 'win32'"}
hiredis = {version = "^2.2.3", optional = true}
ib_insync = {version = "^0.9.85", optional = true}
redis = {version = "^4.5.5", optional = true}
docker = {version = "^6.1.2", optional = true}
betfair_parser = {version = "==0.1.21", optional = true}

[tool.poetry.extras]
betfair = ["betfair_parser"]
docker = ["docker"]
ib = ["ib_insync"]
redis = ["hiredis", "redis"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
mypy = "^1.3.0"
pre-commit = "^3.3.2"
ruff = "^0.0.269"
types-pytz = "^2022.3.0"
types-redis = "^4.5.5"
types-requests = "^2.29.0"
types-toml = "^0.10.2"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = "^7.2.5"
pytest = "^7.3.1"
pytest-aiohttp = "^1.0.4"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
pytest-cov = "4.0.0"
pytest-mock = "^3.10.0"
pytest-xdist = { version = "^3.3.1", extras = ["psutil"] }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
numpydoc = "^1.5.0"
linkify-it-py = "^2.0.0"
myst-parser = "^0.18.1"
sphinx_comments = "^0.0.3"
sphinx_copybutton = "^0.5.0"
sphinx-external-toc = "^0.3.1"
sphinx-material = "^0.0.35"
sphinx_togglebutton = "^0.3.0"

##########################################################
# Formatter configs                                      #
##########################################################
[tool.isort]
py_version = "39"
skip_glob = ["**/core/rust/*"]
combine_as_imports = true
line_length = 100
ensure_newline_before_comments = true
force_single_line = true
single_line_exclusions = ["typing"]
include_trailing_comma = true
multi_line_output = 3
lines_after_imports = 2
use_parentheses = true
filter_files = true

[tool.black]
target_version = ["py39", "py310", "py311"]
line_length = 100

##########################################################
# Linter configs                                         #
##########################################################
[tool.ruff]
target-version = "py39"
line-length = 150  # Reduce to 100
select = [
    "C4",
    "E",
    "F",
    "W",
    "C90",
    "D",
    # "DTZ",
    "UP",
    "S",
    "T10",
    "ICN",
    "PIE",
    # "PT",
    "PYI",
    "Q",
    "I",
    "RSE",
    "TID",
    # "SIM",
    # "ARG",
    # "ERA",
    # "PD",
    # "PGH",
    # "PLW",
    "NPY",
    "RUF",
]

ignore = [
    "E741",  # Ambiguous variable name (single char)
    "D100",  # Missing docstring in public module  **fix**
    "D101",
    "D102",  # Missing docstring in public method  **fix**
    "D103",  # Missing docstring in public function  **fix**
    "D104",  # Missing docstring in public package  **fix**
    "D107",
    "D105",
    "D200",  # One-line docstring should fit on one line with quotes (optional style)
    "D203",  # 1 blank line required before class docstring (optional style)
    "D205",  # 1 blank line required between summary line and description (optional style)
    "D212",  # Multi-line docstring summary should start at the first line (optional style)
    "D400",  # First line should end with a period (not always a first line)
    "D413",  # Missing blank line after last section ('Parameters')
    "D415",  # First line should end with a period, question mark, or exclamation point (not always a first line)
    "D416",  # Section name should end with a colon ('Warnings:', not 'Warnings') (incorrect?)
    "S101",  # Use of assert detected (OK in test suite)
    "S105",  # Use of hardcoded password (spurious)
    "S106",  # Use of hardcoded password (spurious)
    "S113",  # Probable use of requests call without timeout **fix**
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = [
    "A",
    "B",
    "C",
    "C4",
    "D",
    "DTZ",
    "E",
    "F",
    "UP",
    "S",
    "W",
    "I",
    "PIE",
    "PT",
    "PYI",
    "RSE",
    "TID",
    "ARG",
    "PD",
    "SIM",
    # "PGH",
    "NPY",
    "RUF",
]

unfixable = []

exclude = [
    ".benchmarks",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
combine-as-imports = true
force-single-line = true
single-line-exclusions = ["typing"]
lines-after-imports = 2
split-on-trailing-comma = true

[tool.ruff.mccabe]
max-complexity = 10

##########################################################
# Static analysis configs                                #
##########################################################
[tool.mypy]
python_version = "3.9"
disallow_incomplete_defs = true
explicit_package_bases = true
ignore_missing_imports = true
namespace_packages = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true

##########################################################
# Test configs                                           #
##########################################################
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra --new-first --failed-first --doctest-modules --doctest-glob=\"*.pyx\""
asyncio_mode = "strict"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
plugins = ["Cython.Coverage"]
source = ["nautilus_trader"]
omit = [
    "nautilus_trader/adapters/*",
    "nautilus_trader/examples/*",
    "nautilus_trader/test_kit/*",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
