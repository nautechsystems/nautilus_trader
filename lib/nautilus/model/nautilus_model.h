#ifndef add_h
#define add_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdint.h>

/**
 * Represents an entry in an order book.
 */
typedef struct OrderBookEntry {
  double price;
  double qty;
  uint64_t update_id;
} OrderBookEntry;

/**
 * Represents a limit order book
 */
typedef struct OrderBook {
  uint64_t timestamp;
  uint64_t last_update_id;
  double best_bid_price;
  double best_ask_price;
  double best_bid_qty;
  double best_ask_qty;
  struct OrderBookEntry _bid_book[25];
  struct OrderBookEntry _ask_book[25];
  const int32_t *_bid_book_test;
} OrderBook;

/**
 * Initialize a new instance of the `OrderBookEntry` structure.
 */
struct OrderBookEntry new_entry(double price, double qty, uint64_t update_id);

/**
 * Update the entry with the given quantity and update identifier.
 */
void update(struct OrderBookEntry *self, double qty, uint64_t update_id);

/**
 * Initialize a new instance of the `OrderBook` structure.
 */
struct OrderBook new(uint64_t timestamp);

/**
 * Clear stateful values from the order book.
 */
void reset(struct OrderBook *self);

/**
 * Apply the snapshot of 10 bids and 10 asks.
 */
void apply_snapshot10(struct OrderBook *self,
                      const struct OrderBookEntry (*bids)[10],
                      const struct OrderBookEntry (*asks)[10],
                      uint64_t update_id,
                      uint64_t timestamp);

/**
 * Apply the order book entry to the bid side.
 */
void apply_bid_diff(struct OrderBook *self, struct OrderBookEntry entry, uint64_t timestamp);

/**
 * Apply the order book entry to the ask side.
 */
void apply_ask_diff(struct OrderBook *self, struct OrderBookEntry entry, uint64_t timestamp);

/**
 * Returns the current spread from the top of the order book.
 */
double spread(const struct OrderBook *self);

/**
 * Returns the predicted buy price for the given quantity.
 *
 * If no ask entries or price is too far from the market then will return NaN.
 */
double buy_price_for_qty(struct OrderBook *self, double qty);

/**
 * Returns the predicted buy quantity for the given price.
 *
 * If no ask entries or price is too far from the market then will return 0.0.
 */
double buy_qty_for_price(struct OrderBook *self, double price);

/**
 * Returns the predicted sell price for the given quantity.
 *
 * If no bid entries or price is too far from the market then will return NaN.
 */
double sell_price_for_qty(struct OrderBook *self, double qty);

/**
 * Returns the predicted sell quantity for the given price.
 *
 * If no bid entries or price is too far from the market then will return 0.0.
 */
double sell_qty_for_price(struct OrderBook *self, double price);

#endif /* add_h */
