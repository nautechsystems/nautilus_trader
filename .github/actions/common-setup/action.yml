name: common-setup
description: Common environment setup

inputs:
  python-version:
    description: The Python version to setup
    required: true
  free-disk-space:
    description: Free disk space
    required: false
    default: "false"
  build-type:
    description: Type of build (pre-commit, test, release)
    required: false
    default: "release"

runs:
  using: "composite"
  steps:
    # > --------------------------------------------------
    # > OS
    - name: Free disk space (Ubuntu)
      if: inputs.free-disk-space == 'true' && runner.os == 'Linux'
      # https://github.com/jlumbroso/free-disk-space
      uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
      with:
        tool-cache: ${{ inputs.build-type != 'pre-commit' }}
        android: true
        dotnet: true
        haskell: ${{ inputs.build-type != 'pre-commit' }}
        large-packages: ${{ inputs.build-type != 'pre-commit' }}
        docker-images: true
        swap-storage: ${{ inputs.build-type != 'pre-commit' }}

    - name: Free disk space (Windows)
      if: inputs.free-disk-space == 'true' && runner.os == 'Windows'
      shell: bash
      env:
        BUILD_TYPE: ${{ inputs.build-type }}
      run: |
        rm -rf "/c/Program Files/dotnet"
        if [ "$BUILD_TYPE" != "pre-commit" ]; then
          rm -rf "/c/Program Files (x86)/Microsoft Visual Studio/2019"
        fi

    - name: Install runner dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -o Acquire::Retries=5
        sudo apt-get install -y curl clang git make pkg-config ripgrep -o Acquire::Retries=5
        sudo apt-get install -y python3-dev libpython3-dev -o Acquire::Retries=5
        sudo apt-get install -y capnproto libcapnp-dev -o Acquire::Retries=5
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    - name: Install capnproto (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew update || { sleep 5; brew update; }
        brew install capnp ripgrep || { sleep 5; brew install capnp ripgrep; }
        brew cleanup

    - name: Install capnproto (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install capnproto ripgrep -y || {
          echo "capnproto/ripgrep install via choco failed or unavailable"
          sleep 5
          choco install capnproto ripgrep -y || true
        }

    # > --------------------------------------------------
    # > Rust
    # GitHub runners come with a pre-installed Rust toolchain, this step forces an update
    # to ensure we have the latest version before setting our specific toolchain.
    # setup-rust-toolchain should handle this with override: true, but doesn't seem to work.
    - name: Reset and update Rust toolchain
      shell: bash
      run: bash scripts/ci/install-rust.sh

    - name: Get Rust toolchain version
      id: rust-toolchain
      shell: bash
      run: |
        echo "TOOLCHAIN=$(bash scripts/rust-toolchain.sh)" >> $GITHUB_ENV

    # https://github.com/actions-rust-lang/setup-rust-toolchain
    - name: Set up Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
      with:
        toolchain: ${{ env.TOOLCHAIN }}
        components: clippy,rustfmt
        override: true

    - name: Install cargo-nextest
      if: inputs.build-type != 'pre-commit'
      # https://github.com/taiki-e/install-action # v2.53.2
      uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb
      with:
        tool: nextest

    # > --------------------------------------------------
    # > sccache
    - name: Set sccache env vars (common)
      if: inputs.build-type != 'pre-commit'
      shell: bash
      run: |
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

        # Respect pre-existing settings from the workflow env; otherwise set sane defaults
        if [ -z "${SCCACHE_CACHE_SIZE:-}" ]; then echo "SCCACHE_CACHE_SIZE=4G" >> $GITHUB_ENV; fi
        if [ -z "${SCCACHE_IDLE_TIMEOUT:-}" ]; then echo "SCCACHE_IDLE_TIMEOUT=0" >> $GITHUB_ENV; fi
        if [ -z "${SCCACHE_DIRECT:-}" ]; then echo "SCCACHE_DIRECT=true" >> $GITHUB_ENV; fi
        if [ -z "${SCCACHE_CACHE_MULTIARCH:-}" ]; then echo "SCCACHE_CACHE_MULTIARCH=1" >> $GITHUB_ENV; fi

        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV

    - name: Set sccache env vars (non-Windows)
      if: runner.os != 'Windows' && inputs.build-type != 'pre-commit'
      shell: bash
      run: |
        echo "SCCACHE_DIR=${{ github.workspace }}/.cache/sccache" >> $GITHUB_ENV
        echo "CC=sccache clang" >> $GITHUB_ENV
        echo "CXX=sccache clang++" >> $GITHUB_ENV

    - name: Set sccache env vars (Windows)
      if: runner.os == 'Windows' && inputs.build-type != 'pre-commit'
      shell: bash
      run: |
        echo SCCACHE_DIR="C:\.cache\sccache" >> $GITHUB_ENV
        echo CMAKE_C_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV
        echo CMAKE_CXX_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV

    - name: Cached sccache
      if: inputs.build-type != 'pre-commit'
      id: cached-sccache
      # https://github.com/actions/cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ env.SCCACHE_DIR }}
        key:
          sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{
          hashFiles('**/Cargo.toml', '**/Cargo.lock', '**/uv.lock') }}
        restore-keys: |
          sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-
          sccache-${{ runner.os }}-${{ github.workflow }}-
          sccache-${{ runner.os }}-

    - name: Run sccache
      if: inputs.build-type != 'pre-commit'
      # https://github.com/Mozilla-Actions/sccache-action
      uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

    # > --------------------------------------------------
    # > Python
    - name: Set up Python environment
      # https://github.com/actions/setup-python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: Ensure ~/.local/bin on PATH
      shell: bash
      run: |
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: Get Python version
      shell: bash
      run: |
        echo "PYTHON_VERSION=$(bash scripts/python-version.sh)" >> $GITHUB_ENV

    - name: Cache Python site-packages
      id: cached-site-packages
      # https://github.com/actions/cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.local/lib/python${{ inputs.python-version }}/site-packages
        key: ${{ runner.os }}-${{ inputs.python-version }}-site-packages
        restore-keys: |
          ${{ runner.os }}-site-packages-

    - name: Install pre-commit
      shell: bash
      run: pip install pre-commit==4.2.0

    # > --------------------------------------------------
    # > UV
    - name: Get uv version from uv-version
      shell: bash
      run: |
        echo "UV_VERSION=$(cat uv-version)" >> $GITHUB_ENV

    - name: Install uv
      # https://github.com/astral-sh/setup-uv
      uses: astral-sh/setup-uv@3259c6206f993105e3a61b142c2d97bf4b9ef83d # v7.1.0
      with:
        version: ${{ env.UV_VERSION }}

    - name: Set uv cache-dir
      shell: bash
      run: |
        echo "UV_CACHE_DIR=$(uv cache dir)" >> $GITHUB_ENV

    - name: Cached uv
      id: cached-uv
      # https://github.com/actions/cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('**/uv.lock') }}

    # > --------------------------------------------------
    # > pre-commit
    - name: Cached pre-commit
      id: cached-pre-commit
      # https://github.com/actions/cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
