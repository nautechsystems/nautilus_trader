name: docker

# Build and push NautilusTrader docker images

on:
  push:
    branches: [ master, develop ]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      # Install build dependencies
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox

      # Setup cached pre-commit
      - name: Setup cached pre-commit
        id: cache-pre-commit
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-

      # Run pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: cache-poetry
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-poetry.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install and run database dependencies
      - name: Install Redis
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      # Run tests
      - name: Run tests
        run: nox -rs tests_with_integration

  docker:
    needs: [ build ]
    name: build-docker-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Build docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.2

      # Set nautilus_trader docker image name
      - name: Image name for nautilus_trader
        id: trader_image_name
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ steps.branch-name.outputs.current_branch == 'master' }}
          if_true: echo "::set-output name=tag::$(ghcr.io/${{ github.repository_owner }}/nautilus_trader:latest)"
          if_false: echo "::set-output name=tag::$(ghcr.io/${{ github.repository_owner }}/nautilus_trader:${{ steps.branch-name.outputs.current_branch }})"

      # Build nautilus_trader docker image
      - name: Build trader image
        id: docker_build_trader
        uses: docker/build-push-action@v2
        with:
          file: ".docker/nautilus_trader.dockerfile"
          push: true
          tags: ${{ steps.trader_image_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha

      - name: Digest nautilus_trader image
        run: echo ${{ steps.docker_build_trader.outputs.digest }}

      # Set jupyterlab docker image name
      - name: Image name for jupyterlab
        id: jupyterlab_image_name
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ steps.branch-name.outputs.current_branch == 'master' }}
          if_true: echo "::set-output name=tag::$(ghcr.io/${{ github.repository_owner }}/jupyterlab:latest)"
          if_false: echo "::set-output name=tag::$(ghcr.io/${{ github.repository_owner }}/jupyterlab:${{ steps.branch-name.outputs.current_branch }})"

      # Build jupyterlab docker image
      - name: Build jupyterlab image
        id: docker_build_jupyterlab
        uses: docker/build-push-action@v2
        with:
          file: ".docker/jupyterlab.dockerfile"
          push: true
          tags: ${{ steps.jupyterlab_image_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            GIT_TAG=${{ steps.jupyterlab_image_name.outputs.tag }}

      - name: Digest jupyterlab image
        run: echo ${{ steps.docker_build_jupyterlab.outputs.digest }}
