name: build_pr

# Build and test NautilusTrader

on:
  pull_request:
    branches: [develop]

jobs:
  build_pr:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit

      # Setup cached pre-commit
      - name: Setup cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      # Run pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: cached-poetry-dir
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ steps.cached-poetry-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      # Install and run database dependencies
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      - name: Install Memurai (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install memurai-developer.install

      # Run nautilus_core checks (Linux & macOS)
      - name: Run nautilus_core cargo checks
        if: runner.os != 'Windows'
        run: |
          (cd nautilus_core && cargo fmt --all -- --check)
          (cd nautilus_core && cargo clippy -- -D warnings)

      # Run nautilus_core tests (Linux & macOS)
      - name: Run nautilus_core cargo tests
        if: runner.os != 'Windows'
        run: make cargo-test

      # Run tests (Linux)
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: make pytest

      # Run tests (macOS)
      - name: Run tests (macOS)
        if: runner.os == 'macOS'
        run: make pytest

      # Run tests (Windows) without parallel build (avoids linker errors)
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          poetry install --with test --extras "betfair docker ib redis"
          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first
        env:
          PARALLEL_BUILD: false
