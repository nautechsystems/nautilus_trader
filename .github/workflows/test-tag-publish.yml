name: test-tag-publish

# This performs the following:
# 1. test
# 2. tag (if on master)
# 3. publish to PyPi (if tagged on master)

on: push

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.6, 3.7, 3.8 ]
    name: test - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Run tests
      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install redis-server
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: brew install redis

      - name: Run tests (with integrations test suite) [Linux/macOS]
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
        run: |
          redis-server --daemonize yes
          nox -s tests_with_integration --reuse-existing-virtualenvs
          redis-cli shutdown

      - name: Run tests (without integrations test suite) [Windows]
        if: runner.os == 'Windows'
        run: nox -s tests_without_integration --reuse-existing-virtualenvs


  tag:
    if: github.ref == 'refs/heads/master'
    needs: [ test ]

    strategy:
      matrix:
        # We only actually run on a single OS/Python pair, but use the matrix
        # form so that our Action calls can mirror the main test flow.
        python-version: [ 3.8 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install
      - name: Install
        run: poetry install

      # Tag the commit with the library version
      - name: Create git tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          version-command: poetry version


  # Publish if we're on master and the commit is tagged
  publish:
    if: github.ref == 'refs/heads/master'
    needs: [ test, tag ]

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.6, 3.7, 3.8 ]
    name: publish - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install
      - name: Install
        run: poetry install

      # Build
      - name: Build
        run: poetry build

      # Publish
      - name: Publish to production PyPi
        if: startsWith(github.ref, 'refs/tags')
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
