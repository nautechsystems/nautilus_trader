name: test-tag-publish

# Test, tag then publish pushes on the master branch

on:
  push:
    branches: [ master ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.7, 3.8, 3.9 ]
    name: test - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install and run database dependencies
      - name: Install Memurai (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install memurai-developer.install

      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      # Run tests
      - name: Run tests
        run: nox -s tests_with_integration --reuse-existing-virtualenvs


  tag_release:
    needs: [ test ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    name: test-tag-publish - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install
      - name: Install
        run: poetry install

      # Tag the commit with the library version
      - name: Create git tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          version-command: poetry version --short

      # Set release output variables
      - name: Set output
        id: vars
        run: |
          echo "::set-output name=tag_name::v$(poetry version --short)"
          echo "::set-output name=release_name::NautilusTrader $(poetry version --short) Beta"
          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md

      # Create GitHub release
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.vars.outputs.tag_name }}
          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false
          body_path: RELEASE.md


  publish_sdist:
    needs: [ tag_release ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install / Build
      - name: Install / Build
        run: |
          poetry install
          poetry build --format sdist

      # Set release output variables
      - name: Set output
        id: vars
        run: |
          echo "::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)"
          cd dist
          echo "::set-output name=asset_name::$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')"

      # Upload release asset
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}
          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}
        with:
          upload_url: ${{ needs.tag_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip

      # Publish
      - name: Publish to production PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish


  publish_wheels:
    needs: [ tag_release ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.7, 3.8, 3.9 ]
    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install / Build
      - name: Install / Build
        run: |
          poetry install
          poetry build --format wheel

      # Set release output variables
      - name: Set output
        id: vars
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)"
            echo "::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)"
          else
            echo "::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)"
            cd dist
            echo "::set-output name=asset_name::$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')"
          fi

      # Upload release asset
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}
          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}
        with:
          upload_url: ${{ needs.tag_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/wheel

      # Publish
      - name: Publish to production PyPI
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
