name: test-tag-publish

# Test, tag then publish pushes on the master branch

on:
  push:
    branches: [ master ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.7, 3.8, 3.9 ]
    name: test - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Run tests
      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install redis-server
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: brew install redis

      - name: Run tests (with integrations test suite) [Linux/macOS]
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
        run: |
          redis-server --daemonize yes
          nox -s tests_with_integration --reuse-existing-virtualenvs
          redis-cli shutdown


  tag_release:
    needs: [ test ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    name: test-tag-publish - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install
      - name: Install
        run: poetry install

      # Tag the commit with the library version
      - name: Create git tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          version-command: poetry version --short

      # Set release environment variables
      - name: Set release env variables
        run: |
          echo ::set-env name=VERSION::$(poetry version --short)
          echo ::set-env name=TAG_NAME::$(echo v$VERSION)
          echo ::set-env name=RELEASE_NAME::$(echo NautilusTrader $VERSION Beta)

      # Create GitHub release
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false


  publish_sdist:
    needs: [ tag_release ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install / Build
      - name: Install / Build
        run: |
          poetry install
          poetry build --format sdist

      # Set release environment variables
      - name: Set release env variables
        run: |
          echo ::set-env name=VERSION::$(poetry version --short)
          echo ::set-env name=TAG_NAME::$(echo v$VERSION)
          echo ::set-env name=RELEASE_URL::$(echo https://github.com/nautechsystems/nautilus_trader/releases/tag/$TAG_NAME)

      # Upload Release Asset
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: find ./dist -mindepth 1 -print -quit
          asset_name: (cd dist/; printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')
          asset_content_type: application/zip

# TODO: Temporarily out of space on PyPI
#      # Publish
#      - name: Publish to production PyPI
#        env:
#          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
#        run: poetry publish


  publish_wheels:
    needs: [ tag_release ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ 3.7, 3.8, 3.9 ]
    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry --use-feature=2020-resolver

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install / Build
      - name: Install / Build
        run: |
          poetry install
          poetry build --format wheel

      # Set release environment variables
      - name: Set release env variables
        run: |
          echo ::set-env name=VERSION::$(poetry version --short)
          echo ::set-env name=TAG_NAME::$(echo v$VERSION)
          echo ::set-env name=RELEASE_URL::$(echo https://github.com/nautechsystems/nautilus_trader/releases/tag/$TAG_NAME)

      # Upload Release Asset
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: find ./dist -mindepth 1 -print -quit
          asset_name: (cd dist/; printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')
          asset_content_type: application/wheel

# TODO: Temporarily out of space on PyPI
#      # Publish
#      - name: Publish to production PyPI
#        env:
#          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
#        run: poetry publish
