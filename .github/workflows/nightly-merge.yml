name: nightly-merge

on:
  push:
    branches: [nightly-merge-test]
  schedule:
    - cron: '0 14 * * *'  # At 14:00 UTC every day

jobs:
  nightly-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NIGHTLY_TOKEN }}
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Configure Git user
        run: |
          git config --global user.name "nautilus-trader-bot"
          git config --global user.email "bot@nautechsystems.io"

      - name: Nightly merge
        id: merge
        uses: robotology/gh-action-nightly-merge@v1.5.2
        with:
          stable_branch: 'develop'  # Branch to merge from
          development_branch: 'nightly'  # Branch to merge to
          allow_ff: false
          user_name: 'nautilus-trader-bot'
          user_email: 'bot@nautechsystems.io'
          push_token: 'NIGHTLY_TOKEN'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}

      - name: Check merge result
        id: check_merge
        run: |
          if [[ $(git rev-parse HEAD) == $(git merge-base HEAD develop) ]]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes needed to be merged"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes were merged"
          fi

      - name: Log no-merge message
        if: steps.check_merge.outputs.changes == 'false'
        run: echo "No changes were merged into the nightly branch, skipping version update"

      - name: Update version for nightly build
        if: steps.check_merge.outputs.changes == 'true'
        run: |
          current_version=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)
          date_suffix=".dev$(date +%Y%m%d)"
          if [[ $current_version != *"$date_suffix" ]]; then
            if ! sed -i "s/^version = \".*\"/version = \"${current_version}${date_suffix}\"/" pyproject.toml; then
                echo "Error updating version in pyproject.toml"
                exit 1
            fi
            poetry lock --no-update  # Update lock file without installing dependencies
            git add pyproject.toml poetry.lock
            git remote set-url origin https://x-access-token:${{ secrets.NIGHTLY_TOKEN }}@github.com/${{ github.repository }}
            git commit -m "Update nightly version suffix ${date_suffix}"
            git push
          else
            echo "Version already has the nightly suffix; no changes made"
          fi

      - name: Log updated version
        if: steps.check_merge.outputs.changes == 'true'
        run: |
          echo "Updated version in pyproject.toml:"
          grep '^version = ' pyproject.toml
