name: build-wheels

on:
  push:
    branches: [nightly]

jobs:
  build-wheels:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      # https://github.com/Mozilla-Actions/sccache-action
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_CACHE_MULTIARCH: 1
      RUSTC_WRAPPER: "sccache"
      CC: "sccache clang"
      CXX: "sccache clang"

    steps:
      - name: Free disk space (Ubuntu)
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: false
          haskell: false
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install runner dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Set up Rust toolchain
        run: |
          rustup toolchain add --profile minimal stable --component clippy,rustfmt

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Python version
        run: |
          version=$(bash scripts/python-version.sh)
          echo "PYTHON_VERSION=$version" >> $GITHUB_ENV

      - name: Get Poetry version from poetry-version
        run: |
          version=$(cat poetry-version)
          echo "POETRY_VERSION=$version" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Set poetry cache-dir
        run: echo "POETRY_CACHE_DIR=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Cached poetry
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Update version in pyproject.toml
        run: |
          current_version=$(grep '^version = ' pyproject.toml | cut -d '"' -f2)
          date_suffix=".dev$(date +%Y%m%d)"
          if [[ $current_version != *"$date_suffix" ]]; then
            sed -i.bak "s/^version = \".*\"/version = \"${current_version}${date_suffix}\"/" pyproject.toml
            rm -f pyproject.toml.bak  # Clean up backup file
            echo "Updated version to ${current_version}${date_suffix}"
          else
            echo "Version already updated to ${current_version}${date_suffix}"
          fi

      - name: Generate updated lock file
        run: poetry lock --no-update

      - name: Install / Build
        run: |
          poetry install
          poetry build --format wheel

      - name: Log built wheel
        run: ls -lh dist/

      - name: Set release output
        id: vars
        run: |
          echo "ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)" >> $GITHUB_ENV
          cd dist
          echo "ASSET_NAME=$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')" >> $GITHUB_ENV

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  publish-wheels:
    name: Publish to packages
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Configure Git user
        run: |
          git config --global user.name "nautilus-trader-bot"
          git config --global user.email "bot@nautechsystems.io"

      - name: Publish to packages branch
        run: |
          set -eo pipefail
          rm -rf packages  # Ensure clean state
          git clone --branch=packages https://github.com/${{ github.repository }} packages
          cd packages

          # Ensure package directory exists
          mkdir -p simple/nautilus-trader/

          # Prune old wheels
          echo "Pruning wheels older than 30 days"
          find simple/nautilus-trader/ -type f -mtime +30 -name "*.whl" -exec rm -f {} \;

          # Check wheels
          if [ -z "$(ls -A ../dist/*.whl)" ]; then
              echo "No wheels found in dist/, exiting"
              exit 1
          fi

          # Copy new wheels
          find ../dist/ -name "*.whl" -exec cp {} simple/nautilus-trader/ \;
          ls -lh simple/nautilus-trader/

          # Generate index.html
          echo "Generating index.html for simple/nautilus-trader/"
          cd simple/nautilus-trader/
          echo "<!DOCTYPE html>" > index.html
          echo "<html><body>" >> index.html
          for file in *.whl; do
            echo "<a href=\"$file\">$file</a><br>" >> index.html
          done
          echo "</body></html>" >> index.html
          cd ../../

          # Publish wheels
          git remote set-url origin https://x-access-token:${{ secrets.NIGHTLY_TOKEN }}@github.com/${{ github.repository }}
          git add .
          if git diff-index --quiet HEAD --; then
              echo "No changes to commit"
          else
              git commit -m "Publish nightly wheels from ${{ github.sha }}"
              git push
          fi
