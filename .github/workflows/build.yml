name: build

# Build and test NautilusTrader

on:
  push:
    branches: [ master, develop ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, ARM64 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Rust setup
      - name: Set up Rust environment
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy

      # Cargo setup
      - name: Set up Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit

      # Setup cached pre-commit
      - name: Setup cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      # Run pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

      # Setup cached Poetry
      - name: Get Poetry cache dir
        id: cached-poetry-dir
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ steps.cached-poetry-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      # Install and run database dependencies
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      - name: Install Memurai (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install memurai-developer.install

      # Run nautilus_core checks (Linux & macOS)
      - name: Run nautilus_core cargo checks
        if: runner.os != 'Windows'
        run: |
          (cd nautilus_core && cargo fmt --all -- --check)
          (cd nautilus_core && cargo clippy -- -D warnings)

      # Run nautilus_core tests (Linux & macOS)
      - name: Run nautilus_core cargo tests
        if: runner.os != 'Windows'
        run: make cargo-test

      # Run tests (Linux)
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: nox -rs tests_all

      # Run tests (macOS)
      - name: Run tests (macOS)
        if: runner.os == 'macOS'
        run: nox -rs tests_all

      # Run tests (Windows) without parallel build (avoids linker errors)
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: nox -rs tests_all -- no-parallel

  docker:
    name: build-docker-images
    runs-on: ubuntu-latest
    needs: build
    env:
      BUILD_MODE: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Build docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.2

      # Build nautilus_trader docker image (develop)
      - name: Build nautilus_trader image (develop)
        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}
        id: docker_build_trader_develop
        uses: docker/build-push-action@v2
        with:
          file: ".docker/nautilus_trader.dockerfile"
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:develop
          cache-from: type=gha
          cache-to: type=gha
      - name: Digest nautilus_trader image
        run: echo ${{ steps.docker_build_trader_develop.outputs.digest }}

      # Build nautilus_trader docker image (latest)
      - name: Build nautilus_trader image (latest)
        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}
        id: docker_build_trader_latest
        uses: docker/build-push-action@v2
        with:
          file: ".docker/nautilus_trader.dockerfile"
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:latest
          cache-from: type=gha
          cache-to: type=gha
      - name: Digest nautilus_trader image
        run: echo ${{ steps.docker_build_trader_latest.outputs.digest }}

      # Build jupyterlab docker image (develop)
      - name: Build jupyterlab image (develop)
        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}
        id: docker_build_jupyterlab_develop
        uses: docker/build-push-action@v2
        with:
          file: ".docker/jupyterlab.dockerfile"
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:develop
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            GIT_TAG=${{ steps.branch-name.outputs.current_branch }}
      - name: Digest jupyterlab image
        run: echo ${{ steps.docker_build_jupyterlab_develop.outputs.digest }}

      # Build jupyterlab docker image (latest)
      - name: Build jupyterlab image (latest)
        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}
        id: docker_build_jupyterlab_latest
        uses: docker/build-push-action@v2
        with:
          file: ".docker/jupyterlab.dockerfile"
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:latest
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            GIT_TAG=latest
      - name: Digest jupyterlab image
        run: echo ${{ steps.docker_build_jupyterlab_latest.outputs.digest }}
