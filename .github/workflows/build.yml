name: build

# Build and test NautilusTrader

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [develop]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: debug
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Rust setup (ensures latest stable)
      - name: Set up Rust tool-chain (Liux/Windows)
        if: runner.os != 'macOS'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Set up Rust tool-chain (macOS)
        if: runner.os == 'macOS'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2

      # Setup cached pre-commit
      - name: Setup cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      # Setup Poetry caching
      - name: Set output (Linux)
        if: runner.os == 'Linux'
        run: echo "dir=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Set output (macOS)
        if: runner.os == 'macOS'
        run: echo "dir=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Set output (Windows)
        if: runner.os == 'Windows'
        run: echo "dir=$(poetry config cache-dir)" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV

      - name: Poetry cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      # Run pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

      # Install and run database dependencies
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      # Run nautilus_core tests (Linux & macOS)
      - name: Run nautilus_core cargo tests
        if: runner.os != 'Windows'
        run: make cargo-test

      # Run tests (Linux)
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: |
          make pytest
          make test-examples

      # Run tests (macOS)
      - name: Run tests (macOS)
        if: runner.os == 'macOS'
        run: |
          make pytest
          make test-examples

      # Run tests (Windows) without parallel build (avoids linker errors)
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          poetry install --with test --all-extras
          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first
        env:
          PARALLEL_BUILD: false
