name: build

# Build and test NautilusTrader

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Rust setup
      - name: Set up Rust environment
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy

      # Cargo setup
      - name: Set up cached Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit

      # Setup cached pre-commit
      - name: Setup cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-

      # Run pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

      # Setup cached Poetry
      - name: Get Poetry cache dir
        id: cached-poetry-dir
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        id: cached-poetry
        uses: actions/cache@v2
        with:
          path: ${{ steps.cached-poetry-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Setup cached Poetry
#      - name: Setup cached Poetry
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies
#      - name: Install dependencies
#        if: steps.cached-poetry.outputs.cache-hit != 'true'
#        run: poetry install --no-interaction --no-root
#
#      # Install project
#      - name: Install project
#        run: poetry install --no-interaction

      # Install and run database dependencies
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      - name: Install Memurai (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install memurai-developer.install

      # Run core tests
#      - name: Run core tests
#        run: (cd nautilus_core && cargo test --no-default-features)

      # Run tests (Linux)
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: nox -rs tests_all

      # Run tests (macOS)
      - name: Run tests (macOS)
        if: runner.os == 'macOS'
        run: nox -rs tests_all

      # Run tests (Windows) without parallel build (avoids linker errors)
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: nox -rs tests_all -- no-parallel
