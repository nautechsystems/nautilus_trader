name: coverage

on:
  push:
    branches: [nightly]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # > --------------------------------------------------
      # > sccache
      # https://github.com/Mozilla-Actions/sccache-action
      SCCACHE_IDLE_TIMEOUT: 0
      SCCACHE_DIRECT: "true"
      SCCACHE_CACHE_MULTIARCH: 1
      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache
      RUSTC_WRAPPER: "sccache"
      CC: "sccache clang"
      CXX: "sccache clang++"
      # Incrementally compiled crates cannot be cached by sccache
      # https://github.com/mozilla/sccache#rust
      CARGO_INCREMENTAL: 0
      # > --------------------------------------------------

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: nautilus
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install runner dependencies
        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        run: |
          rustup toolchain add --profile minimal stable --component clippy,rustfmt

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Get Python version
        run: |
          version=$(bash scripts/python-version.sh)
          echo "PYTHON_VERSION=$version" >> $GITHUB_ENV

      - name: Get Poetry version from poetry-version
        run: |
          version=$(cat poetry-version)
          echo "POETRY_VERSION=$version" >> $GITHUB_ENV

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec

      - name: Cached sccache
        id: cached-sccache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}
          restore-keys: |
            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-
            sccache-${{ runner.os }}-${{ github.workflow }}-
            sccache-${{ runner.os }}-

      - name: Run sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Set poetry cache-dir
        run: echo "POETRY_CACHE_DIR=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Cached poetry
        id: cached-poetry
        uses: actions/cache@v4.2.0
        with:
          path: ${{ env.POETRY_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Cached test data
        id: cached-testdata-large
        uses: actions/cache@v4.2.0
        with:
          path: tests/test_data/large
          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}
          restore-keys: ${{ runner.os }}-large-files-

      - name: Install Nautilus CLI and run init postgres
        run: |
          make install-cli
          nautilus database init --schema ${{ github.workspace }}/schema/sql
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DATABASE: nautilus

      - name: Run tests with coverage
        run: make pytest-coverage

      # TODO: Temporarily pause coverage report due pending test data repair
      # - name: Upload coverage report
      #   uses: codecov/codecov-action@v4
      #   with:
      #     # fail_ci_if_error: true  # leave commented until flakiness improves
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     verbose: true
