name: performance

permissions: # Principle of least privilege
  contents: read
  actions: read

on:
  push:
    branches: [nightly]

jobs:
  performance-benchmarks:
    runs-on: ubuntu-latest
    env:
      BUILD_MODE: release
      RUST_BACKTRACE: 1
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: nautilus
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      # https://github.com/step-security/harden-runner
      - uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - name: Checkout repository
        # https://github.com/actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Common setup
        uses: ./.github/actions/common-setup
        with:
          python-version: "3.12"
          free-disk-space: "true"

      - name: Run pre-commit # Runs again here to check pre-commit with Python 3.12
        run: make pre-commit

      - name: Install Nautilus CLI and run init postgres
        run: |
          make install-cli
          nautilus database init --schema ${{ github.workspace }}/schema/sql
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DATABASE: nautilus

      - name: Cached test data
        uses: ./.github/actions/common-test-data

      - name: Run Rust tests
        run: make cargo-test

      # TODO: Add nautilus-persistence once required test data available
      - name: Run Rust benchmarks crate-by-crate
        run: |
          # Workspace-wide `cargo bench` fails due to mixed panic strategies
          # (`abort` from our cdylib/staticlib targets vs `unwind` from
          # Criterion/iai).  Invoking benches one crate at a time keeps each
          # link step internally consistent while Cargo reuses artifacts so we
          # don't pay the full compile cost for every crate.

          CRATES=(
            nautilus-common
            nautilus-core
            nautilus-model
          )

          for crate in "${CRATES[@]}"; do
            echo "▶▶ Running benches for $crate"
            cargo bench -p "$crate" --benches --no-fail-fast --profile bench
          done

      - name: Build and install wheel
        uses: ./.github/actions/common-wheel-build
        with:
          python-version: "3.12"
          github_ref: ${{ github.ref }}

      # Run codspeed once only
      - name: Run benchmarks
        # https://github.com/CodSpeedHQ/action
        uses: CodSpeedHQ/action@0010eb0ca6e89b80c88e8edaaa07cfe5f3e6664d # v3.5.0
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: uv run --no-sync pytest tests/performance_tests --benchmark-disable-gc --codspeed
