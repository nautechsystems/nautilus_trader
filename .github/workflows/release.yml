name: release

# Release on successful completion of the `build` workflow on the `master` branch

on:
  workflow_run:
    workflows:
      - build
    branches: [master]
    types:
      - completed

jobs:
  tag-release:
    if: github.event.workflow_run.conclusion == 'success'
    name: tag-release - python 3.11 (ubuntu-latest)
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Common setup
        uses: ./.github/actions/common-setup
        with:
          python-version: "3.11"
          free-disk-space: "true"

      - name: Ensure script is executable
        run: chmod +x scripts/package-version.sh

      - name: Create git tag
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          version-command: ./scripts/package-version.sh

      - name: Set output
        id: vars
        run: |
          echo "TAG_NAME=v$(./scripts/package-version.sh)" >> $GITHUB_ENV
          echo "RELEASE_NAME=NautilusTrader $(./scripts/package-version.sh) Beta" >> $GITHUB_ENV
          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md

      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false
          body_path: RELEASE.md

  publish-sdist:
    if: github.event.workflow_run.conclusion == 'success'
    needs: [tag-release]
    name: publish-sdist - python 3.11 (ubuntu-latest)
    runs-on: ubuntu-latest
    env:
      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Common setup
        uses: ./.github/actions/common-setup
        with:
          python-version: "3.11"
          free-disk-space: "true"

      - name: Build sdist
        run: |
          uv build --sdist

      - name: Set release output
        id: vars
        run: |
          if [ ! -d "./dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

          ASSET_PATH=$(find ./dist -name "*.tar.gz" -type f | xargs ls -t 2>/dev/null | head -n 1)

          if [ -z "$ASSET_PATH" ]; then
            echo "Error: No .tar.gz files found in dist directory"
            exit 1
          fi

          echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
          echo "ASSET_NAME=$(basename "$ASSET_PATH")" >> $GITHUB_ENV

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.tag-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/gzip

      - name: Publish to PyPI
        env:
          UV_PUBLISH_USERNAME: ${{ secrets.PYPI_USERNAME }}
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: uv publish

  publish-wheels:
    if: github.event.workflow_run.conclusion == 'success'
    needs: [tag-release]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest] # Change to ubuntu-latest when GitHub stabilizes
        python-version: ["3.11", "3.12"]
    defaults:
      run:
        shell: bash
    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Common setup
        uses: ./.github/actions/common-setup
        with:
          python-version: ${{ matrix.python-version }}
          free-disk-space: "true"

      - name: Build wheel
        uses: ./.github/actions/common-wheel-build
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set release output
        id: vars
        run: |
          if [ ! -d "./dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

          ASSET_PATH=$(find ./dist -name "*.whl" -type f | xargs ls -t 2>/dev/null | head -n 1)

          if [ -z "$ASSET_PATH" ]; then
            echo "Error: No .whl files found in dist directory"
            exit 1
          fi

          echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
          echo "ASSET_NAME=$(basename "$ASSET_PATH")" >> $GITHUB_ENV

      - name: Upload release asset
        id: upload-release-asset-unix
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.tag-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/wheel

      - name: Publish to PyPI
        env:
          UV_PUBLISH_USERNAME: ${{ secrets.PYPI_USERNAME }}
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: uv publish
