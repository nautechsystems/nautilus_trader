name: build-test

# Build and test NautilusTrader then build and deploy the docs

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  pre-commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0

  build_test:
    needs: [ pre-commit ]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.8, 3.9 ]
    name: build_test - Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel poetry nox

      # Setup Poetry caching
      - name: Get Poetry cache dir
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Poetry/Nox cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-

      # Install and run database dependencies
      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      # Run tests
      - name: Run tests
        run: nox -rs tests_with_integration -- no-parallel

      # Run code coverage
      - name: Run code coverage
        if: runner.os == 'Linux'
        run: nox -rs coverage -- no-parallel

      # Upload coverage report to codecov
      - name: Upload coverage report
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          verbose: true

      # Run performance tests
      - name: Run performance tests
        run: nox -rs performance_tests -- no-parallel

      # Store benchmark results
      - name: Store benchmark result
        uses: rhysd/github-action-benchmark@v1
        with:
          name: Benchmark with pytest-benchmark
          tool: "pytest"
          output-file-path: output.json
          github-token: ${{ secrets.GHPAGES_ACCESS }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-always: true
          fail-on-alert: false

  docs:
    needs: [ build_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Python setup
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install build dependencies
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools poetry

      # Export package requirements
      - name: Export package requirements
        run: poetry export --extras docs --without-hashes -f requirements.txt > requirements.txt

      # Install package dependencies
      - name: Install package dependencies
        run: pip install -r requirements.txt

      # Install extra docs dependencies
      - name: Install extra docs dependencies
        run: pip install toml numpydoc sphinx sphinx-rtd-theme

      # Build project
      - name: Build project
        run: python build.py

      # Build docs
      - name: Build docs
        run: catchsegv sphinx-build docs/source docs/build

      # Add nojeckyll
      - name: Add nojeckyll
        run: touch docs/build/.nojekyll

      # Add CNAME
      - name: Add CNAME
        run: echo "api.nautilustrader.io" >> docs/build/CNAME

      # Publish API docs
      - name: Publish API docs
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs/build
          SQUASH_HISTORY: false
          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}
