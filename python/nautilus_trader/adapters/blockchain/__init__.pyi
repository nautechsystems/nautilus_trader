# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: D401, E501

import builtins
import typing

import nautilus_trader.infrastructure
import nautilus_trader.model

class BlockchainDataClientConfig:
    r"""
    Configuration for blockchain data clients.
    """

    def __init__(
        self,
        chain: nautilus_trader.model.Chain,
        dex_ids: typing.Sequence[nautilus_trader.model.DexType],
        http_rpc_url: builtins.str,
        rpc_requests_per_second: builtins.int | None,
        multicall_calls_per_rpc_request: builtins.int | None,
        wss_rpc_url: builtins.str | None,
        use_hypersync_for_live_data: builtins.bool,
        from_block: builtins.int | None,
        pool_filters: DexPoolFilters | None,
        postgres_cache_database_config: (
            nautilus_trader.infrastructure.PostgresConnectOptions | None
        ),
    ) -> None:
        r"""
        Creates a new `BlockchainDataClientConfig` instance.
        """

    def chain(self) -> nautilus_trader.model.Chain:
        r"""
        Returns the chain configuration.
        """

    def http_rpc_url(self) -> builtins.str:
        r"""
        Returns the HTTP RPC URL.
        """

    def wss_rpc_url(self) -> builtins.str | None:
        r"""
        Returns the WebSocket RPC URL.
        """

    def rpc_requests_per_second(self) -> builtins.int | None:
        r"""
        Returns the RPC requests per second limit.
        """

    def use_hypersync_for_live_data(self) -> builtins.bool:
        r"""
        Returns whether to use HyperSync for live data.
        """

    def from_block(self) -> builtins.int | None:
        r"""
        Returns the starting block for sync.
        """

class BlockchainDataClientFactory:
    r"""
    Factory for creating blockchain data clients.

    This factory creates `BlockchainDataClient` instances configured for different blockchain networks
    (Ethereum, Arbitrum, Base, Polygon) with appropriate RPC and HyperSync configurations.
    """

class DexPoolFilters:
    r"""
    Defines filtering criteria for the DEX pool universe that the data client will operate on.
    """

    def __init__(self, remove_pools_with_empty_erc20_fields: builtins.bool | None) -> None:
        r"""
        Creates a new `DexPoolFilters` instance.
        """
