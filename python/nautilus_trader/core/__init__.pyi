# This file is automatically generated by pyo3_stub_gen

import builtins
import typing

def convert_to_snake_case(input: builtins.str) -> builtins.str:
    r"""
    Convert the given string from any common case (PascalCase, camelCase, kebab-case, etc.)
    to *lower* `snake_case`.

    This function uses the `heck` Rust crate under the hood.

    Parameters
    ----------
    input : str
        The input string to convert.

    Returns
    -------
    str
    """

def is_pycapsule(obj: typing.Any) -> builtins.bool:
    r"""
    Return a value indicating whether the `obj` is a `PyCapsule`.

    Parameters
    ----------
    obj : Any
        The object to check.

    Returns
    -------
    bool
    """

def is_within_last_24_hours(timestamp_ns: builtins.int) -> builtins.bool:
    r"""
    Return whether the given UNIX nanoseconds timestamp is within the last 24 hours.

    Parameters
    ----------
    timestamp_ns : int
        The UNIX nanoseconds timestamp datum.

    Returns
    -------
    bool

    Raises
    ------
    ValueError
        If `timestamp` is invalid.

    # Errors

    Returns a `PyErr` if the provided timestamp is invalid.
    """

def last_weekday_nanos(year: builtins.int, month: builtins.int, day: builtins.int) -> builtins.int:
    r"""
    Return UNIX nanoseconds at midnight (UTC) of the last weekday (Mon-Fri).

    Parameters
    ----------
    year : int
        The year from the datum date.
    month : int
        The month from the datum date.
    day : int
        The day from the datum date.

    Returns
    -------
    int

    Raises
    ------
    `ValueError`
        If given an invalid date.

    # Errors

    Returns a `PyErr` if the provided date is invalid.
    """

def micros_to_nanos(micros: builtins.float) -> builtins.int:
    r"""
    Return round nanoseconds (ns) converted from the given microseconds (μs).

    Parameters
    ----------
    micros : float
        The microseconds to convert.

    Returns
    -------
    int
    """

def millis_to_nanos(millis: builtins.float) -> builtins.int:
    r"""
    Return round nanoseconds (ns) converted from the given milliseconds (ms).

    Parameters
    ----------
    millis : float
        The milliseconds to convert.

    Returns
    -------
    int
    """

def nanos_to_micros(nanos: builtins.int) -> builtins.int:
    r"""
    Return round microseconds (μs) converted from the given nanoseconds (ns).

    Parameters
    ----------
    nanos : int
        The nanoseconds to convert.

    Returns
    -------
    int
    """

def nanos_to_millis(nanos: builtins.int) -> builtins.int:
    r"""
    Return round milliseconds (ms) converted from the given nanoseconds (ns).

    Parameters
    ----------
    nanos : int
        The nanoseconds to convert.

    Returns
    -------
    int
    """

def nanos_to_secs(nanos: builtins.int) -> builtins.float:
    r"""
    Return seconds converted from the given nanoseconds (ns).

    Parameters
    ----------
    nanos : int
        The nanoseconds to convert.

    Returns
    -------
    float
    """

def secs_to_millis(secs: builtins.float) -> builtins.int:
    r"""
    Return round milliseconds (ms) converted from the given seconds.

    Parameters
    ----------
    secs : float
        The seconds to convert.

    Returns
    -------
    int
    """

def secs_to_nanos(secs: builtins.float) -> builtins.int:
    r"""
    Return round nanoseconds (ns) converted from the given seconds.

    Parameters
    ----------
    secs : float
        The seconds to convert.

    Returns
    -------
    int
    """

def unix_nanos_to_iso8601(
    timestamp_ns: builtins.int, nanos_precision: builtins.bool | None = True
) -> builtins.str:
    r"""
    Return UNIX nanoseconds as an ISO 8601 (RFC 3339) format string.

    Parameters
    ----------
    timestamp_ns : int
        The UNIX timestamp (nanoseconds).
    nanos_precision : bool, default True
        If True, use nanosecond precision. If False, use millisecond precision.

    Returns
    -------
    str

    Raises
    ------
    ValueError
        If `timestamp_ns` is invalid.
    """
